<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // main ::  IO ()
    const main = () =&gt; {
        const
            macroGroupName = 'MD Link tools',
            mdLinkToolsGroups = Application(
                'Keyboard Maestro'
            )
            .macroGroups.where({
                name: macroGroupName
            });
        return either(
            alert('Copy as MD Link - Map bundle to UUID')
        )(
            tpl =&gt; {
                const [dictJSON, count] = Array.from(tpl);
                return (
                    copyText(dictJSON),
                    alert(
                        `Copy as MD Link :: ${count} specialised instances.`
                    )(dictJSON)
                );
            }
        )(
            0 &lt; mdLinkToolsGroups.length ? (() =&gt; {
                const
                    instances = mdLinkToolsGroups.at(0)
                    .macros()
                    .flatMap(macro =&gt; {
                        const k = macro.name();
                        return k.includes('.') ? (
                            [
                                [k, macro.id()]
                            ]
                        ) : [];
                    });
                return Right(
                    Tuple(
                        JSON.stringify(
                            instances.reduce(
                                (a, [bundle, uuid]) =&gt; Object.assign(
                                    a, {
                                        [bundle]: uuid
                                    }
                                ), {}
                            ),
                            null, 2
                        )
                    )(instances.length)
                );
            })() : Left(
                `Macro group not found:\n\n\t${macroGroupName}`
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);
            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // toLower :: String -&gt; String
    const toLower = s =&gt;
        // Lower-case version of string.
        s.toLocaleLowerCase();

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>634657573.72913599</real>
				<key>CustomIconData</key>
				<data>
				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
				AAAAAQBAAAABAgADAAAABAAADaQBAwADAAAAAQAFAAAB
				BgADAAAAAQACAAABCgADAAAAAQABAAABEQAEAAAAAQAA
				AAgBEgADAAAAAQABAAABFQADAAAAAQAEAAABFgADAAAA
				AQBAAAABFwAEAAAAAQAADMkBHAADAAAAAQABAAABKAAD
				AAAAAQACAAABPQADAAAAAQACAAABUgADAAAAAQABAAAB
				UwADAAAABAAADayHcwAHAAAH2AAADbQAABkwAAgACAAI
				AAgAAQABAAEAAQAAB9hhcHBsAiAAAG1udHJSR0IgWFla
				IAfZAAIAGQALABoAC2Fjc3BBUFBMAAAAAGFwcGwAAAAA
				AAAAAAAAAAAAAAAAAAD21gABAAAAANMtYXBwbAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAC2Rlc2MAAAEIAAAAb2RzY20AAAF4AAAF
				nGNwcnQAAAcUAAAAOHd0cHQAAAdMAAAAFHJYWVoAAAdg
				AAAAFGdYWVoAAAd0AAAAFGJYWVoAAAeIAAAAFHJUUkMA
				AAecAAAADmNoYWQAAAesAAAALGJUUkMAAAecAAAADmdU
				UkMAAAecAAAADmRlc2MAAAAAAAAAFEdlbmVyaWMgUkdC
				IFByb2ZpbGUAAAAAAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtbHVjAAAAAAAA
				AB8AAAAMc2tTSwAAACgAAAGEZGFESwAAAC4AAAGsY2FF
				UwAAACQAAAHadmlWTgAAACQAAAH+cHRCUgAAACYAAAIi
				dWtVQQAAACoAAAJIZnJGVQAAACgAAAJyaHVIVQAAACgA
				AAKaemhUVwAAABYAAALCbmJOTwAAACYAAALYY3NDWgAA
				ACIAAAL+aGVJTAAAAB4AAAMgaXRJVAAAACgAAAM+cm9S
				TwAAACQAAANmZGVERQAAACwAAAOKa29LUgAAABYAAAO2
				c3ZTRQAAACYAAALYemhDTgAAABYAAAPMamFKUAAAABoA
				AAPiZWxHUgAAACIAAAP8cHRQTwAAACYAAAQebmxOTAAA
				ACgAAAREZXNFUwAAACYAAAQedGhUSAAAACQAAARsdHJU
				UgAAACIAAASQZmlGSQAAACgAAASyaHJIUgAAACgAAATa
				cGxQTAAAACwAAAUCcnVSVQAAACIAAAUuYXJFRwAAACYA
				AAVQZW5VUwAAACYAAAV2AFYBYQBlAG8AYgBlAGMAbgD9
				ACAAUgBHAEIAIABwAHIAbwBmAGkAbABHAGUAbgBlAHIA
				ZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABz
				AGUAUABlAHIAZgBpAGwAIABSAEcAQgAgAGcAZQBuAOgA
				cgBpAGMAQx6lAHUAIABoAOwAbgBoACAAUgBHAEIAIABD
				AGgAdQBuAGcAUABlAHIAZgBpAGwAIABSAEcAQgAgAEcA
				ZQBuAOkAcgBpAGMAbwQXBDAEMwQwBDsETAQ9BDgEOQAg
				BD8EQAQ+BEQEMAQ5BDsAIABSAEcAQgBQAHIAbwBmAGkA
				bAAgAGcA6QBuAOkAcgBpAHEAdQBlACAAUgBWAEIAwQBs
				AHQAYQBsAOEAbgBvAHMAIABSAEcAQgAgAHAAcgBvAGYA
				aQBskBp1KAAgAFIARwBCACCCcl9pY8+P8ABHAGUAbgBl
				AHIAaQBzAGsAIABSAEcAQgAtAHAAcgBvAGYAaQBsAE8A
				YgBlAGMAbgD9ACAAUgBHAEIAIABwAHIAbwBmAGkAbAXk
				BegF1QXkBdkF3AAgAFIARwBCACAF2wXcBdwF2QBQAHIA
				bwBmAGkAbABvACAAUgBHAEIAIABnAGUAbgBlAHIAaQBj
				AG8AUAByAG8AZgBpAGwAIABSAEcAQgAgAGcAZQBuAGUA
				cgBpAGMAQQBsAGwAZwBlAG0AZQBpAG4AZQBzACAAUgBH
				AEIALQBQAHIAbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4
				XNMMx3xmbpAaACAAUgBHAEIAIGPPj/Blh072TgCCLAAg
				AFIARwBCACAw1zDtMNUwoTCkMOsDkwO1A70DuQO6A8wA
				IAPAA8EDvwPGA68DuwAgAFIARwBCAFAAZQByAGYAaQBs
				ACAAUgBHAEIAIABnAGUAbgDpAHIAaQBjAG8AQQBsAGcA
				ZQBtAGUAZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAZQBs
				DkIOGw4jDkQOHw4lDkwAIABSAEcAQgAgDhcOMQ5IDicO
				RA4bAEcAZQBuAGUAbAAgAFIARwBCACAAUAByAG8AZgBp
				AGwAaQBZAGwAZQBpAG4AZQBuACAAUgBHAEIALQBwAHIA
				bwBmAGkAaQBsAGkARwBlAG4AZQByAGkBDQBrAGkAIABS
				AEcAQgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMA
				YQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQx
				BEkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUG
				RAZBACAGKgY5BjEGSgZBACAAUgBHAEIAIAYnBkQGOQYn
				BkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8A
				ZgBpAGwAZXRleHQAAAAAQ29weXJpZ2h0IDIwMDcgQXBw
				bGUgSW5jLiwgYWxsIHJpZ2h0cyByZXNlcnZlZC4AWFla
				IAAAAAAAAPNSAAEAAAABFs9YWVogAAAAAAAAdE0AAD3u
				AAAD0FhZWiAAAAAAAABadQAArHMAABc0WFlaIAAAAAAA
				ACgaAAAVnwAAuDZjdXJ2AAAAAAAAAAEBzQAAc2YzMgAA
				AAAAAQxCAAAF3v//8yYAAAeSAAD9kf//+6L///2jAAAD
				3AAAwGyAACBQOCQISwcUGmFG8lw0ohaIBeCxOKRWLReM
				RmKuqOOlax9XpeRJFtyVsRkBSkBGaWG88y89hWZBN9TU
				AP+cRqdTueT2BAGgAADUMAOujO1D0lCpqmJF/U9/QSFG
				k4o2rI6oAB91ufV2vV+dgWxACVAA52c5SJLo+DiUULu4
				MYKXMI1t92C8Xm9RSxAUAOzAO8i4MdVZGpmpmZ84u943
				HY4D5EAWpNNfLOgM5kLzh/4+LAO/ADJZ2dAGcgB7vXPR
				igAEAOfYOl37PSauKgQBgB+txrAACshigAAgKdggD7ol
				FeBAQCbaNbN37XnQQAgoGAB6ptFAAImxBb6dgEJ8d6NJ
				qTcFg6BafpwXodL28IFAsAPZPpAABA0H3fcSLqim4POu
				exjme9D1Ju+D4ve+LqPm+r7vy/b+oxAB/wE+sCwO9cFP
				bBkGp/B77Pw/T+AK/yLQtDECQMf70w5ECBw/EDqvpEcJ
				RNFCKxVAcNRdBD2RBGcGxrCESQnE8KvXFcfRfBMYoFIb
				4yLG8Swo/8lx7FsnSDBspPbKkIytJMsQDLUNyfKEvunM
				MjxzJUzQzLcgQ66c1rAAoDJ+10HASAB6E6/AJDIPErxS
				9YPga+pmN7F1FTSgh/H4gR+H6x87tKgR+n04RjF44SUp
				+/wEz8fRalcAAGkaUwAAHHSKQsDIEAAfBIEYm4HgjTUA
				H0u5/gyDabhQGL1wAvFMJ2f7cN0PI0VSShW1aBT/AFPh
				+tIfNjK6A7/AHPh6Kif4Ouue5Ok2AB/BwI1NU4vNkPC1
				x+uZdA5jCAAHkyWSyIrV6fW09YLgU1BOkvdAiCigR7nt
				S7aMfUJ/gG5p+jlewHk0WNQMbC2AtQThLXQIop4S1TbX
				esGHgG3IBDkMAAAUTRZuEgl+0Om4Kz8fBNEm5DlPrkkP
				Ya+NQ1a3IBjjloEE3mLhzgf4KVmfBMPwfomC1hOFzVoM
				Y6HaoAAIOAvgABBOlsgUUQsCTjnwS1bn6KGwtRrEoRlr
				W5rJV4DDiLyhE8XCbglPR8Em7Z+imMWr7simTQbodJNE
				OwzAAfgaBw3QvjdxHEosyxrswzTOc1PbltCfzSH6u/Qo
				G1rXtiwzEIUxTGdT2adsi47KLat64rmCi6q52ngIGvq/
				sCwYih0qSFKqq6srt4PE+GsqzjmtKREfmaVJYMyXJgmQ
				Kpom3QeevXVqHPSjHWpClKYTSnKyjHcqmhiHIgCyJfGv
				COHUjyQLUkhJiKkBAAARAQAAAwAAAAEAIAAAAQEAAwAA
				AAEAIAAAAQIAAwAAAAQAABoCAQMAAwAAAAEABQAAAQYA
				AwAAAAEAAgAAAQoAAwAAAAEAAQAAAREABAAAAAEAABWM
				ARIAAwAAAAEAAQAAARUAAwAAAAEABAAAARYAAwAAAAEA
				IAAAARcABAAAAAEAAAOjARwAAwAAAAEAAQAAASgAAwAA
				AAEAAgAAAT0AAwAAAAEAAgAAAVIAAwAAAAEAAQAAAVMA
				AwAAAAQAABoKh3MABwAAB9gAABoSAAAjuAAIAAgACAAI
				AAEAAQABAAEAAAfYYXBwbAIgAABtbnRyUkdCIFhZWiAH
				2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAA
				AAAAAAAAAAAAAAAA9tYAAQAAAADTLWFwcGwAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABZxj
				cHJ0AAAHFAAAADh3dHB0AAAHTAAAABRyWFlaAAAHYAAA
				ABRnWFlaAAAHdAAAABRiWFlaAAAHiAAAABRyVFJDAAAH
				nAAAAA5jaGFkAAAHrAAAACxiVFJDAAAHnAAAAA5nVFJD
				AAAHnAAAAA5kZXNjAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJv
				ZmlsZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAf
				AAAADHNrU0sAAAAoAAABhGRhREsAAAAuAAABrGNhRVMA
				AAAkAAAB2nZpVk4AAAAkAAAB/nB0QlIAAAAmAAACInVr
				VUEAAAAqAAACSGZyRlUAAAAoAAACcmh1SFUAAAAoAAAC
				mnpoVFcAAAAWAAACwm5iTk8AAAAmAAAC2GNzQ1oAAAAi
				AAAC/mhlSUwAAAAeAAADIGl0SVQAAAAoAAADPnJvUk8A
				AAAkAAADZmRlREUAAAAsAAADimtvS1IAAAAWAAADtnN2
				U0UAAAAmAAAC2HpoQ04AAAAWAAADzGphSlAAAAAaAAAD
				4mVsR1IAAAAiAAAD/HB0UE8AAAAmAAAEHm5sTkwAAAAo
				AAAERGVzRVMAAAAmAAAEHnRoVEgAAAAkAAAEbHRyVFIA
				AAAiAAAEkGZpRkkAAAAoAAAEsmhySFIAAAAoAAAE2nBs
				UEwAAAAsAAAFAnJ1UlUAAAAiAAAFLmFyRUcAAAAmAAAF
				UGVuVVMAAAAmAAAFdgBWAWEAZQBvAGIAZQBjAG4A/QAg
				AFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGUA
				bAAgAFIARwBCAC0AYgBlAHMAawByAGkAdgBlAGwAcwBl
				AFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIA
				aQBjAEMepQB1ACAAaADsAG4AaAAgAFIARwBCACAAQwBo
				AHUAbgBnAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUA
				bgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQQ4BDkAIAQ/
				BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwA
				IABnAOkAbgDpAHIAaQBxAHUAZQAgAFIAVgBCAMEAbAB0
				AGEAbADhAG4AbwBzACAAUgBHAEIAIABwAHIAbwBmAGkA
				bJAadSgAIABSAEcAQgAggnJfaWPPj/AARwBlAG4AZQBy
				AGkAcwBrACAAUgBHAEIALQBwAHIAbwBmAGkAbABPAGIA
				ZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwF5AXo
				BdUF5AXZBdwAIABSAEcAQgAgBdsF3AXcBdkAUAByAG8A
				ZgBpAGwAbwAgAFIARwBCACAAZwBlAG4AZQByAGkAYwBv
				AFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIA
				aQBjAEEAbABsAGcAZQBtAGUAaQBuAGUAcwAgAFIARwBC
				AC0AUAByAG8AZgBpAGzHfLwYACAAUgBHAEIAINUEuFzT
				DMd8Zm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABS
				AEcAQgAgMNcw7TDVMKEwpDDrA5MDtQO9A7kDugPMACAD
				wAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAg
				AFIARwBCACAAZwBlAG4A6QByAGkAYwBvAEEAbABnAGUA
				bQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUAbA5C
				DhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQO
				GwBHAGUAbgBlAGwAIABSAEcAQgAgAFAAcgBvAGYAaQBs
				AGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8A
				ZgBpAGkAbABpAEcAZQBuAGUAcgBpAQ0AawBpACAAUgBH
				AEIAIABwAHIAbwBmAGkAbABVAG4AaQB3AGUAcgBzAGEA
				bABuAHkAIABwAHIAbwBmAGkAbAAgAFIARwBCBB4EMQRJ
				BDgEOQAgBD8EQAQ+BEQEOAQ7BEwAIABSAEcAQgZFBkQG
				QQAgBioGOQYxBkoGQQAgAFIARwBCACAGJwZEBjkGJwZF
				AEcAZQBuAGUAcgBpAGMAIABSAEcAQgAgAFAAcgBvAGYA
				aQBsAGV0ZXh0AAAAAENvcHlyaWdodCAyMDA3IEFwcGxl
				IEluYy4sIGFsbCByaWdodHMgcmVzZXJ2ZWQuAFhZWiAA
				AAAAAADzUgABAAAAARbPWFlaIAAAAAAAAHRNAAA97gAA
				A9BYWVogAAAAAAAAWnUAAKxzAAAXNFhZWiAAAAAAAAAo
				GgAAFZ8AALg2Y3VydgAAAAAAAAABAc0AAHNmMzIAAAAA
				AAEMQgAABd7///MmAAAHkgAA/ZH///ui///9owAAA9wA
				AMBsgAAgQAD0FESOhCUIsLJL+h0DiERiUTiACiwAXcZW
				5yjhscUfbwgkQjVklWYtlApe0riktl0uBUxADTmjXKk3
				JqrnS4J09I8re0vgYGA4Af4FAsRAL6fMCfb7oQAmIKAC
				yqy5eNZf8Of1RAADpL+V6kAAHZbLgQBgT9JRNAD+HxFg
				T6fVRiwCADvvT/r0Cf4Jqj/MZRAAOUq9iL5QpuAD7OqG
				gT1el9gV6d98vt/wJpK+FT63xKJOmNOKAyOTymWzFezV
				Gzme0EQfOi0mmAGSyl5vdRsFGBgLoxlKeFTq1xKNO+NO
				SBgT0ecCfj9qOqqLXZ4AANqgSK5gLV7IiL6OJYAD8Kpe
				owIBlGEQnv2riXUigGA1vTyTAALPSFr71qC/Ikfy1H8D
				4HAAfBMEwt4eiOpy6oo+SXNaAJKEO/I6EU7AAOkiB/gq
				qh8E0SkNiSKqBHuerpt2oTsoEwCvkoyAEjmRKjAkop8E
				2SUNiYLKBHs1C+qyeKtoeqMWgABCigISsan+DAMw2Kgw
				x/FLKLuACdFWnifKA3IAKIgbMLo3Kpqqq6RBAkiTJQFq
				VJZL8vzMmhppsnCIIKDyDoShYiobI04opLCMl2jaOo+c
				RvICABEBAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgAD
				AAAABAAAJIoBAwADAAAAAQAFAAABBgADAAAAAQACAAAB
				CgADAAAAAQABAAABEQAEAAAAAQAAIeoBEgADAAAAAQAB
				AAABFQADAAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAA
				AQAAAc4BHAADAAAAAQABAAABKAADAAAAAQACAAABPQAD
				AAAAAQACAAABUgADAAAAAQABAAABUwADAAAABAAAJJKH
				cwAHAAAH2AAAJJoAAAAAAAgACAAIAAgAAQABAAEAAQAA
				B9hhcHBsAiAAAG1udHJSR0IgWFlaIAfZAAIAGQALABoA
				C2Fjc3BBUFBMAAAAAGFwcGwAAAAAAAAAAAAAAAAAAAAA
				AAD21gABAAAAANMtYXBwbAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2Rl
				c2MAAAEIAAAAb2RzY20AAAF4AAAFnGNwcnQAAAcUAAAA
				OHd0cHQAAAdMAAAAFHJYWVoAAAdgAAAAFGdYWVoAAAd0
				AAAAFGJYWVoAAAeIAAAAFHJUUkMAAAecAAAADmNoYWQA
				AAesAAAALGJUUkMAAAecAAAADmdUUkMAAAecAAAADmRl
				c2MAAAAAAAAAFEdlbmVyaWMgUkdCIFByb2ZpbGUAAAAA
				AAAAAAAAABRHZW5lcmljIFJHQiBQcm9maWxlAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAABtbHVjAAAAAAAAAB8AAAAMc2tTSwAA
				ACgAAAGEZGFESwAAAC4AAAGsY2FFUwAAACQAAAHadmlW
				TgAAACQAAAH+cHRCUgAAACYAAAIidWtVQQAAACoAAAJI
				ZnJGVQAAACgAAAJyaHVIVQAAACgAAAKaemhUVwAAABYA
				AALCbmJOTwAAACYAAALYY3NDWgAAACIAAAL+aGVJTAAA
				AB4AAAMgaXRJVAAAACgAAAM+cm9STwAAACQAAANmZGVE
				RQAAACwAAAOKa29LUgAAABYAAAO2c3ZTRQAAACYAAALY
				emhDTgAAABYAAAPMamFKUAAAABoAAAPiZWxHUgAAACIA
				AAP8cHRQTwAAACYAAAQebmxOTAAAACgAAAREZXNFUwAA
				ACYAAAQedGhUSAAAACQAAARsdHJUUgAAACIAAASQZmlG
				SQAAACgAAASyaHJIUgAAACgAAATacGxQTAAAACwAAAUC
				cnVSVQAAACIAAAUuYXJFRwAAACYAAAVQZW5VUwAAACYA
				AAV2AFYBYQBlAG8AYgBlAGMAbgD9ACAAUgBHAEIAIABw
				AHIAbwBmAGkAbABHAGUAbgBlAHIAZQBsACAAUgBHAEIA
				LQBiAGUAcwBrAHIAaQB2AGUAbABzAGUAUABlAHIAZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAOgAcgBpAGMAQx6lAHUA
				IABoAOwAbgBoACAAUgBHAEIAIABDAGgAdQBuAGcAUABl
				AHIAZgBpAGwAIABSAEcAQgAgAEcAZQBuAOkAcgBpAGMA
				bwQXBDAEMwQwBDsETAQ9BDgEOQAgBD8EQAQ+BEQEMAQ5
				BDsAIABSAEcAQgBQAHIAbwBmAGkAbAAgAGcA6QBuAOkA
				cgBpAHEAdQBlACAAUgBWAEIAwQBsAHQAYQBsAOEAbgBv
				AHMAIABSAEcAQgAgAHAAcgBvAGYAaQBskBp1KAAgAFIA
				RwBCACCCcl9pY8+P8ABHAGUAbgBlAHIAaQBzAGsAIABS
				AEcAQgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgD9ACAA
				UgBHAEIAIABwAHIAbwBmAGkAbAXkBegF1QXkBdkF3AAg
				AFIARwBCACAF2wXcBdwF2QBQAHIAbwBmAGkAbABvACAA
				UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8AUAByAG8AZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAGUAcgBpAGMAQQBsAGwA
				ZwBlAG0AZQBpAG4AZQBzACAAUgBHAEIALQBQAHIAbwBm
				AGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3xmbpAaACAA
				UgBHAEIAIGPPj/Blh072TgCCLAAgAFIARwBCACAw1zDt
				MNUwoTCkMOsDkwO1A70DuQO6A8wAIAPAA8EDvwPGA68D
				uwAgAFIARwBCAFAAZQByAGYAaQBsACAAUgBHAEIAIABn
				AGUAbgDpAHIAaQBjAG8AQQBsAGcAZQBtAGUAZQBuACAA
				UgBHAEIALQBwAHIAbwBmAGkAZQBsDkIOGw4jDkQOHw4l
				DkwAIABSAEcAQgAgDhcOMQ5IDicORA4bAEcAZQBuAGUA
				bAAgAFIARwBCACAAUAByAG8AZgBpAGwAaQBZAGwAZQBp
				AG4AZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAaQBsAGkA
				RwBlAG4AZQByAGkBDQBrAGkAIABSAEcAQgAgAHAAcgBv
				AGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAA
				cgBvAGYAaQBsACAAUgBHAEIEHgQxBEkEOAQ5ACAEPwRA
				BD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEG
				SgZBACAAUgBHAEIAIAYnBkQGOQYnBkUARwBlAG4AZQBy
				AGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZXRleHQA
				AAAAQ29weXJpZ2h0IDIwMDcgQXBwbGUgSW5jLiwgYWxs
				IHJpZ2h0cyByZXNlcnZlZC4AWFlaIAAAAAAAAPNSAAEA
				AAABFs9YWVogAAAAAAAAdE0AAD3uAAAD0FhZWiAAAAAA
				AABadQAArHMAABc0WFlaIAAAAAAAACgaAAAVnwAAuDZj
				dXJ2AAAAAAAAAAEBzQAAc2YzMgAAAAAAAQxCAAAF3v//
				8yYAAAeSAAD9kf//+6L///2jAAAD3AAAwGw=
				</data>
				<key>ModificationDate</key>
				<real>634670070.05677497</real>
				<key>Name</key>
				<string>Tool :: Map from bundleIDs to KM UUIDs</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>B5C4D4B4-30DC-4722-B656-3D15A510E109</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Copy Markdown link from MarginNote 3'))(x =&gt; x)(
            bindLR(
                menuItemClickedLR('MarginNote 3')([
                    'Edit', 'Copy note URL'
                ])
            )(_ =&gt; {
                const strAddr = (
                    delay(0.2),
                    clipboardText()
                );
                return bindLR(
                    strAddr.startsWith('marginnote') ? (
                        Right(strAddr)
                    ) : Left('No address copied')
                )(address =&gt; bindLR(
                    menuItemClickedLR('MarginNote 3')([
                        'Edit', 'Copy'
                    ])
                )(_ =&gt; {
                    const strName = (
                        delay(0.5), // ADJUST HERE ...
                        clipboardText()
                    );
                    return !strName.startsWith('marginnote') ? (
                        Right('[' +
                            strName.split(/\n/)[0] +
                            '](' + address + ')')
                    ) : Left('No Name copied - try increasing delay ...')
                }))
            })
        );

    // alert :: String -&gt; String -&gt; IO String
    const alert = title =&gt; s =&gt; {
        const
            sa = Object.assign(Application('System Events'), {
                includeStandardAdditions: true
            });
        return (
            sa.activate(),
            sa.displayDialog(s, {
                withTitle: title,
                buttons: ['OK'],
                defaultButton: 'OK'
            }),
            s
        );
    };


    // clipboardText :: IO () -&gt; String
    const clipboardText = () =&gt;
        // Any plain text in the clipboard.
        ObjC.unwrap(
            $.NSString.alloc.initWithDataEncoding(
                $.NSPasteboard.generalPasteboard
                .dataForType($.NSPasteboardTypeString),
                $.NSUTF8StringEncoding
            )
        );

    // menuItemClickedLR :: String -&gt; [String] -&gt; Either String IO String
    const menuItemClickedLR = strAppName =&gt; menuParts =&gt; {
        const intMenuPath = menuParts.length;
        return 1 &lt; intMenuPath ? (() =&gt; {
            const
                appProcs = Application('System Events')
                .processes.where({
                    name: strAppName
                });
            return 0 &lt; appProcs.length ? (() =&gt; {
                Application(strAppName).activate();
                delay(0.1);
                return bindLR(
                    menuParts.slice(1, -1)
                    .reduce(
                        (lra, x) =&gt; bindLR(lra)(a =&gt; {
                            const menuItem = a.menuItems[x];
                            return menuItem.exists() ? (
                                Right(menuItem.menus[x])
                            ) : Left('Menu item not found: ' + x);
                        })(),
                        (() =&gt; {
                            const
                                k = menuParts[0],
                                menu = appProcs[0].menuBars[0]
                                .menus.byName(k);
                            return menu.exists() ? (
                                Right(menu)
                            ) : Left('Menu not found: ' + k);
                        })()
                    )
                )(xs =&gt; {
                    const
                        k = menuParts[intMenuPath - 1],
                        items = xs.menuItems,
                        strPath = [strAppName]
                        .concat(menuParts).join(' &gt; ');
                    return bindLR(
                        items[k].exists() ? (
                            Right(items[k])
                        ) : Left('Menu item not found: ' + k)
                    )(x =&gt; x.enabled() ? (
                        x.click(),
                        Right('Clicked: ' + strPath)
                    ) : Left(
                        'Menu item disabled : ' + strPath
                    ))
                })
            })() : Left(strAppName + ' not running.');
        })() : Left(
            'MenuItemClickedLR needs a menu path of 2+ items.'
        );
    };


    // GENERIC FUNCTIONS ----------------------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt; mf =&gt;
        undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt; fr =&gt; e =&gt;
        'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>593718996.65122902</real>
				<key>ModificationDate</key>
				<real>628543809.30157804</real>
				<key>Name</key>
				<string>QReader.MarginStudyMac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>F94CFFEA-7493-4249-9611-AA654CFF4FF6</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>org.mozilla.firefox</string>
							<key>Name</key>
							<string>Firefox</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>37</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
						<key>TargetApplication</key>
						<dict/>
						<key>TargetingType</key>
						<string>Front</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%FrontWindowName%](%SystemClipboard%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620235747.35165203</real>
				<key>ModificationDate</key>
				<real>628774615.00386405</real>
				<key>Name</key>
				<string>org.mozilla.firefox</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>091EFAC5-DC5E-4501-B685-431574AE99BC</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC7zBQAAKwAAAAEA
						AADrBQAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bFxmMFxmc3dpc3NcZmNoYXJzZXQw
						IEhlbHZldGljYTtcZjFcZm5pbFxm
						Y2hhcnNldDAgTWVubG8tUmVndWxh
						cjtcZjJcZnN3aXNzXGZjaGFyc2V0
						MCBIZWx2ZXRpY2EtT2JsaXF1ZTsK
						fQp7XGNvbG9ydGJsO1xyZWQyNTVc
						Z3JlZW4yNTVcYmx1ZTI1NTtccmVk
						MFxncmVlbjBcYmx1ZTA7fQp7XCpc
						ZXhwYW5kZWRjb2xvcnRibDs7XGNz
						c3JnYlxjMFxjMFxjMFxjODQ3MDZc
						Y25hbWUgY29udHJvbFRleHRDb2xv
						cjt9ClxwYXJkXHR4NTYwXHR4MTEy
						MFx0eDE2ODBcdHgyMjQwXHR4Mjgw
						MFx0eDMzNjBcdHgzOTIwXHR4NDQ4
						MFx0eDUwNDBcdHg1NjAwXHR4NjE2
						MFx0eDY3MjBccGFyZGlybmF0dXJh
						bFxwYXJ0aWdodGVuZmFjdG9yMAoK
						XGYwXGZzMzBcZnNtaWxsaTE1MzY0
						IFxjZjIgRm9yIGEgbWVudSBvZiBs
						aW5rcyBpbiB0aGUgZnJvbnQgZG9j
						dW1lbnQgaW4gVGFza1BhcGVyIDMs
						IGVkaXQgOlwKXHBhcmRcdHg1NjBc
						dHgxMTIwXHR4MTY4MFx0eDIyNDBc
						dHgyODAwXHR4MzM2MFx0eDM5MjBc
						dHg0NDgwXHR4NTA0MFx0eDU2MDBc
						dHg2MTYwXHR4NjcyMFxwYXJkaXJu
						YXR1cmFsXHBhcnRpZ2h0ZW5mYWN0
						b3IwCgpcZjFcZnMyNCBcY2YwIFwK
						ICAgIGNvbnN0IHNob3dMaW5rc0lu
						VGFza1BhcGVyRnJvbnREb2MgPSBm
						YWxzZTtcClwKXHBhcmRcdHg1NjBc
						dHgxMTIwXHR4MTY4MFx0eDIyNDBc
						dHgyODAwXHR4MzM2MFx0eDM5MjBc
						dHg0NDgwXHR4NTA0MFx0eDU2MDBc
						dHg2MTYwXHR4NjcyMFxwYXJkaXJu
						YXR1cmFsXHBhcnRpZ2h0ZW5mYWN0
						b3IwCgpcZjBcZnMzMFxmc21pbGxp
						MTUzNjQgXGNmMiBuZWFyIHRoZSB0
						b3Agb2YgdGhlIEphdmFTY3JpcHQg
						Zm9yIEF1dG9tYXRpb24gc2NyaXB0
						IGJlbG93LCB0bzpcClwKCQpcZjFc
						ZnMyNCBcY2YwIGNvbnN0IHNob3dM
						aW5rc0luVGFza1BhcGVyRnJvbnRE
						b2MgPSB0cnVlO1wKClxmMFxmczMw
						XGZzbWlsbGkxNTM2NCBcY2YyIFwK
						T3IsIG9yIGEgbWVudSBvZiBsaW5r
						cyBrZXB0IGluIGEgcGFydGljdWxh
						ciB0ZXh0IGZpbGUsIGluIFttYXJr
						ZG93biBsaW5rXSh1cmwpIGZvcm1h
						dDpcClwKXHBhcmRcdHg1NjBcdHgx
						MTIwXHR4MTY4MFx0eDIyNDBcdHgy
						ODAwXHR4MzM2MFx0eDM5MjBcdHg0
						NDgwXHR4NTA0MFx0eDU2MDBcdHg2
						MTYwXHR4NjcyMFxwYXJkaXJuYXR1
						cmFsXHBhcnRpZ2h0ZW5mYWN0b3Iw
						CgpcZjFcZnMyNCBcY2YwIC0KXGYw
						XGZzMzBcZnNtaWxsaTE1MzY0IFxj
						ZjIgIGVkaXQgdGhlIHZhbHVlIG9m
						IApcZjFcZnMyNCBcY2YwIHNob3dM
						aW5rc0luVGFza1BhcGVyRnJvbnRE
						b2MgClxmMFxmczMwXGZzbWlsbGkx
						NTM2NCBcY2YyIHRvIApcZjFcZnMy
						NCBcY2YwIGZhbHNlLCBcCi0gClxm
						MFxmczMwXGZzbWlsbGkxNTM2NCBc
						Y2YyIHNwZWNpZnkgYSBmaWxlIHBh
						dGggYXMgdGhlIHZhbHVlIG9mIHRo
						ZSAKXGYyXGkgbGlua0xpc3RGaWxl
						UGF0aCAKXGYwXGkwICB2YXJpYWJs
						ZSBiZWxvdy59AQAAACMAAAABAAAA
						BwAAAFRYVC5ydGYQAAAA65JGX7YB
						AAAAAAAAAAAAAA==
						</data>
						<key>Title</key>
						<string>A menu of links EITHER in a specified text file, OR in the front document in TaskPaper</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>SPECIFY HERE THE FILE PATH A TEXT FILE containing MD links of the pattern [label](url)</string>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>~/projects/activeProjects.taskpaper</string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Briefly</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // Menu of the labels of any links 
    // (assumed to be in MD format) in the front
    // TaskPaper document, or in a file at the filePath 
    // specified by a Keyboard Maestro variable.

    // If one or more labels are chosen in the menu,
    // the corresponding links are opened.


    // --------------------- SETTINGS ----------------------

    // EITHER a menu of links in the TP3 front document,
    const showLinksInTaskPaperFrontDoc = true;

    // OR a menu of links in a file at a given path,
    // specified by a Keyboard Maestro variable.

    // e.g: '~/projects/activeProjects.taskpaper'
    const filePathKMVarName = 'linkListFilePath';


    // --------------------- MENU CODE ---------------------
    // main :: IO ()
    const main = () =&gt; {
        return either(
            msg =&gt; msg.startsWith('User cancelled') ? (
                msg
            ) : alert('Link menu')(msg)
        )(openLinks)(
            bindLR(
                showLinksInTaskPaperFrontDoc ? (
                    taskPaperFrontDocFilePathLR()
                ) : filePathFromKMVariableLR(
                    filePathKMVarName
                )
            )(fp =&gt; {
                const menuKVs = mdLinkValuesInFile(fp);
                return 0 &lt; menuKVs.length ? (
                    bindLR(
                        showMenuLR(true)('Links')(
                            menuKVs.map(x =&gt; x.label)
                        )
                    )(compose(
                        Right,
                        menuChoiceValues(
                            menuKVs
                        )('label')('link')
                    ))
                ) : Left('No links found in document.');
            })
        );
    };


    // ------------ FRONT DOCUMENT IN TASKPAPER ------------

    // taskPaperFrontDocFilePathLR :: Either String FilePath
    const taskPaperFrontDocFilePathLR = () =&gt; {
        const
            tp = Application('TaskPaper'),
            ds = tp.documents;
        return 0 &lt; ds.length ? (
            Right(ds.at(0).file().toString())
        ) : Left('No document found in TaskPaper');
    };


    // ---- FILEPATH GIVEN IN KEYBOARD MAESTRO VARIABLE ----
    const filePathFromKMVariableLR = kmVarName =&gt; {
        const
            fp = Application('Keyboard Maestro Engine')
            .getvariable(kmVarName);
        return Boolean(fp) ? (() =&gt; {
            const fpPath = filePath(fp);
            return doesFileExist(fpPath) ? (
                Right(fpPath)
            ) : Left('No file found at: ' + fpPath);
        })() : Left(
            'No value found for KM variable: "' + (
                kmVarName + '"'
            )
        );
    };


    // ----------- CHOICE OF LINKS IN GIVEN FILE -----------

    // mdLinkValuesInFile :: FilePath -&gt; 
    // [{label :: String, link :: String }]
    const mdLinkValuesInFile = fp =&gt;
        sortBy(comparing(x =&gt; x.label))(
            lines(readFile(fp)).flatMap(
                x =&gt; x.includes('](') ? (
                    parse(mdLinkParse())(strip(x))
                ) : []
            ).map(fst)
        );

    // openLinks :: [URL String] -&gt; IO [URL String]
    const openLinks = urls =&gt; {
        const
            sa = Object.assign(
                Application.currentApplication(), {
                    includeStandardAdditions: true
                });
        return urls.map(x =&gt; (
            sa.openLocation(x),
            x
        ));
    };

    // menuChoiceValues :: [Dict a] -&gt;
    // String -&gt; String -&gt; [String] -&gt; [a]
    const menuChoiceValues = menuKVs =&gt;
        // A map from a list of keys to a list of values,
        // given a list of dictionaries, 
        // with their label and value keys,
        // and some subset of label keys.
        labelKey =&gt; valueKey =&gt; ks =&gt; {
            const
                dct = menuKVs.reduce(
                    (a, x) =&gt; Object.assign(
                        a, {
                            [x[labelKey]]: x[valueKey]
                        }
                    ), {}
                );
            return ks.flatMap(k =&gt; {
                const v = dct[k];
                return void 0 !== v ? (
                    [v]
                ) : [];
            });
        };

    // ------------------- PARSING LINKS -------------------

    // mdLinkParse :: () -&gt; 
    // Parser {title :: String, link :: String}
    const mdLinkParse = () =&gt;
        bindP(
            char('[')
        )(_ =&gt; bindP(
            many(noneOf(']'))
        )(title =&gt; bindP(
            string('](')
        )(_ =&gt; bindP(
            many(noneOf(')'))
        )(link =&gt; pureP({
            label: title.join(''),
            link: link.join('')
        })))));

    // ------------ GENERIC PARSER COMBINATORS -------------

    // Parser :: String -&gt; [(a, String)] -&gt; Parser a
    const Parser = f =&gt;
        // A function lifted into a Parser object.
        ({
            type: 'Parser',
            parser: f
        });


    // altP (&lt;|&gt;) :: Parser a -&gt; Parser a -&gt; Parser a
    const altP = p =&gt;
        // p, or q if p doesn't match.
        q =&gt; Parser(s =&gt; {
            const xs = parse(p)(s);
            return 0 &lt; xs.length ? (
                xs
            ) : parse(q)(s);
        });


    // apP &lt;*&gt; :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const apP = pf =&gt;
        // A new parser obtained by the application 
        // of a Parser-wrapped function,
        // to a Parser-wrapped value.
        p =&gt; Parser(
            s =&gt; parse(pf)(s).flatMap(
                vr =&gt; parse(
                    fmapP(vr[0])(p)
                )(vr[1])
            )
        );


    // bindP (&gt;&gt;=) :: Parser a -&gt; 
    // (a -&gt; Parser b) -&gt; Parser b
    const bindP = p =&gt;
        // A new parser obtained by the application of 
        // a function to a Parser-wrapped value.
        // The function must enrich its output, lifting it 
        // into a new Parser.
        // Allows for the nesting of parsers.
        f =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                tpl =&gt; parse(f(tpl[0]))(tpl[1])
            )
        );


    // char :: Char -&gt; Parser Char
    const char = x =&gt;
        // A particular single character.
        satisfy(c =&gt; x == c);


    // fmapP :: (a -&gt; b) -&gt; Parser a -&gt; Parser b  
    const fmapP = f =&gt;
        // A new parser derived by the structure-preserving 
        // application of f to the value in p.
        p =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                vr =&gt; Tuple(f(vr[0]))(vr[1])
            )
        );


    // liftA2P :: (a -&gt; b -&gt; c) -&gt; 
    // Parser a -&gt; Parser b -&gt; Parser c
    const liftA2P = op =&gt;
        // The binary function op, lifted
        // to a function over two parsers.
        p =&gt; apP(fmapP(op)(p));


    // many :: Parser a -&gt; Parser [a]
    const many = p =&gt; {
        // Zero or more instances of p.
        // Lifts a parser for a simple type of value 
        // to a parser for a list of such values.
        const some_p = p =&gt;
            liftA2P(
                x =&gt; xs =&gt; [x].concat(xs)
            )(p)(many(p));
        return Parser(
            s =&gt; parse(
                0 &lt; s.length ? (
                    altP(some_p(p))(pureP([]))
                ) : pureP([])
            )(s)
        );
    };

    // noneOf :: String -&gt; Parser Char
    const noneOf = s =&gt;
        // Any character not found in the
        // exclusion string.
        satisfy(c =&gt; !s.includes(c));


    // parse :: Parser a -&gt; String -&gt; [(a, String)]
    const parse = p =&gt;
        // The result of parsing s with p.
        s =&gt; {
            // showLog('s', s)
            return p.parser([...s]);
        };


    // pureP :: a -&gt; Parser a
    const pureP = x =&gt;
        // The value x lifted, unchanged, 
        // into the Parser monad.
        Parser(s =&gt; [Tuple(x)(s)]);


    // satisfy :: (Char -&gt; Bool) -&gt; Parser Char
    const satisfy = test =&gt;
        // Any character for which the 
        // given predicate returns true.
        Parser(
            s =&gt; 0 &lt; s.length ? (
                test(s[0]) ? [
                    Tuple(s[0])(s.slice(1))
                ] : []
            ) : []
        );


    // sequenceP :: [Parser a] -&gt; Parser [a]
    const sequenceP = ps =&gt;
        // A single parser for a list of values, derived
        // from a list of parsers for single values.
        Parser(
            s =&gt; ps.reduce(
                (a, q) =&gt; a.flatMap(
                    vr =&gt; parse(q)(snd(vr)).flatMap(
                        first(xs =&gt; fst(vr).concat(xs))
                    )
                ),
                [Tuple([])(s)]
            )
        );


    // string :: String -&gt; Parser String
    const string = s =&gt;
        // A particular string.
        fmapP(cs =&gt; cs.join(''))(
            sequenceP([...s].map(char))
        );


    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK',
                    withIcon: sa.pathToResource('TaskPaper.icns', {
                        inBundle: 'Applications/TaskPaper.app'
                    })
                }),
                s
            );
        };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);
            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );

    // doesFileExist :: FilePath -&gt; IO Bool
    const doesFileExist = fp =&gt; {
        const ref = Ref();
        return $.NSFileManager.defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp)
                .stringByStandardizingPath, ref
            ) &amp;&amp; 1 !== ref[0];
    };

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // filePath :: String -&gt; FilePath
    const filePath = s =&gt;
        // The given file path with any tilde expanded
        // to the full user directory path.
        ObjC.unwrap(ObjC.wrap(s)
            .stringByStandardizingPath);


    // first :: (a -&gt; b) -&gt; ((a, c) -&gt; (b, c))
    const first = f =&gt;
        // A simple function lifted to one which applies
        // to a tuple, transforming only its first item.
        xy =&gt; Tuple(f(xy[0]))(
            xy[1]
        );


    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];


    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // newline-delimited string.
        0 &lt; s.length ? (
            s.split(/[\r\n]/)
        ) : [];


    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // readFile :: FilePath -&gt; IO String
    const readFile = fp =&gt; {
        // The contents of a text file at the
        // path file fp.
        const
            e = $(),
            ns = $.NSString
            .stringWithContentsOfFileEncodingError(
                $(fp).stringByStandardizingPath,
                $.NSUTF8StringEncoding,
                e
            );
        return ObjC.unwrap(
            ns.isNil() ? (
                e.localizedDescription
            ) : ns
        );
    };

    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        console.log(
            args
            .map(JSON.stringify)
            .join(' -&gt; ')
        );


    // showMenuLR :: Bool -&gt; String -&gt; [String] -&gt; 
    // Either String [String]
    const showMenuLR = blnMult =&gt;
        title =&gt; xs =&gt; 0 &lt; xs.length ? (() =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            sa.activate();
            const v = sa.chooseFromList(xs, {
                withTitle: title,
                withPrompt: 'Select' + (
                    blnMult ? (
                        ' one or more of ' +
                        xs.length.toString()
                    ) : ':'
                ),
                defaultItems: xs[0],
                okButtonName: 'OK',
                cancelButtonName: 'Cancel',
                multipleSelectionsAllowed: blnMult,
                emptySelectionAllowed: false
            });
            return Array.isArray(v) ? (
                Right(v)
            ) : Left('User cancelled ' + title + ' menu.');
        })() : Left(title + ': No items to choose from.');


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // strip :: String -&gt; String
    const strip = s =&gt;
        s.trim();

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Clear the linkListFilePath variable, in case similar macros use a different file.</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620152106.71959996</real>
				<key>CustomIconData</key>
				<data>
				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
				AAAAAQBAAAABAgADAAAABAAADaQBAwADAAAAAQAFAAAB
				BgADAAAAAQACAAABCgADAAAAAQABAAABEQAEAAAAAQAA
				AAgBEgADAAAAAQABAAABFQADAAAAAQAEAAABFgADAAAA
				AQBAAAABFwAEAAAAAQAADMkBHAADAAAAAQABAAABKAAD
				AAAAAQACAAABPQADAAAAAQACAAABUgADAAAAAQABAAAB
				UwADAAAABAAADayHcwAHAAAH2AAADbQAABkwAAgACAAI
				AAgAAQABAAEAAQAAB9hhcHBsAiAAAG1udHJSR0IgWFla
				IAfZAAIAGQALABoAC2Fjc3BBUFBMAAAAAGFwcGwAAAAA
				AAAAAAAAAAAAAAAAAAD21gABAAAAANMtYXBwbAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAC2Rlc2MAAAEIAAAAb2RzY20AAAF4AAAF
				nGNwcnQAAAcUAAAAOHd0cHQAAAdMAAAAFHJYWVoAAAdg
				AAAAFGdYWVoAAAd0AAAAFGJYWVoAAAeIAAAAFHJUUkMA
				AAecAAAADmNoYWQAAAesAAAALGJUUkMAAAecAAAADmdU
				UkMAAAecAAAADmRlc2MAAAAAAAAAFEdlbmVyaWMgUkdC
				IFByb2ZpbGUAAAAAAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtbHVjAAAAAAAA
				AB8AAAAMc2tTSwAAACgAAAGEZGFESwAAAC4AAAGsY2FF
				UwAAACQAAAHadmlWTgAAACQAAAH+cHRCUgAAACYAAAIi
				dWtVQQAAACoAAAJIZnJGVQAAACgAAAJyaHVIVQAAACgA
				AAKaemhUVwAAABYAAALCbmJOTwAAACYAAALYY3NDWgAA
				ACIAAAL+aGVJTAAAAB4AAAMgaXRJVAAAACgAAAM+cm9S
				TwAAACQAAANmZGVERQAAACwAAAOKa29LUgAAABYAAAO2
				c3ZTRQAAACYAAALYemhDTgAAABYAAAPMamFKUAAAABoA
				AAPiZWxHUgAAACIAAAP8cHRQTwAAACYAAAQebmxOTAAA
				ACgAAAREZXNFUwAAACYAAAQedGhUSAAAACQAAARsdHJU
				UgAAACIAAASQZmlGSQAAACgAAASyaHJIUgAAACgAAATa
				cGxQTAAAACwAAAUCcnVSVQAAACIAAAUuYXJFRwAAACYA
				AAVQZW5VUwAAACYAAAV2AFYBYQBlAG8AYgBlAGMAbgD9
				ACAAUgBHAEIAIABwAHIAbwBmAGkAbABHAGUAbgBlAHIA
				ZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABz
				AGUAUABlAHIAZgBpAGwAIABSAEcAQgAgAGcAZQBuAOgA
				cgBpAGMAQx6lAHUAIABoAOwAbgBoACAAUgBHAEIAIABD
				AGgAdQBuAGcAUABlAHIAZgBpAGwAIABSAEcAQgAgAEcA
				ZQBuAOkAcgBpAGMAbwQXBDAEMwQwBDsETAQ9BDgEOQAg
				BD8EQAQ+BEQEMAQ5BDsAIABSAEcAQgBQAHIAbwBmAGkA
				bAAgAGcA6QBuAOkAcgBpAHEAdQBlACAAUgBWAEIAwQBs
				AHQAYQBsAOEAbgBvAHMAIABSAEcAQgAgAHAAcgBvAGYA
				aQBskBp1KAAgAFIARwBCACCCcl9pY8+P8ABHAGUAbgBl
				AHIAaQBzAGsAIABSAEcAQgAtAHAAcgBvAGYAaQBsAE8A
				YgBlAGMAbgD9ACAAUgBHAEIAIABwAHIAbwBmAGkAbAXk
				BegF1QXkBdkF3AAgAFIARwBCACAF2wXcBdwF2QBQAHIA
				bwBmAGkAbABvACAAUgBHAEIAIABnAGUAbgBlAHIAaQBj
				AG8AUAByAG8AZgBpAGwAIABSAEcAQgAgAGcAZQBuAGUA
				cgBpAGMAQQBsAGwAZwBlAG0AZQBpAG4AZQBzACAAUgBH
				AEIALQBQAHIAbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4
				XNMMx3xmbpAaACAAUgBHAEIAIGPPj/Blh072TgCCLAAg
				AFIARwBCACAw1zDtMNUwoTCkMOsDkwO1A70DuQO6A8wA
				IAPAA8EDvwPGA68DuwAgAFIARwBCAFAAZQByAGYAaQBs
				ACAAUgBHAEIAIABnAGUAbgDpAHIAaQBjAG8AQQBsAGcA
				ZQBtAGUAZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAZQBs
				DkIOGw4jDkQOHw4lDkwAIABSAEcAQgAgDhcOMQ5IDicO
				RA4bAEcAZQBuAGUAbAAgAFIARwBCACAAUAByAG8AZgBp
				AGwAaQBZAGwAZQBpAG4AZQBuACAAUgBHAEIALQBwAHIA
				bwBmAGkAaQBsAGkARwBlAG4AZQByAGkBDQBrAGkAIABS
				AEcAQgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMA
				YQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQx
				BEkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUG
				RAZBACAGKgY5BjEGSgZBACAAUgBHAEIAIAYnBkQGOQYn
				BkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8A
				ZgBpAGwAZXRleHQAAAAAQ29weXJpZ2h0IDIwMDcgQXBw
				bGUgSW5jLiwgYWxsIHJpZ2h0cyByZXNlcnZlZC4AWFla
				IAAAAAAAAPNSAAEAAAABFs9YWVogAAAAAAAAdE0AAD3u
				AAAD0FhZWiAAAAAAAABadQAArHMAABc0WFlaIAAAAAAA
				ACgaAAAVnwAAuDZjdXJ2AAAAAAAAAAEBzQAAc2YzMgAA
				AAAAAQxCAAAF3v//8yYAAAeSAAD9kf//+6L///2jAAAD
				3AAAwGyAACBQOCQISwcUGmFG8lw0ohaIBeCxOKRWLReM
				RmKuqOOlax9XpeRJFtyVsRkBSkBGaWG88y89hWZBN9TU
				AP+cRqdTueT2BAGgAADUMAOujO1D0lCpqmJF/U9/QSFG
				k4o2rI6oAB91ufV2vV+dgWxACVAA52c5SJLo+DiUULu4
				MYKXMI1t92C8Xm9RSxAUAOzAO8i4MdVZGpmpmZ84u943
				HY4D5EAWpNNfLOgM5kLzh/4+LAO/ADJZ2dAGcgB7vXPR
				igAEAOfYOl37PSauKgQBgB+txrAACshigAAgKdggD7ol
				FeBAQCbaNbN37XnQQAgoGAB6ptFAAImxBb6dgEJ8d6NJ
				qTcFg6BafpwXodL28IFAsAPZPpAABA0H3fcSLqim4POu
				exjme9D1Ju+D4ve+LqPm+r7vy/b+oxAB/wE+sCwO9cFP
				bBkGp/B77Pw/T+AK/yLQtDECQMf70w5ECBw/EDqvpEcJ
				RNFCKxVAcNRdBD2RBGcGxrCESQnE8KvXFcfRfBMYoFIb
				4yLG8Swo/8lx7FsnSDBspPbKkIytJMsQDLUNyfKEvunM
				MjxzJUzQzLcgQ66c1rAAoDJ+10HASAB6E6/AJDIPErxS
				9YPga+pmN7F1FTSgh/H4gR+H6x87tKgR+n04RjF44SUp
				+/wEz8fRalcAAGkaUwAAHHSKQsDIEAAfBIEYm4HgjTUA
				H0u5/gyDabhQGL1wAvFMJ2f7cN0PI0VSShW1aBT/AFPh
				+tIfNjK6A7/AHPh6Kif4Ouue5Ok2AB/BwI1NU4vNkPC1
				x+uZdA5jCAAHkyWSyIrV6fW09YLgU1BOkvdAiCigR7nt
				S7aMfUJ/gG5p+jlewHk0WNQMbC2AtQThLXQIop4S1TbX
				esGHgG3IBDkMAAAUTRZuEgl+0Om4Kz8fBNEm5DlPrkkP
				Ya+NQ1a3IBjjloEE3mLhzgf4KVmfBMPwfomC1hOFzVoM
				Y6HaoAAIOAvgABBOlsgUUQsCTjnwS1bn6KGwtRrEoRlr
				W5rJV4DDiLyhE8XCbglPR8Em7Z+imMWr7simTQbodJNE
				OwzAAfgaBw3QvjdxHEosyxrswzTOc1PbltCfzSH6u/Qo
				G1rXtiwzEIUxTGdT2adsi47KLat64rmCi6q52ngIGvq/
				sCwYih0qSFKqq6srt4PE+GsqzjmtKREfmaVJYMyXJgmQ
				Kpom3QeevXVqHPSjHWpClKYTSnKyjHcqmhiHIgCyJfGv
				COHUjyQLUkhJiKkBAAARAQAAAwAAAAEAIAAAAQEAAwAA
				AAEAIAAAAQIAAwAAAAQAABoCAQMAAwAAAAEABQAAAQYA
				AwAAAAEAAgAAAQoAAwAAAAEAAQAAAREABAAAAAEAABWM
				ARIAAwAAAAEAAQAAARUAAwAAAAEABAAAARYAAwAAAAEA
				IAAAARcABAAAAAEAAAOjARwAAwAAAAEAAQAAASgAAwAA
				AAEAAgAAAT0AAwAAAAEAAgAAAVIAAwAAAAEAAQAAAVMA
				AwAAAAQAABoKh3MABwAAB9gAABoSAAAjuAAIAAgACAAI
				AAEAAQABAAEAAAfYYXBwbAIgAABtbnRyUkdCIFhZWiAH
				2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAA
				AAAAAAAAAAAAAAAA9tYAAQAAAADTLWFwcGwAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABZxj
				cHJ0AAAHFAAAADh3dHB0AAAHTAAAABRyWFlaAAAHYAAA
				ABRnWFlaAAAHdAAAABRiWFlaAAAHiAAAABRyVFJDAAAH
				nAAAAA5jaGFkAAAHrAAAACxiVFJDAAAHnAAAAA5nVFJD
				AAAHnAAAAA5kZXNjAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJv
				ZmlsZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAf
				AAAADHNrU0sAAAAoAAABhGRhREsAAAAuAAABrGNhRVMA
				AAAkAAAB2nZpVk4AAAAkAAAB/nB0QlIAAAAmAAACInVr
				VUEAAAAqAAACSGZyRlUAAAAoAAACcmh1SFUAAAAoAAAC
				mnpoVFcAAAAWAAACwm5iTk8AAAAmAAAC2GNzQ1oAAAAi
				AAAC/mhlSUwAAAAeAAADIGl0SVQAAAAoAAADPnJvUk8A
				AAAkAAADZmRlREUAAAAsAAADimtvS1IAAAAWAAADtnN2
				U0UAAAAmAAAC2HpoQ04AAAAWAAADzGphSlAAAAAaAAAD
				4mVsR1IAAAAiAAAD/HB0UE8AAAAmAAAEHm5sTkwAAAAo
				AAAERGVzRVMAAAAmAAAEHnRoVEgAAAAkAAAEbHRyVFIA
				AAAiAAAEkGZpRkkAAAAoAAAEsmhySFIAAAAoAAAE2nBs
				UEwAAAAsAAAFAnJ1UlUAAAAiAAAFLmFyRUcAAAAmAAAF
				UGVuVVMAAAAmAAAFdgBWAWEAZQBvAGIAZQBjAG4A/QAg
				AFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGUA
				bAAgAFIARwBCAC0AYgBlAHMAawByAGkAdgBlAGwAcwBl
				AFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIA
				aQBjAEMepQB1ACAAaADsAG4AaAAgAFIARwBCACAAQwBo
				AHUAbgBnAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUA
				bgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQQ4BDkAIAQ/
				BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwA
				IABnAOkAbgDpAHIAaQBxAHUAZQAgAFIAVgBCAMEAbAB0
				AGEAbADhAG4AbwBzACAAUgBHAEIAIABwAHIAbwBmAGkA
				bJAadSgAIABSAEcAQgAggnJfaWPPj/AARwBlAG4AZQBy
				AGkAcwBrACAAUgBHAEIALQBwAHIAbwBmAGkAbABPAGIA
				ZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwF5AXo
				BdUF5AXZBdwAIABSAEcAQgAgBdsF3AXcBdkAUAByAG8A
				ZgBpAGwAbwAgAFIARwBCACAAZwBlAG4AZQByAGkAYwBv
				AFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIA
				aQBjAEEAbABsAGcAZQBtAGUAaQBuAGUAcwAgAFIARwBC
				AC0AUAByAG8AZgBpAGzHfLwYACAAUgBHAEIAINUEuFzT
				DMd8Zm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABS
				AEcAQgAgMNcw7TDVMKEwpDDrA5MDtQO9A7kDugPMACAD
				wAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAg
				AFIARwBCACAAZwBlAG4A6QByAGkAYwBvAEEAbABnAGUA
				bQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUAbA5C
				DhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQO
				GwBHAGUAbgBlAGwAIABSAEcAQgAgAFAAcgBvAGYAaQBs
				AGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8A
				ZgBpAGkAbABpAEcAZQBuAGUAcgBpAQ0AawBpACAAUgBH
				AEIAIABwAHIAbwBmAGkAbABVAG4AaQB3AGUAcgBzAGEA
				bABuAHkAIABwAHIAbwBmAGkAbAAgAFIARwBCBB4EMQRJ
				BDgEOQAgBD8EQAQ+BEQEOAQ7BEwAIABSAEcAQgZFBkQG
				QQAgBioGOQYxBkoGQQAgAFIARwBCACAGJwZEBjkGJwZF
				AEcAZQBuAGUAcgBpAGMAIABSAEcAQgAgAFAAcgBvAGYA
				aQBsAGV0ZXh0AAAAAENvcHlyaWdodCAyMDA3IEFwcGxl
				IEluYy4sIGFsbCByaWdodHMgcmVzZXJ2ZWQuAFhZWiAA
				AAAAAADzUgABAAAAARbPWFlaIAAAAAAAAHRNAAA97gAA
				A9BYWVogAAAAAAAAWnUAAKxzAAAXNFhZWiAAAAAAAAAo
				GgAAFZ8AALg2Y3VydgAAAAAAAAABAc0AAHNmMzIAAAAA
				AAEMQgAABd7///MmAAAHkgAA/ZH///ui///9owAAA9wA
				AMBsgAAgQAD0FESOhCUIsLJL+h0DiERiUTiACiwAXcZW
				5yjhscUfbwgkQjVklWYtlApe0riktl0uBUxADTmjXKk3
				JqrnS4J09I8re0vgYGA4Af4FAsRAL6fMCfb7oQAmIKAC
				yqy5eNZf8Of1RAADpL+V6kAAHZbLgQBgT9JRNAD+HxFg
				T6fVRiwCADvvT/r0Cf4Jqj/MZRAAOUq9iL5QpuAD7OqG
				gT1el9gV6d98vt/wJpK+FT63xKJOmNOKAyOTymWzFezV
				Gzme0EQfOi0mmAGSyl5vdRsFGBgLoxlKeFTq1xKNO+NO
				SBgT0ecCfj9qOqqLXZ4AANqgSK5gLV7IiL6OJYAD8Kpe
				owIBlGEQnv2riXUigGA1vTyTAALPSFr71qC/Ikfy1H8D
				4HAAfBMEwt4eiOpy6oo+SXNaAJKEO/I6EU7AAOkiB/gq
				qh8E0SkNiSKqBHuerpt2oTsoEwCvkoyAEjmRKjAkop8E
				2SUNiYLKBHs1C+qyeKtoeqMWgABCigISsan+DAMw2Kgw
				x/FLKLuACdFWnifKA3IAKIgbMLo3Kpqqq6RBAkiTJQFq
				VJZL8vzMmhppsnCIIKDyDoShYiobI04opLCMl2jaOo+c
				RvICABEBAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgAD
				AAAABAAAJIoBAwADAAAAAQAFAAABBgADAAAAAQACAAAB
				CgADAAAAAQABAAABEQAEAAAAAQAAIeoBEgADAAAAAQAB
				AAABFQADAAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAA
				AQAAAc4BHAADAAAAAQABAAABKAADAAAAAQACAAABPQAD
				AAAAAQACAAABUgADAAAAAQABAAABUwADAAAABAAAJJKH
				cwAHAAAH2AAAJJoAAAAAAAgACAAIAAgAAQABAAEAAQAA
				B9hhcHBsAiAAAG1udHJSR0IgWFlaIAfZAAIAGQALABoA
				C2Fjc3BBUFBMAAAAAGFwcGwAAAAAAAAAAAAAAAAAAAAA
				AAD21gABAAAAANMtYXBwbAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2Rl
				c2MAAAEIAAAAb2RzY20AAAF4AAAFnGNwcnQAAAcUAAAA
				OHd0cHQAAAdMAAAAFHJYWVoAAAdgAAAAFGdYWVoAAAd0
				AAAAFGJYWVoAAAeIAAAAFHJUUkMAAAecAAAADmNoYWQA
				AAesAAAALGJUUkMAAAecAAAADmdUUkMAAAecAAAADmRl
				c2MAAAAAAAAAFEdlbmVyaWMgUkdCIFByb2ZpbGUAAAAA
				AAAAAAAAABRHZW5lcmljIFJHQiBQcm9maWxlAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAABtbHVjAAAAAAAAAB8AAAAMc2tTSwAA
				ACgAAAGEZGFESwAAAC4AAAGsY2FFUwAAACQAAAHadmlW
				TgAAACQAAAH+cHRCUgAAACYAAAIidWtVQQAAACoAAAJI
				ZnJGVQAAACgAAAJyaHVIVQAAACgAAAKaemhUVwAAABYA
				AALCbmJOTwAAACYAAALYY3NDWgAAACIAAAL+aGVJTAAA
				AB4AAAMgaXRJVAAAACgAAAM+cm9STwAAACQAAANmZGVE
				RQAAACwAAAOKa29LUgAAABYAAAO2c3ZTRQAAACYAAALY
				emhDTgAAABYAAAPMamFKUAAAABoAAAPiZWxHUgAAACIA
				AAP8cHRQTwAAACYAAAQebmxOTAAAACgAAAREZXNFUwAA
				ACYAAAQedGhUSAAAACQAAARsdHJUUgAAACIAAASQZmlG
				SQAAACgAAASyaHJIUgAAACgAAATacGxQTAAAACwAAAUC
				cnVSVQAAACIAAAUuYXJFRwAAACYAAAVQZW5VUwAAACYA
				AAV2AFYBYQBlAG8AYgBlAGMAbgD9ACAAUgBHAEIAIABw
				AHIAbwBmAGkAbABHAGUAbgBlAHIAZQBsACAAUgBHAEIA
				LQBiAGUAcwBrAHIAaQB2AGUAbABzAGUAUABlAHIAZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAOgAcgBpAGMAQx6lAHUA
				IABoAOwAbgBoACAAUgBHAEIAIABDAGgAdQBuAGcAUABl
				AHIAZgBpAGwAIABSAEcAQgAgAEcAZQBuAOkAcgBpAGMA
				bwQXBDAEMwQwBDsETAQ9BDgEOQAgBD8EQAQ+BEQEMAQ5
				BDsAIABSAEcAQgBQAHIAbwBmAGkAbAAgAGcA6QBuAOkA
				cgBpAHEAdQBlACAAUgBWAEIAwQBsAHQAYQBsAOEAbgBv
				AHMAIABSAEcAQgAgAHAAcgBvAGYAaQBskBp1KAAgAFIA
				RwBCACCCcl9pY8+P8ABHAGUAbgBlAHIAaQBzAGsAIABS
				AEcAQgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgD9ACAA
				UgBHAEIAIABwAHIAbwBmAGkAbAXkBegF1QXkBdkF3AAg
				AFIARwBCACAF2wXcBdwF2QBQAHIAbwBmAGkAbABvACAA
				UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8AUAByAG8AZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAGUAcgBpAGMAQQBsAGwA
				ZwBlAG0AZQBpAG4AZQBzACAAUgBHAEIALQBQAHIAbwBm
				AGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3xmbpAaACAA
				UgBHAEIAIGPPj/Blh072TgCCLAAgAFIARwBCACAw1zDt
				MNUwoTCkMOsDkwO1A70DuQO6A8wAIAPAA8EDvwPGA68D
				uwAgAFIARwBCAFAAZQByAGYAaQBsACAAUgBHAEIAIABn
				AGUAbgDpAHIAaQBjAG8AQQBsAGcAZQBtAGUAZQBuACAA
				UgBHAEIALQBwAHIAbwBmAGkAZQBsDkIOGw4jDkQOHw4l
				DkwAIABSAEcAQgAgDhcOMQ5IDicORA4bAEcAZQBuAGUA
				bAAgAFIARwBCACAAUAByAG8AZgBpAGwAaQBZAGwAZQBp
				AG4AZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAaQBsAGkA
				RwBlAG4AZQByAGkBDQBrAGkAIABSAEcAQgAgAHAAcgBv
				AGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAA
				cgBvAGYAaQBsACAAUgBHAEIEHgQxBEkEOAQ5ACAEPwRA
				BD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEG
				SgZBACAAUgBHAEIAIAYnBkQGOQYnBkUARwBlAG4AZQBy
				AGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZXRleHQA
				AAAAQ29weXJpZ2h0IDIwMDcgQXBwbGUgSW5jLiwgYWxs
				IHJpZ2h0cyByZXNlcnZlZC4AWFlaIAAAAAAAAPNSAAEA
				AAABFs9YWVogAAAAAAAAdE0AAD3uAAAD0FhZWiAAAAAA
				AABadQAArHMAABc0WFlaIAAAAAAAACgaAAAVnwAAuDZj
				dXJ2AAAAAAAAAAEBzQAAc2YzMgAAAAAAAQxCAAAF3v//
				8yYAAAeSAAD9kf//+6L///2jAAAD3AAAwGw=
				</data>
				<key>ModificationDate</key>
				<real>630949491.00249004</real>
				<key>Name</key>
				<string>Menu of MD links in TaskPaper front document</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>D0B67137-14A5-4328-83B2-8385168B4F18</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>net.shinyfrog.bear</string>
							<key>Name</key>
							<string>Bear</string>
							<key>NewFile</key>
							<string>/Applications/Bear.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Note</string>
							<string>Copy Link To Note</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>net.shinyfrog.bear</string>
							<key>Name</key>
							<string>Bear</string>
							<key>NewFile</key>
							<string>/Applications/Bear.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Note</string>
							<string>Copy Link To Note</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>net.shinyfrog.bear</string>
							<key>Name</key>
							<string>Bear</string>
							<key>NewFile</key>
							<string>/Applications/Bear.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Rob Trew @2020
    // Copy Bear selection as MD Link.

    const main = () =&gt;
        either(
            alert('Copy as MD Link')
        )(
            copyText
        )(
            mdLinkFromClipTypes(
                'net.shinyfrog.bear.url-name'
            )(
                'public.utf8-plain-text'
            )
        );

    // ---------- LINK PARTS FROM CLIPBOARD TYPES ----------

    // mdLinkFromClipTypes UTI String -&gt; 
    // UTI String -&gt; Either String MDLink
    const mdLinkFromClipTypes = nameUTI =&gt;
        urlUTI =&gt; bindLR(
            clipOfTypeLR(nameUTI)
        )(name =&gt; bindLR(
            clipOfTypeLR(urlUTI)
        )(url =&gt; Right(`[${name}](${url})`)));


    // ------------- JAVASCRIPT FOR AUTOMATION -------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        // ObjC.import('AppKit');
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        // ObjC.import('AppKit');
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>622068180.07188797</real>
				<key>ModificationDate</key>
				<real>628954845.17146504</real>
				<key>Name</key>
				<string>net.shinyfrog.bear</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>9881DA35-C336-4D54-B559-0BF9EF7E9EB2</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC78BQAAKwAAAAEA
						AAD0BQAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bFxmMFxmc3dpc3NcZmNoYXJzZXQw
						IEhlbHZldGljYTtcZjFcZm5pbFxm
						Y2hhcnNldDAgTWVubG8tUmVndWxh
						cjtcZjJcZnN3aXNzXGZjaGFyc2V0
						MCBIZWx2ZXRpY2EtT2JsaXF1ZTsK
						fQp7XGNvbG9ydGJsO1xyZWQyNTVc
						Z3JlZW4yNTVcYmx1ZTI1NTtccmVk
						MFxncmVlbjBcYmx1ZTA7fQp7XCpc
						ZXhwYW5kZWRjb2xvcnRibDs7XGNz
						c3JnYlxjMFxjMFxjMFxjODQ3MDZc
						Y25hbWUgY29udHJvbFRleHRDb2xv
						cjt9ClxwYXJkXHR4NTYwXHR4MTEy
						MFx0eDE2ODBcdHgyMjQwXHR4Mjgw
						MFx0eDMzNjBcdHgzOTIwXHR4NDQ4
						MFx0eDUwNDBcdHg1NjAwXHR4NjE2
						MFx0eDY3MjBccGFyZGlybmF0dXJh
						bFxwYXJ0aWdodGVuZmFjdG9yMAoK
						XGYwXGZzMzBcZnNtaWxsaTE1MzY0
						IFxjZjIgRm9yIGEgbWVudSBvZiBt
						YXJrZG93biBsaW5rcyBpbiB0aGUg
						ZnJvbnQgZG9jdW1lbnQgaW4gVGFz
						a1BhcGVyIDMsIGVkaXQgOlwKXHBh
						cmRcdHg1NjBcdHgxMTIwXHR4MTY4
						MFx0eDIyNDBcdHgyODAwXHR4MzM2
						MFx0eDM5MjBcdHg0NDgwXHR4NTA0
						MFx0eDU2MDBcdHg2MTYwXHR4Njcy
						MFxwYXJkaXJuYXR1cmFsXHBhcnRp
						Z2h0ZW5mYWN0b3IwCgpcZjFcZnMy
						NCBcY2YwIFwKICAgIGNvbnN0IHNo
						b3dMaW5rc0luVGFza1BhcGVyRnJv
						bnREb2MgPSBmYWxzZTtcClwKXHBh
						cmRcdHg1NjBcdHgxMTIwXHR4MTY4
						MFx0eDIyNDBcdHgyODAwXHR4MzM2
						MFx0eDM5MjBcdHg0NDgwXHR4NTA0
						MFx0eDU2MDBcdHg2MTYwXHR4Njcy
						MFxwYXJkaXJuYXR1cmFsXHBhcnRp
						Z2h0ZW5mYWN0b3IwCgpcZjBcZnMz
						MFxmc21pbGxpMTUzNjQgXGNmMiBu
						ZWFyIHRoZSB0b3Agb2YgdGhlIEph
						dmFTY3JpcHQgZm9yIEF1dG9tYXRp
						b24gc2NyaXB0IGJlbG93LCB0bzpc
						ClwKCQpcZjFcZnMyNCBcY2YwIGNv
						bnN0IHNob3dMaW5rc0luVGFza1Bh
						cGVyRnJvbnREb2MgPSB0cnVlO1wK
						ClxmMFxmczMwXGZzbWlsbGkxNTM2
						NCBcY2YyIFwKT3IsIG9yIGEgbWVu
						dSBvZiBsaW5rcyBrZXB0IGluIGEg
						cGFydGljdWxhciB0ZXh0IGZpbGUs
						IGluIFttYXJrZG93biBsaW5rXSh1
						cmwpIGZvcm1hdDpcClwKXHBhcmRc
						dHg1NjBcdHgxMTIwXHR4MTY4MFx0
						eDIyNDBcdHgyODAwXHR4MzM2MFx0
						eDM5MjBcdHg0NDgwXHR4NTA0MFx0
						eDU2MDBcdHg2MTYwXHR4NjcyMFxw
						YXJkaXJuYXR1cmFsXHBhcnRpZ2h0
						ZW5mYWN0b3IwCgpcZjFcZnMyNCBc
						Y2YwIC0KXGYwXGZzMzBcZnNtaWxs
						aTE1MzY0IFxjZjIgIGVkaXQgdGhl
						IHZhbHVlIG9mIApcZjFcZnMyNCBc
						Y2YwIHNob3dMaW5rc0luVGFza1Bh
						cGVyRnJvbnREb2MgClxmMFxmczMw
						XGZzbWlsbGkxNTM2NCBcY2YyIHRv
						IApcZjFcZnMyNCBcY2YwIGZhbHNl
						LCBcCi0gClxmMFxmczMwXGZzbWls
						bGkxNTM2NCBcY2YyIHNwZWNpZnkg
						YSBmaWxlIHBhdGggYXMgdGhlIHZh
						bHVlIG9mIHRoZSAKXGYyXGkgbGlu
						a0xpc3RGaWxlUGF0aCAKXGYwXGkw
						ICB2YXJpYWJsZSBiZWxvdy59AQAA
						ACMAAAABAAAABwAAAFRYVC5ydGYQ
						AAAA+ZNGX7YBAAAAAAAAAAAAAA==
						</data>
						<key>Title</key>
						<string>A menu of links EITHER in a specified text file, OR in the front document in TaskPaper</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>SPECIFY HERE THE FILE PATH A TEXT FILE containing MD links of the pattern [label](url)</string>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>~/projects/activeProjects.taskpaper</string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // Menu of the labels of any links 
    // (assumed to be in MD format) in the front
    // TaskPaper document, or in a file at the filePath 
    // specified by a Keyboard Maestro variable.

    // If one or more labels are chosen in the menu,
    // the corresponding links are opened.


    // --------------------- SETTINGS ----------------------

    // EITHER a menu of links in the TP3 front document,
    const showLinksInTaskPaperFrontDoc = false;

    // OR a menu of links in a file at a given path,
    // specified by a Keyboard Maestro variable.

    // e.g: '~/projects/activeProjects.taskpaper'
    const filePathKMVarName = 'linkListFilePath';


    // --------------------- MENU CODE ---------------------
    // main :: IO ()
    const main = () =&gt; {
        return either(
            msg =&gt; msg.startsWith('User cancelled') ? (
                msg
            ) : alert('Link menu')(msg)
        )(openLinks)(
            bindLR(
                showLinksInTaskPaperFrontDoc ? (
                    taskPaperFrontDocFilePathLR()
                ) : filePathFromKMVariableLR(
                    filePathKMVarName
                )
            )(fp =&gt; {
                const menuKVs = mdLinkValuesInFile(fp);
                return 0 &lt; menuKVs.length ? (
                    bindLR(
                        showMenuLR(true)('Links')(
                            menuKVs.map(x =&gt; x.label)
                        )
                    )(compose(
                        Right,
                        menuChoiceValues(
                            menuKVs
                        )('label')('link')
                    ))
                ) : Left('No links found in document.');
            })
        );
    };


    // ------------ FRONT DOCUMENT IN TASKPAPER ------------

    // taskPaperFrontDocFilePathLR :: Either String FilePath
    const taskPaperFrontDocFilePathLR = () =&gt; {
        const
            tp = Application('TaskPaper'),
            ds = tp.documents;
        return 0 &lt; ds.length ? (
            Right(ds.at(0).file().toString())
        ) : Left('No document found in TaskPaper');
    };


    // ---- FILEPATH GIVEN IN KEYBOARD MAESTRO VARIABLE ----
    const filePathFromKMVariableLR = kmVarName =&gt; {
        const
            fp = Application('Keyboard Maestro Engine')
            .getvariable(kmVarName);
        return Boolean(fp) ? (() =&gt; {
            const fpPath = filePath(fp);
            return doesFileExist(fpPath) ? (
                Right(fpPath)
            ) : Left('No file found at: ' + fpPath);
        })() : Left(
            'No value found for KM variable: "' + (
                kmVarName + '"'
            )
        );
    };


    // ----------- CHOICE OF LINKS IN GIVEN FILE -----------

    // mdLinkValuesInFile :: FilePath -&gt; 
    // [{label :: String, link :: String }]
    const mdLinkValuesInFile = fp =&gt;
        sortBy(comparing(x =&gt; x.label))(
            lines(readFile(fp)).flatMap(
                x =&gt; x.includes('](') ? (
                    parse(mdLinkParse())(strip(x))
                ) : []
            ).map(fst)
        );

    // openLinks :: [URL String] -&gt; IO [URL String]
    const openLinks = urls =&gt; {
        const
            sa = Object.assign(
                Application.currentApplication(), {
                    includeStandardAdditions: true
                });
        return urls.map(x =&gt; (
            sa.openLocation(x),
            x
        ));
    };

    // menuChoiceValues :: [Dict a] -&gt;
    // String -&gt; String -&gt; [String] -&gt; [a]
    const menuChoiceValues = menuKVs =&gt;
        // A map from a list of keys to a list of values,
        // given a list of dictionaries, 
        // with their label and value keys,
        // and some subset of label keys.
        labelKey =&gt; valueKey =&gt; ks =&gt; {
            const
                dct = menuKVs.reduce(
                    (a, x) =&gt; Object.assign(
                        a, {
                            [x[labelKey]]: x[valueKey]
                        }
                    ), {}
                );
            return ks.flatMap(k =&gt; {
                const v = dct[k];
                return void 0 !== v ? (
                    [v]
                ) : [];
            });
        };

    // ------------------- PARSING LINKS -------------------

    // mdLinkParse :: () -&gt; 
    // Parser {title :: String, link :: String}
    const mdLinkParse = () =&gt;
        bindP(
            char('[')
        )(_ =&gt; bindP(
            many(noneOf(']'))
        )(title =&gt; bindP(
            string('](')
        )(_ =&gt; bindP(
            many(noneOf(')'))
        )(link =&gt; pureP({
            label: title.join(''),
            link: link.join('')
        })))));

    // ------------ GENERIC PARSER COMBINATORS -------------

    // Parser :: String -&gt; [(a, String)] -&gt; Parser a
    const Parser = f =&gt;
        // A function lifted into a Parser object.
        ({
            type: 'Parser',
            parser: f
        });


    // altP (&lt;|&gt;) :: Parser a -&gt; Parser a -&gt; Parser a
    const altP = p =&gt;
        // p, or q if p doesn't match.
        q =&gt; Parser(s =&gt; {
            const xs = parse(p)(s);
            return 0 &lt; xs.length ? (
                xs
            ) : parse(q)(s);
        });


    // apP &lt;*&gt; :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const apP = pf =&gt;
        // A new parser obtained by the application 
        // of a Parser-wrapped function,
        // to a Parser-wrapped value.
        p =&gt; Parser(
            s =&gt; parse(pf)(s).flatMap(
                vr =&gt; parse(
                    fmapP(vr[0])(p)
                )(vr[1])
            )
        );


    // bindP (&gt;&gt;=) :: Parser a -&gt; 
    // (a -&gt; Parser b) -&gt; Parser b
    const bindP = p =&gt;
        // A new parser obtained by the application of 
        // a function to a Parser-wrapped value.
        // The function must enrich its output, lifting it 
        // into a new Parser.
        // Allows for the nesting of parsers.
        f =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                tpl =&gt; parse(f(tpl[0]))(tpl[1])
            )
        );


    // char :: Char -&gt; Parser Char
    const char = x =&gt;
        // A particular single character.
        satisfy(c =&gt; x == c);


    // fmapP :: (a -&gt; b) -&gt; Parser a -&gt; Parser b  
    const fmapP = f =&gt;
        // A new parser derived by the structure-preserving 
        // application of f to the value in p.
        p =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                vr =&gt; Tuple(f(vr[0]))(vr[1])
            )
        );


    // liftA2P :: (a -&gt; b -&gt; c) -&gt; 
    // Parser a -&gt; Parser b -&gt; Parser c
    const liftA2P = op =&gt;
        // The binary function op, lifted
        // to a function over two parsers.
        p =&gt; apP(fmapP(op)(p));


    // many :: Parser a -&gt; Parser [a]
    const many = p =&gt; {
        // Zero or more instances of p.
        // Lifts a parser for a simple type of value 
        // to a parser for a list of such values.
        const some_p = p =&gt;
            liftA2P(
                x =&gt; xs =&gt; [x].concat(xs)
            )(p)(many(p));
        return Parser(
            s =&gt; parse(
                0 &lt; s.length ? (
                    altP(some_p(p))(pureP([]))
                ) : pureP([])
            )(s)
        );
    };

    // noneOf :: String -&gt; Parser Char
    const noneOf = s =&gt;
        // Any character not found in the
        // exclusion string.
        satisfy(c =&gt; !s.includes(c));


    // parse :: Parser a -&gt; String -&gt; [(a, String)]
    const parse = p =&gt;
        // The result of parsing s with p.
        s =&gt; {
            // showLog('s', s)
            return p.parser([...s]);
        };


    // pureP :: a -&gt; Parser a
    const pureP = x =&gt;
        // The value x lifted, unchanged, 
        // into the Parser monad.
        Parser(s =&gt; [Tuple(x)(s)]);


    // satisfy :: (Char -&gt; Bool) -&gt; Parser Char
    const satisfy = test =&gt;
        // Any character for which the 
        // given predicate returns true.
        Parser(
            s =&gt; 0 &lt; s.length ? (
                test(s[0]) ? [
                    Tuple(s[0])(s.slice(1))
                ] : []
            ) : []
        );


    // sequenceP :: [Parser a] -&gt; Parser [a]
    const sequenceP = ps =&gt;
        // A single parser for a list of values, derived
        // from a list of parsers for single values.
        Parser(
            s =&gt; ps.reduce(
                (a, q) =&gt; a.flatMap(
                    vr =&gt; parse(q)(snd(vr)).flatMap(
                        first(xs =&gt; fst(vr).concat(xs))
                    )
                ),
                [Tuple([])(s)]
            )
        );


    // string :: String -&gt; Parser String
    const string = s =&gt;
        // A particular string.
        fmapP(cs =&gt; cs.join(''))(
            sequenceP([...s].map(char))
        );


    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK',
                    withIcon: sa.pathToResource('TaskPaper.icns', {
                        inBundle: 'Applications/TaskPaper.app'
                    })
                }),
                s
            );
        };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);
            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );

    // doesFileExist :: FilePath -&gt; IO Bool
    const doesFileExist = fp =&gt; {
        const ref = Ref();
        return $.NSFileManager.defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp)
                .stringByStandardizingPath, ref
            ) &amp;&amp; 1 !== ref[0];
    };

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // filePath :: String -&gt; FilePath
    const filePath = s =&gt;
        // The given file path with any tilde expanded
        // to the full user directory path.
        ObjC.unwrap(ObjC.wrap(s)
            .stringByStandardizingPath);


    // first :: (a -&gt; b) -&gt; ((a, c) -&gt; (b, c))
    const first = f =&gt;
        // A simple function lifted to one which applies
        // to a tuple, transforming only its first item.
        xy =&gt; Tuple(f(xy[0]))(
            xy[1]
        );


    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];


    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // newline-delimited string.
        0 &lt; s.length ? (
            s.split(/[\r\n]/)
        ) : [];


    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // readFile :: FilePath -&gt; IO String
    const readFile = fp =&gt; {
        // The contents of a text file at the
        // path file fp.
        const
            e = $(),
            ns = $.NSString
            .stringWithContentsOfFileEncodingError(
                $(fp).stringByStandardizingPath,
                $.NSUTF8StringEncoding,
                e
            );
        return ObjC.unwrap(
            ns.isNil() ? (
                e.localizedDescription
            ) : ns
        );
    };

    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        console.log(
            args
            .map(JSON.stringify)
            .join(' -&gt; ')
        );


    // showMenuLR :: Bool -&gt; String -&gt; [String] -&gt; 
    // Either String [String]
    const showMenuLR = blnMult =&gt;
        title =&gt; xs =&gt; 0 &lt; xs.length ? (() =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            sa.activate();
            const v = sa.chooseFromList(xs, {
                withTitle: title,
                withPrompt: 'Select' + (
                    blnMult ? (
                        ' one or more of ' +
                        xs.length.toString()
                    ) : ':'
                ),
                defaultItems: xs[0],
                okButtonName: 'OK',
                cancelButtonName: 'Cancel',
                multipleSelectionsAllowed: blnMult,
                emptySelectionAllowed: false
            });
            return Array.isArray(v) ? (
                Right(v)
            ) : Left('User cancelled ' + title + ' menu.');
        })() : Left(title + ': No items to choose from.');


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // strip :: String -&gt; String
    const strip = s =&gt;
        s.trim();

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Clear the linkListFilePath variable, in case similar macros use a different file.</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620152106.71959996</real>
				<key>CustomIconData</key>
				<data>
				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
				AAAAAQBAAAABAgADAAAABAAADaQBAwADAAAAAQAFAAAB
				BgADAAAAAQACAAABCgADAAAAAQABAAABEQAEAAAAAQAA
				AAgBEgADAAAAAQABAAABFQADAAAAAQAEAAABFgADAAAA
				AQBAAAABFwAEAAAAAQAADMkBHAADAAAAAQABAAABKAAD
				AAAAAQACAAABPQADAAAAAQACAAABUgADAAAAAQABAAAB
				UwADAAAABAAADayHcwAHAAAH2AAADbQAABkwAAgACAAI
				AAgAAQABAAEAAQAAB9hhcHBsAiAAAG1udHJSR0IgWFla
				IAfZAAIAGQALABoAC2Fjc3BBUFBMAAAAAGFwcGwAAAAA
				AAAAAAAAAAAAAAAAAAD21gABAAAAANMtYXBwbAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAC2Rlc2MAAAEIAAAAb2RzY20AAAF4AAAF
				nGNwcnQAAAcUAAAAOHd0cHQAAAdMAAAAFHJYWVoAAAdg
				AAAAFGdYWVoAAAd0AAAAFGJYWVoAAAeIAAAAFHJUUkMA
				AAecAAAADmNoYWQAAAesAAAALGJUUkMAAAecAAAADmdU
				UkMAAAecAAAADmRlc2MAAAAAAAAAFEdlbmVyaWMgUkdC
				IFByb2ZpbGUAAAAAAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtbHVjAAAAAAAA
				AB8AAAAMc2tTSwAAACgAAAGEZGFESwAAAC4AAAGsY2FF
				UwAAACQAAAHadmlWTgAAACQAAAH+cHRCUgAAACYAAAIi
				dWtVQQAAACoAAAJIZnJGVQAAACgAAAJyaHVIVQAAACgA
				AAKaemhUVwAAABYAAALCbmJOTwAAACYAAALYY3NDWgAA
				ACIAAAL+aGVJTAAAAB4AAAMgaXRJVAAAACgAAAM+cm9S
				TwAAACQAAANmZGVERQAAACwAAAOKa29LUgAAABYAAAO2
				c3ZTRQAAACYAAALYemhDTgAAABYAAAPMamFKUAAAABoA
				AAPiZWxHUgAAACIAAAP8cHRQTwAAACYAAAQebmxOTAAA
				ACgAAAREZXNFUwAAACYAAAQedGhUSAAAACQAAARsdHJU
				UgAAACIAAASQZmlGSQAAACgAAASyaHJIUgAAACgAAATa
				cGxQTAAAACwAAAUCcnVSVQAAACIAAAUuYXJFRwAAACYA
				AAVQZW5VUwAAACYAAAV2AFYBYQBlAG8AYgBlAGMAbgD9
				ACAAUgBHAEIAIABwAHIAbwBmAGkAbABHAGUAbgBlAHIA
				ZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABz
				AGUAUABlAHIAZgBpAGwAIABSAEcAQgAgAGcAZQBuAOgA
				cgBpAGMAQx6lAHUAIABoAOwAbgBoACAAUgBHAEIAIABD
				AGgAdQBuAGcAUABlAHIAZgBpAGwAIABSAEcAQgAgAEcA
				ZQBuAOkAcgBpAGMAbwQXBDAEMwQwBDsETAQ9BDgEOQAg
				BD8EQAQ+BEQEMAQ5BDsAIABSAEcAQgBQAHIAbwBmAGkA
				bAAgAGcA6QBuAOkAcgBpAHEAdQBlACAAUgBWAEIAwQBs
				AHQAYQBsAOEAbgBvAHMAIABSAEcAQgAgAHAAcgBvAGYA
				aQBskBp1KAAgAFIARwBCACCCcl9pY8+P8ABHAGUAbgBl
				AHIAaQBzAGsAIABSAEcAQgAtAHAAcgBvAGYAaQBsAE8A
				YgBlAGMAbgD9ACAAUgBHAEIAIABwAHIAbwBmAGkAbAXk
				BegF1QXkBdkF3AAgAFIARwBCACAF2wXcBdwF2QBQAHIA
				bwBmAGkAbABvACAAUgBHAEIAIABnAGUAbgBlAHIAaQBj
				AG8AUAByAG8AZgBpAGwAIABSAEcAQgAgAGcAZQBuAGUA
				cgBpAGMAQQBsAGwAZwBlAG0AZQBpAG4AZQBzACAAUgBH
				AEIALQBQAHIAbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4
				XNMMx3xmbpAaACAAUgBHAEIAIGPPj/Blh072TgCCLAAg
				AFIARwBCACAw1zDtMNUwoTCkMOsDkwO1A70DuQO6A8wA
				IAPAA8EDvwPGA68DuwAgAFIARwBCAFAAZQByAGYAaQBs
				ACAAUgBHAEIAIABnAGUAbgDpAHIAaQBjAG8AQQBsAGcA
				ZQBtAGUAZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAZQBs
				DkIOGw4jDkQOHw4lDkwAIABSAEcAQgAgDhcOMQ5IDicO
				RA4bAEcAZQBuAGUAbAAgAFIARwBCACAAUAByAG8AZgBp
				AGwAaQBZAGwAZQBpAG4AZQBuACAAUgBHAEIALQBwAHIA
				bwBmAGkAaQBsAGkARwBlAG4AZQByAGkBDQBrAGkAIABS
				AEcAQgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMA
				YQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQx
				BEkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUG
				RAZBACAGKgY5BjEGSgZBACAAUgBHAEIAIAYnBkQGOQYn
				BkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8A
				ZgBpAGwAZXRleHQAAAAAQ29weXJpZ2h0IDIwMDcgQXBw
				bGUgSW5jLiwgYWxsIHJpZ2h0cyByZXNlcnZlZC4AWFla
				IAAAAAAAAPNSAAEAAAABFs9YWVogAAAAAAAAdE0AAD3u
				AAAD0FhZWiAAAAAAAABadQAArHMAABc0WFlaIAAAAAAA
				ACgaAAAVnwAAuDZjdXJ2AAAAAAAAAAEBzQAAc2YzMgAA
				AAAAAQxCAAAF3v//8yYAAAeSAAD9kf//+6L///2jAAAD
				3AAAwGyAACBQOCQISwcUGmFG8lw0ohaIBeCxOKRWLReM
				RmKuqOOlax9XpeRJFtyVsRkBSkBGaWG88y89hWZBN9TU
				AP+cRqdTueT2BAGgAADUMAOujO1D0lCpqmJF/U9/QSFG
				k4o2rI6oAB91ufV2vV+dgWxACVAA52c5SJLo+DiUULu4
				MYKXMI1t92C8Xm9RSxAUAOzAO8i4MdVZGpmpmZ84u943
				HY4D5EAWpNNfLOgM5kLzh/4+LAO/ADJZ2dAGcgB7vXPR
				igAEAOfYOl37PSauKgQBgB+txrAACshigAAgKdggD7ol
				FeBAQCbaNbN37XnQQAgoGAB6ptFAAImxBb6dgEJ8d6NJ
				qTcFg6BafpwXodL28IFAsAPZPpAABA0H3fcSLqim4POu
				exjme9D1Ju+D4ve+LqPm+r7vy/b+oxAB/wE+sCwO9cFP
				bBkGp/B77Pw/T+AK/yLQtDECQMf70w5ECBw/EDqvpEcJ
				RNFCKxVAcNRdBD2RBGcGxrCESQnE8KvXFcfRfBMYoFIb
				4yLG8Swo/8lx7FsnSDBspPbKkIytJMsQDLUNyfKEvunM
				MjxzJUzQzLcgQ66c1rAAoDJ+10HASAB6E6/AJDIPErxS
				9YPga+pmN7F1FTSgh/H4gR+H6x87tKgR+n04RjF44SUp
				+/wEz8fRalcAAGkaUwAAHHSKQsDIEAAfBIEYm4HgjTUA
				H0u5/gyDabhQGL1wAvFMJ2f7cN0PI0VSShW1aBT/AFPh
				+tIfNjK6A7/AHPh6Kif4Ouue5Ok2AB/BwI1NU4vNkPC1
				x+uZdA5jCAAHkyWSyIrV6fW09YLgU1BOkvdAiCigR7nt
				S7aMfUJ/gG5p+jlewHk0WNQMbC2AtQThLXQIop4S1TbX
				esGHgG3IBDkMAAAUTRZuEgl+0Om4Kz8fBNEm5DlPrkkP
				Ya+NQ1a3IBjjloEE3mLhzgf4KVmfBMPwfomC1hOFzVoM
				Y6HaoAAIOAvgABBOlsgUUQsCTjnwS1bn6KGwtRrEoRlr
				W5rJV4DDiLyhE8XCbglPR8Em7Z+imMWr7simTQbodJNE
				OwzAAfgaBw3QvjdxHEosyxrswzTOc1PbltCfzSH6u/Qo
				G1rXtiwzEIUxTGdT2adsi47KLat64rmCi6q52ngIGvq/
				sCwYih0qSFKqq6srt4PE+GsqzjmtKREfmaVJYMyXJgmQ
				Kpom3QeevXVqHPSjHWpClKYTSnKyjHcqmhiHIgCyJfGv
				COHUjyQLUkhJiKkBAAARAQAAAwAAAAEAIAAAAQEAAwAA
				AAEAIAAAAQIAAwAAAAQAABoCAQMAAwAAAAEABQAAAQYA
				AwAAAAEAAgAAAQoAAwAAAAEAAQAAAREABAAAAAEAABWM
				ARIAAwAAAAEAAQAAARUAAwAAAAEABAAAARYAAwAAAAEA
				IAAAARcABAAAAAEAAAOjARwAAwAAAAEAAQAAASgAAwAA
				AAEAAgAAAT0AAwAAAAEAAgAAAVIAAwAAAAEAAQAAAVMA
				AwAAAAQAABoKh3MABwAAB9gAABoSAAAjuAAIAAgACAAI
				AAEAAQABAAEAAAfYYXBwbAIgAABtbnRyUkdCIFhZWiAH
				2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAA
				AAAAAAAAAAAAAAAA9tYAAQAAAADTLWFwcGwAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABZxj
				cHJ0AAAHFAAAADh3dHB0AAAHTAAAABRyWFlaAAAHYAAA
				ABRnWFlaAAAHdAAAABRiWFlaAAAHiAAAABRyVFJDAAAH
				nAAAAA5jaGFkAAAHrAAAACxiVFJDAAAHnAAAAA5nVFJD
				AAAHnAAAAA5kZXNjAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJv
				ZmlsZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAf
				AAAADHNrU0sAAAAoAAABhGRhREsAAAAuAAABrGNhRVMA
				AAAkAAAB2nZpVk4AAAAkAAAB/nB0QlIAAAAmAAACInVr
				VUEAAAAqAAACSGZyRlUAAAAoAAACcmh1SFUAAAAoAAAC
				mnpoVFcAAAAWAAACwm5iTk8AAAAmAAAC2GNzQ1oAAAAi
				AAAC/mhlSUwAAAAeAAADIGl0SVQAAAAoAAADPnJvUk8A
				AAAkAAADZmRlREUAAAAsAAADimtvS1IAAAAWAAADtnN2
				U0UAAAAmAAAC2HpoQ04AAAAWAAADzGphSlAAAAAaAAAD
				4mVsR1IAAAAiAAAD/HB0UE8AAAAmAAAEHm5sTkwAAAAo
				AAAERGVzRVMAAAAmAAAEHnRoVEgAAAAkAAAEbHRyVFIA
				AAAiAAAEkGZpRkkAAAAoAAAEsmhySFIAAAAoAAAE2nBs
				UEwAAAAsAAAFAnJ1UlUAAAAiAAAFLmFyRUcAAAAmAAAF
				UGVuVVMAAAAmAAAFdgBWAWEAZQBvAGIAZQBjAG4A/QAg
				AFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGUA
				bAAgAFIARwBCAC0AYgBlAHMAawByAGkAdgBlAGwAcwBl
				AFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIA
				aQBjAEMepQB1ACAAaADsAG4AaAAgAFIARwBCACAAQwBo
				AHUAbgBnAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUA
				bgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQQ4BDkAIAQ/
				BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwA
				IABnAOkAbgDpAHIAaQBxAHUAZQAgAFIAVgBCAMEAbAB0
				AGEAbADhAG4AbwBzACAAUgBHAEIAIABwAHIAbwBmAGkA
				bJAadSgAIABSAEcAQgAggnJfaWPPj/AARwBlAG4AZQBy
				AGkAcwBrACAAUgBHAEIALQBwAHIAbwBmAGkAbABPAGIA
				ZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwF5AXo
				BdUF5AXZBdwAIABSAEcAQgAgBdsF3AXcBdkAUAByAG8A
				ZgBpAGwAbwAgAFIARwBCACAAZwBlAG4AZQByAGkAYwBv
				AFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIA
				aQBjAEEAbABsAGcAZQBtAGUAaQBuAGUAcwAgAFIARwBC
				AC0AUAByAG8AZgBpAGzHfLwYACAAUgBHAEIAINUEuFzT
				DMd8Zm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABS
				AEcAQgAgMNcw7TDVMKEwpDDrA5MDtQO9A7kDugPMACAD
				wAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAg
				AFIARwBCACAAZwBlAG4A6QByAGkAYwBvAEEAbABnAGUA
				bQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUAbA5C
				DhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQO
				GwBHAGUAbgBlAGwAIABSAEcAQgAgAFAAcgBvAGYAaQBs
				AGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8A
				ZgBpAGkAbABpAEcAZQBuAGUAcgBpAQ0AawBpACAAUgBH
				AEIAIABwAHIAbwBmAGkAbABVAG4AaQB3AGUAcgBzAGEA
				bABuAHkAIABwAHIAbwBmAGkAbAAgAFIARwBCBB4EMQRJ
				BDgEOQAgBD8EQAQ+BEQEOAQ7BEwAIABSAEcAQgZFBkQG
				QQAgBioGOQYxBkoGQQAgAFIARwBCACAGJwZEBjkGJwZF
				AEcAZQBuAGUAcgBpAGMAIABSAEcAQgAgAFAAcgBvAGYA
				aQBsAGV0ZXh0AAAAAENvcHlyaWdodCAyMDA3IEFwcGxl
				IEluYy4sIGFsbCByaWdodHMgcmVzZXJ2ZWQuAFhZWiAA
				AAAAAADzUgABAAAAARbPWFlaIAAAAAAAAHRNAAA97gAA
				A9BYWVogAAAAAAAAWnUAAKxzAAAXNFhZWiAAAAAAAAAo
				GgAAFZ8AALg2Y3VydgAAAAAAAAABAc0AAHNmMzIAAAAA
				AAEMQgAABd7///MmAAAHkgAA/ZH///ui///9owAAA9wA
				AMBsgAAgQAD0FESOhCUIsLJL+h0DiERiUTiACiwAXcZW
				5yjhscUfbwgkQjVklWYtlApe0riktl0uBUxADTmjXKk3
				JqrnS4J09I8re0vgYGA4Af4FAsRAL6fMCfb7oQAmIKAC
				yqy5eNZf8Of1RAADpL+V6kAAHZbLgQBgT9JRNAD+HxFg
				T6fVRiwCADvvT/r0Cf4Jqj/MZRAAOUq9iL5QpuAD7OqG
				gT1el9gV6d98vt/wJpK+FT63xKJOmNOKAyOTymWzFezV
				Gzme0EQfOi0mmAGSyl5vdRsFGBgLoxlKeFTq1xKNO+NO
				SBgT0ecCfj9qOqqLXZ4AANqgSK5gLV7IiL6OJYAD8Kpe
				owIBlGEQnv2riXUigGA1vTyTAALPSFr71qC/Ikfy1H8D
				4HAAfBMEwt4eiOpy6oo+SXNaAJKEO/I6EU7AAOkiB/gq
				qh8E0SkNiSKqBHuerpt2oTsoEwCvkoyAEjmRKjAkop8E
				2SUNiYLKBHs1C+qyeKtoeqMWgABCigISsan+DAMw2Kgw
				x/FLKLuACdFWnifKA3IAKIgbMLo3Kpqqq6RBAkiTJQFq
				VJZL8vzMmhppsnCIIKDyDoShYiobI04opLCMl2jaOo+c
				RvICABEBAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgAD
				AAAABAAAJIoBAwADAAAAAQAFAAABBgADAAAAAQACAAAB
				CgADAAAAAQABAAABEQAEAAAAAQAAIeoBEgADAAAAAQAB
				AAABFQADAAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAA
				AQAAAc4BHAADAAAAAQABAAABKAADAAAAAQACAAABPQAD
				AAAAAQACAAABUgADAAAAAQABAAABUwADAAAABAAAJJKH
				cwAHAAAH2AAAJJoAAAAAAAgACAAIAAgAAQABAAEAAQAA
				B9hhcHBsAiAAAG1udHJSR0IgWFlaIAfZAAIAGQALABoA
				C2Fjc3BBUFBMAAAAAGFwcGwAAAAAAAAAAAAAAAAAAAAA
				AAD21gABAAAAANMtYXBwbAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2Rl
				c2MAAAEIAAAAb2RzY20AAAF4AAAFnGNwcnQAAAcUAAAA
				OHd0cHQAAAdMAAAAFHJYWVoAAAdgAAAAFGdYWVoAAAd0
				AAAAFGJYWVoAAAeIAAAAFHJUUkMAAAecAAAADmNoYWQA
				AAesAAAALGJUUkMAAAecAAAADmdUUkMAAAecAAAADmRl
				c2MAAAAAAAAAFEdlbmVyaWMgUkdCIFByb2ZpbGUAAAAA
				AAAAAAAAABRHZW5lcmljIFJHQiBQcm9maWxlAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAABtbHVjAAAAAAAAAB8AAAAMc2tTSwAA
				ACgAAAGEZGFESwAAAC4AAAGsY2FFUwAAACQAAAHadmlW
				TgAAACQAAAH+cHRCUgAAACYAAAIidWtVQQAAACoAAAJI
				ZnJGVQAAACgAAAJyaHVIVQAAACgAAAKaemhUVwAAABYA
				AALCbmJOTwAAACYAAALYY3NDWgAAACIAAAL+aGVJTAAA
				AB4AAAMgaXRJVAAAACgAAAM+cm9STwAAACQAAANmZGVE
				RQAAACwAAAOKa29LUgAAABYAAAO2c3ZTRQAAACYAAALY
				emhDTgAAABYAAAPMamFKUAAAABoAAAPiZWxHUgAAACIA
				AAP8cHRQTwAAACYAAAQebmxOTAAAACgAAAREZXNFUwAA
				ACYAAAQedGhUSAAAACQAAARsdHJUUgAAACIAAASQZmlG
				SQAAACgAAASyaHJIUgAAACgAAATacGxQTAAAACwAAAUC
				cnVSVQAAACIAAAUuYXJFRwAAACYAAAVQZW5VUwAAACYA
				AAV2AFYBYQBlAG8AYgBlAGMAbgD9ACAAUgBHAEIAIABw
				AHIAbwBmAGkAbABHAGUAbgBlAHIAZQBsACAAUgBHAEIA
				LQBiAGUAcwBrAHIAaQB2AGUAbABzAGUAUABlAHIAZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAOgAcgBpAGMAQx6lAHUA
				IABoAOwAbgBoACAAUgBHAEIAIABDAGgAdQBuAGcAUABl
				AHIAZgBpAGwAIABSAEcAQgAgAEcAZQBuAOkAcgBpAGMA
				bwQXBDAEMwQwBDsETAQ9BDgEOQAgBD8EQAQ+BEQEMAQ5
				BDsAIABSAEcAQgBQAHIAbwBmAGkAbAAgAGcA6QBuAOkA
				cgBpAHEAdQBlACAAUgBWAEIAwQBsAHQAYQBsAOEAbgBv
				AHMAIABSAEcAQgAgAHAAcgBvAGYAaQBskBp1KAAgAFIA
				RwBCACCCcl9pY8+P8ABHAGUAbgBlAHIAaQBzAGsAIABS
				AEcAQgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgD9ACAA
				UgBHAEIAIABwAHIAbwBmAGkAbAXkBegF1QXkBdkF3AAg
				AFIARwBCACAF2wXcBdwF2QBQAHIAbwBmAGkAbABvACAA
				UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8AUAByAG8AZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAGUAcgBpAGMAQQBsAGwA
				ZwBlAG0AZQBpAG4AZQBzACAAUgBHAEIALQBQAHIAbwBm
				AGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3xmbpAaACAA
				UgBHAEIAIGPPj/Blh072TgCCLAAgAFIARwBCACAw1zDt
				MNUwoTCkMOsDkwO1A70DuQO6A8wAIAPAA8EDvwPGA68D
				uwAgAFIARwBCAFAAZQByAGYAaQBsACAAUgBHAEIAIABn
				AGUAbgDpAHIAaQBjAG8AQQBsAGcAZQBtAGUAZQBuACAA
				UgBHAEIALQBwAHIAbwBmAGkAZQBsDkIOGw4jDkQOHw4l
				DkwAIABSAEcAQgAgDhcOMQ5IDicORA4bAEcAZQBuAGUA
				bAAgAFIARwBCACAAUAByAG8AZgBpAGwAaQBZAGwAZQBp
				AG4AZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAaQBsAGkA
				RwBlAG4AZQByAGkBDQBrAGkAIABSAEcAQgAgAHAAcgBv
				AGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAA
				cgBvAGYAaQBsACAAUgBHAEIEHgQxBEkEOAQ5ACAEPwRA
				BD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEG
				SgZBACAAUgBHAEIAIAYnBkQGOQYnBkUARwBlAG4AZQBy
				AGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZXRleHQA
				AAAAQ29weXJpZ2h0IDIwMDcgQXBwbGUgSW5jLiwgYWxs
				IHJpZ2h0cyByZXNlcnZlZC4AWFlaIAAAAAAAAPNSAAEA
				AAABFs9YWVogAAAAAAAAdE0AAD3uAAAD0FhZWiAAAAAA
				AABadQAArHMAABc0WFlaIAAAAAAAACgaAAAVnwAAuDZj
				dXJ2AAAAAAAAAAEBzQAAc2YzMgAAAAAAAQxCAAAF3v//
				8yYAAAeSAAD9kf//+6L///2jAAAD3AAAwGw=
				</data>
				<key>ModificationDate</key>
				<real>631057489.04129505</real>
				<key>Name</key>
				<string>Menu of MD links in File specified by path</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>D2B61FEA-85F4-47C2-BDCD-C516DE214B73</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>de.zettelkasten.TheArchive</string>
							<key>Name</key>
							<string>The Archive</string>
							<key>NewFile</key>
							<string>/Applications/The Archive.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy Link to Note</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>de.zettelkasten.TheArchive</string>
							<key>Name</key>
							<string>The Archive</string>
							<key>NewFile</key>
							<string>/Applications/The Archive.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>StartsWith</string>
									<key>ClipboardText</key>
									<string>[[</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>Any</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>Delete</key>
						<false/>
						<key>Destination</key>
						<string>Clipboard</string>
						<key>First</key>
						<string>3</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Substring</string>
						<key>Second</key>
						<string>-2</string>
						<key>Source</key>
						<string>Clipboard</string>
						<key>StringRangeType</key>
						<string>From</string>
					</dict>
					<dict>
						<key>Delete</key>
						<true/>
						<key>Destination</key>
						<string>Clipboard</string>
						<key>First</key>
						<string>2</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Substring</string>
						<key>Second</key>
						<string>-2</string>
						<key>Source</key>
						<string>Clipboard</string>
						<key>StringRangeType</key>
						<string>Last</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%SystemClipboard%](</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>PercentEncodeForURL</string>
						<key>Destination</key>
						<string>Clipboard</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Filter</string>
						<key>Source</key>
						<string>Clipboard</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>TargetNamedClipboardRedundantDisplayName</key>
						<string>mdLink</string>
						<key>TargetNamedClipboardUID</key>
						<string>DFCE8C45-2347-4DE1-988E-B2682FFE34BC</string>
						<key>TargetUseNamedClipboard</key>
						<true/>
						<key>Text</key>
						<string>%Variable%mdLink%thearchive://match/%SystemClipboard%)</string>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string></string>
						<key>Subtitle</key>
						<string></string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
						<key>Title</key>
						<string>Copied</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>621966806.012748</real>
				<key>ModificationDate</key>
				<real>628547273.12104499</real>
				<key>Name</key>
				<string>de.zettelkasten.TheArchive</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>0D6F0B13-755C-493D-B7BB-FC52F73CA13C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // main ::  IO ()
    const main = () =&gt; {
        const
            macroGroupName = 'MD Link tools',
            mdLinkToolsGroups = Application(
                'Keyboard Maestro'
            )
            .macroGroups.where({
                name: macroGroupName
            });
        return either(
            alert('Copy as MD Link - instances')
        )(tpl =&gt; {
            const [listing, count] = Array.from(tpl);
            return (
                copyText(listing),
                alert(
                    `Copy as MD Link :: ${count} specialised instances.`
                )(listing)
            );
        })(
            0 &lt; mdLinkToolsGroups.length ? (() =&gt; {
                const
                    instances = mdLinkToolsGroups.at(0)
                    .macros()
                    .flatMap(macro =&gt; {
                        const k = macro.name();
                        return k.includes('.') ? (
                            [k]
                        ) : [];
                    });
                return Right(
                    Tuple(
                        sortBy(
                            comparing(toLower)
                        )(
                            instances.map(x =&gt; `- ${x}`)
                        )
                        .join('\n')
                    )(instances.length)
                );
            })() : Left(
                `Macro group not found:\n\n\t${macroGroupName}`
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);
            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // toLower :: String -&gt; String
    const toLower = s =&gt;
        // Lower-case version of string.
        s.toLocaleLowerCase();

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631058844.49377406</real>
				<key>CustomIconData</key>
				<data>
				TU0AKgAADNKAACBQOCQWCgSEAUOwsPBGHBInxEqheKBg
				bxcdgyNA0JR0JgKQAKDSOSSWTSeUSmVSuWS2TP6YP53T
				N2vSbPNkzliumeOhYz9Vu+hO5x0VxPykPuXSYA00Aguo
				AwD1MECSrCSOhIJkauEwKV8KjGxDQFWUFg+0BGQyKl22
				3W+4XGXTF/PG7O97Xl6s++Mx2X91rrBLSZu52tzENx84
				t8PXHPR/5F/yy11AFgwh5kkhnOBopZ8q1kJBjSBaEAQC
				6cEwMA2u5a/YbHZW66QN/0h+PfcPt0b11YV3K7hKtz8V
				zL3kLfHPV6bWR04BA3pAy0A8IE7sFYN9sNlDvFLqg8He
				MG9DcADJbP1ev2e2C04Aaf0ZF/PL7PO7XZYftXOX/HKW
				UAlU/J4HnAzIPogjLAYrgjCWDkIA6M8JjSCcLAmBMMgW
				taYrYgz0vg9L3RHEkSoFELIgA+CSJCuh/HvGB6nbGZ2k
				zGxLnJHJxsEXRauWejTgK6oICtIotg9JAPjBJYwvCfsn
				vmyaYyjE0qytK6lvgkMVKaAABy+AD8niUEyE+cUznCVU
				1FLAgQzcEYLTiC5CToRwNTu7gNgw04CPPEEuxFLFBUHQ
				kuADKj4Pk3B+P+dBzUeco+UkOR1UqdIZUwG04gsDE6EI
				RTSAwDLpOkpwAynQNC1VVdWS0kEon/A0DN6dBz0kPg7U
				qdR0EBXpFvG8YsWEK1gAc3ABT/Q9U1ZZlmyrFDJ0ShD6
				vseRUWuVVqnkS1uFGjQGAWJFxCMywFn3c8qWclkuvnE9
				Dy5K8UoLeV1Lc+AC3wADlnqXF+l0mx6HqZ2Bm9fDU1CD
				M+WheqV3YAC2NagQDAI1j0PUAN5H+fyBXQ9GN4YtuF0X
				Whz3OfZ+G1lJ1LWhyHNdkCT3ZejbUPjDJwSgmZLhd+LI
				M1qRMnmDYrooShLov52H7V1XtZQGZ5hdmeH6fgAH6dRz
				RUex64ebhtRUfR9Xg192NS9AEgUgQXhw9AENW+OKaElO
				FoIuj06LoO4pdEIBrYfmwn6b2vAAeR4viZ5mxUe58Yfn
				i43YA4CoEBoHaqIYmvRycVIRnt3IFp+8pXu/QKXpgCgO
				9B7HoAB8l2WEVHGcgAAYTJTS8d55cZE644gB3Tn8DQMg
				AfBIkkAB/AyDSBAPtGxdGuPRedhtXn+AwEPQep59WWxU
				oEcJwgABpHlDLx3HhL2KrgAWaggAz0QgAB7E6TvjA4Ds
				VeW9Go3fz/opN6D/SUM/PQAZ04/zmAAH0LgVb3XvgMEa
				KB8g70vMQLax+CZ6ALwFfePgSwnHjAbA4/dtA/39Oebx
				AAk7/4UElgE9SArqYEC3FZAx2QjhPpeHbBJvjuilwWh2
				P8DD1h/wbEqJuD8IQAv4hIu9mUJ4VkkhVE9nz04COodU
				PqGUNAGQ2hxDqCkPSBw/iC+6EI+IixHhE/mJj+4nRSIL
				FGNxrIqQvivFkAD3oaw3AHDmC6KoKxhaBGOIcZYzj+hB
				GmJbnV2xxJHHCRkLYqj/hhFiGcd4Gxcj3F6Hhc5AHokF
				ESI0hokRKhLIuRkbyhRtkfHOK0MZKx4i3HqPkO4/RgIF
				GKIUoI0RJhHKV/kjJHRxkhHSV0WpMSzi/JyW8gZcyElD
				IeXkapFS/jjMGN0w5WyUmNLKTUtZlQXiBM14UhZoSkjX
				CaU5BprRSmxJKOsr5Lzcj640lkPpmRknHM+UcvZzymnS
				QKdcT52yTjtLCY83Z6ErntJ6cUZp9SIl9KqYEqZ/xyaB
				JGgk8I8xdnnH+ZdDJ8UOl3OaadEpq0UoqiqVk7piyWo3
				JmjstpwSfmdSOflJaU0ApRRWgc75t0clpQklVC5w0hnJ
				PuaTYpqRuoDCuntLaDTyqDR6mdDaj0Qn7UuKVTYUVPm1
				S6WNQJkktqJTSfNNqkxNpyACrigq1PNKYoAA8QnsVQnj
				WKTdZJO1FkG8KDsuwDGrH+0wtq8q3r1ralhdgAgByKYc
				z5QACa6PZHwLWjQDhFCarxN6vVHx/gZsEQt4Ql4byiRU
				AoBlSSYVDapItvFWlCWJNgzyVTNWLD/anZxiMLF3gId9
				AcfIuBXECTOAABwjY9Dugk0yoRKaiAZoaJITJ6ANAbIF
				aiRQ/o2ufLZIlQ7QGcxsVXbJEg/SlQIHyQIbQ1Gv3psH
				baOTnYkwFHwPYAA+xiDAIEOgdIAAFimFyw8eLqrmVUh+
				BNyI/wLAUgQHIOJ6CvvGI0ictlq3PMcY3YMkQASHQDbc
				BoDxAjUPoc5bGnarB/WtvqQIZgxmstbACPlxbNowkCfU
				xJ9o/x8OLH6NAZSKh1jtAAAcWQxWHj0vtLQ2hA8bj/Al
				gkCQEb7hfC2egjrZgFzTNs0Efw/SBL5H8B8EB6DLoqA8
				CY9ABX2zetgiS8hcraOdkSmEdzxhRiWRUOQcoAAEi5GW
				w8eo937s1Q9btFOOtBAAH5l4AQ8NE4WNku8AbQUwZOAf
				iItiYHOD4Y+oACcQgKgTgQGkNDxnkECBQDOAbpz0Wtza
				iPN7F1lY3cG+YfoqH5gBdhnwVYumHjydUAMft6VlY2oS
				P1oK8h+XiRIuwAjQV2ADf2QO9OX7Gj+BEBiTwFnVhuDY
				8YDDyQAgjBbmnNbVZ0Kq1ibOt6KR+j3a2AAdo6yBCaEg
				w/PWfBeOIAEPVxaHiTbQziiXZlnNjHofZhDKQ+g0Blfd
				dYfwOwiHouxsVelh8TDvpMqpLo/dNDyfMP4UYl3XuxAW
				K8X2AnsgCHs2FjEFiR8ASxzBd6Hmy5hwYP8C4Fduhr1N
				uIFYNdVscbDP5Z269I7MlLauAzqt5b0H+JoSO+HYgJ33
				oDQVu1nQWyaBHHIEwJQIDQGQ9AG37D+B4EPMlqbbM3Q/
				xtQvSER1vUBiNMMEh+ii5IALXYChYC95Uw8fHRWNKFoT
				zcD3Oed891NdYAILAadDvvefwrzu5Hu7pP3pldQA7zRV
				vbqmQxeDPRVoHg2TD1dcWUA/BPYL7hnDDPgfoPgkdrqV
				KrV6zPLpX8yehzfd0VCizx3x2IBhYC/8DyzwjH+ZM7Nt
				l9ig/gOai51gwfQbefPHusAAGANoBvWgR5TmEK/dpW96
				vBU+GfOeeAGJne4AUcgAAKL30gAfTdaqpk0B3rcpD7DK
				DA7KhCH6CC9qH+AWAaUMxKII9yZg/K446UXec2ACHggk
				AAzuYe12AMFe+QACHk5W8Gc8/GKY+ebeeMA6+owWgQDW
				1Kd+eS+4B0PQrm6I3SpTAc8NAgvky6PQHoeyACHYHUPi
				E0Eezyz2/mGgaycWYeJG9UPQAYYoyc/6DKyqH+kOH6ct
				CbAQKavAJHAYejBsXU/Oh3AmzqAC71Aw+KFjA42ARUHw
				8otexE2uA1BQ1EH0DU4cd++2BoB7BibcH28I7gorC+Wc
				/OS6ACSgH+HodxB9CAAMEzCGACP8S8F8GjDYvcAYsayc
				AgvuDGC5ACaqCKcuH+AYcpC1AUy2rWigxPFQaa3ShLDG
				S8+FDOPiFmGEay0EH+AihGAq7CH0DTDuuqIEBsB/D5Bm
				6NFWJLEEbjEIZrEOHnDI88AOE2EoIEhgH4BGzQAAAkwY
				H6CaCqcw0uNbEwJJC6pyaQaUS6ZeXcWVHJGU6UZ8Hgzq
				AIFOiMACLy0UBCBG4Q7CAAB8CSbMeZD9BpFQbmIGbqRS
				ZSG0ZWJCZaLUS3GO4xBy/UdUxo/kxyVeACAMxysfIFGO
				IKaIaKLoYGGcYKXwAIYQYUadEBIG5qsabEu1BoY/HYkf
				JS0UNwZIZMH4W4EsW8I0XCXGXKZMXTIfBwJSsM4LI6Pe
				S6YMX0OWX6FwX+JsHqV6EAV+WAWECwWIWAWOWTKFKRK8
				XtJoWkAIWoPsWuFQWyWqUwBkU0TiU6ToVANIVGVIVMVR
				JlK/LuaWVgVkHmZIVuVyUqHQTdHwU2TmTqTuuqO4T2NO
				T8RTIJLvLxLCS6UUNwUaUeHMUiUmV0HSSCSGSKCsSOSS
				SWDASaOqSey8PTLrJVMep5HRIuS6S+saTETIFATMTQTU
				FUTYLsfMIGQWQaQeQiQmDOQqQuQyASQ2RaJg+ahMWjJp
				NWZAYWRW5iJARcRg3gRoRqRuRyHIR2MER8MevCNaVIOo
				LQOuOyTyO8CgPAOqWAPLC1MZNVOcaFLESjLIPwPyP2Fg
				P6P+QCFkQHN0VkQQ8qIMMqKiMyCGM2M6M+CkNCKyVCNM
				ISNUossJPibiOc1aKQN0KSVoN+MKOEFcOIOMOQF6OUMf
				QsbkKcQWKmrmKuKwI8QaK8LALEBiLILMOrIbQnQoxQJi
				PyLwL0L4GeL8MAR4MIJoMSMUMYR+MlPgJSSCIWA6IaIe
				IiCeImIqIuBuIyI2KyI/IdRyWYLoMKJqJuJyGSJ2J6J+
				FiKCKGKKHGKOKSJYICAAABEBAAADAAAAAQBAAAABAQAD
				AAAAAQBAAAABAgADAAAABAAADaQBAwADAAAAAQAFAAAB
				BgADAAAAAQACAAABCgADAAAAAQABAAABEQAEAAAAAQAA
				AAgBEgADAAAAAQABAAABFQADAAAAAQAEAAABFgADAAAA
				AQBAAAABFwAEAAAAAQAADMkBHAADAAAAAQABAAABKAAD
				AAAAAQACAAABPQADAAAAAQACAAABUgADAAAAAQABAAAB
				UwADAAAABAAADayHcwAHAAAH2AAADbQAABkwAAgACAAI
				AAgAAQABAAEAAQAAB9hhcHBsAiAAAG1udHJSR0IgWFla
				IAfZAAIAGQALABoAC2Fjc3BBUFBMAAAAAGFwcGwAAAAA
				AAAAAAAAAAAAAAAAAAD21gABAAAAANMtYXBwbAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAC2Rlc2MAAAEIAAAAb2RzY20AAAF4AAAF
				nGNwcnQAAAcUAAAAOHd0cHQAAAdMAAAAFHJYWVoAAAdg
				AAAAFGdYWVoAAAd0AAAAFGJYWVoAAAeIAAAAFHJUUkMA
				AAecAAAADmNoYWQAAAesAAAALGJUUkMAAAecAAAADmdU
				UkMAAAecAAAADmRlc2MAAAAAAAAAFEdlbmVyaWMgUkdC
				IFByb2ZpbGUAAAAAAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtbHVjAAAAAAAA
				AB8AAAAMc2tTSwAAACgAAAGEZGFESwAAAC4AAAGsY2FF
				UwAAACQAAAHadmlWTgAAACQAAAH+cHRCUgAAACYAAAIi
				dWtVQQAAACoAAAJIZnJGVQAAACgAAAJyaHVIVQAAACgA
				AAKaemhUVwAAABYAAALCbmJOTwAAACYAAALYY3NDWgAA
				ACIAAAL+aGVJTAAAAB4AAAMgaXRJVAAAACgAAAM+cm9S
				TwAAACQAAANmZGVERQAAACwAAAOKa29LUgAAABYAAAO2
				c3ZTRQAAACYAAALYemhDTgAAABYAAAPMamFKUAAAABoA
				AAPiZWxHUgAAACIAAAP8cHRQTwAAACYAAAQebmxOTAAA
				ACgAAAREZXNFUwAAACYAAAQedGhUSAAAACQAAARsdHJU
				UgAAACIAAASQZmlGSQAAACgAAASyaHJIUgAAACgAAATa
				cGxQTAAAACwAAAUCcnVSVQAAACIAAAUuYXJFRwAAACYA
				AAVQZW5VUwAAACYAAAV2AFYBYQBlAG8AYgBlAGMAbgD9
				ACAAUgBHAEIAIABwAHIAbwBmAGkAbABHAGUAbgBlAHIA
				ZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABz
				AGUAUABlAHIAZgBpAGwAIABSAEcAQgAgAGcAZQBuAOgA
				cgBpAGMAQx6lAHUAIABoAOwAbgBoACAAUgBHAEIAIABD
				AGgAdQBuAGcAUABlAHIAZgBpAGwAIABSAEcAQgAgAEcA
				ZQBuAOkAcgBpAGMAbwQXBDAEMwQwBDsETAQ9BDgEOQAg
				BD8EQAQ+BEQEMAQ5BDsAIABSAEcAQgBQAHIAbwBmAGkA
				bAAgAGcA6QBuAOkAcgBpAHEAdQBlACAAUgBWAEIAwQBs
				AHQAYQBsAOEAbgBvAHMAIABSAEcAQgAgAHAAcgBvAGYA
				aQBskBp1KAAgAFIARwBCACCCcl9pY8+P8ABHAGUAbgBl
				AHIAaQBzAGsAIABSAEcAQgAtAHAAcgBvAGYAaQBsAE8A
				YgBlAGMAbgD9ACAAUgBHAEIAIABwAHIAbwBmAGkAbAXk
				BegF1QXkBdkF3AAgAFIARwBCACAF2wXcBdwF2QBQAHIA
				bwBmAGkAbABvACAAUgBHAEIAIABnAGUAbgBlAHIAaQBj
				AG8AUAByAG8AZgBpAGwAIABSAEcAQgAgAGcAZQBuAGUA
				cgBpAGMAQQBsAGwAZwBlAG0AZQBpAG4AZQBzACAAUgBH
				AEIALQBQAHIAbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4
				XNMMx3xmbpAaACAAUgBHAEIAIGPPj/Blh072TgCCLAAg
				AFIARwBCACAw1zDtMNUwoTCkMOsDkwO1A70DuQO6A8wA
				IAPAA8EDvwPGA68DuwAgAFIARwBCAFAAZQByAGYAaQBs
				ACAAUgBHAEIAIABnAGUAbgDpAHIAaQBjAG8AQQBsAGcA
				ZQBtAGUAZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAZQBs
				DkIOGw4jDkQOHw4lDkwAIABSAEcAQgAgDhcOMQ5IDicO
				RA4bAEcAZQBuAGUAbAAgAFIARwBCACAAUAByAG8AZgBp
				AGwAaQBZAGwAZQBpAG4AZQBuACAAUgBHAEIALQBwAHIA
				bwBmAGkAaQBsAGkARwBlAG4AZQByAGkBDQBrAGkAIABS
				AEcAQgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMA
				YQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQx
				BEkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUG
				RAZBACAGKgY5BjEGSgZBACAAUgBHAEIAIAYnBkQGOQYn
				BkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8A
				ZgBpAGwAZXRleHQAAAAAQ29weXJpZ2h0IDIwMDcgQXBw
				bGUgSW5jLiwgYWxsIHJpZ2h0cyByZXNlcnZlZC4AWFla
				IAAAAAAAAPNSAAEAAAABFs9YWVogAAAAAAAAdE0AAD3u
				AAAD0FhZWiAAAAAAAABadQAArHMAABc0WFlaIAAAAAAA
				ACgaAAAVnwAAuDZjdXJ2AAAAAAAAAAEBzQAAc2YzMgAA
				AAAAAQxCAAAF3v//8yYAAAeSAAD9kf//+6L///2jAAAD
				3AAAwGyAACBQOCQISwcUGmFG8lw0ohaIBeCxOKRWLReM
				RmKuqOOlax9XpeRJFtyVsRkBSkBGaWG88y89hWZBN9TU
				AP+cRqdTueT2BAGgAADUMAOujO1D0lCpqmJF/U9/QSFG
				k4o2rI6oAB91ufV2vV+dgWxACVAA52c5SJLo+DiUULu4
				MYKXMI1t92C8Xm9RSxAUAOzAO8i4MdVZGpmpmZ84u943
				HY4D5EAWpNNfLOgM5kLzh/4+LAO/ADJZ2dAGcgB7vXPR
				igAEAOfYOl37PSauKgQBgB+txrAACshigAAgKdggD7ol
				FeBAQCbaNbN37XnQQAgoGAB6ptFAAImxBb6dgEJ8d6NJ
				qTcFg6BafpwXodL28IFAsAPZPpAABA0H3fcSLqim4POu
				exjme9D1Ju+D4ve+LqPm+r7vy/b+oxAB/wE+sCwO9cFP
				bBkGp/B77Pw/T+AK/yLQtDECQMf70w5ECBw/EDqvpEcJ
				RNFCKxVAcNRdBD2RBGcGxrCESQnE8KvXFcfRfBMYoFIb
				4yLG8Swo/8lx7FsnSDBspPbKkIytJMsQDLUNyfKEvunM
				MjxzJUzQzLcgQ66c1rAAoDJ+10HASAB6E6/AJDIPErxS
				9YPga+pmN7F1FTSgh/H4gR+H6x87tKgR+n04RjF44SUp
				+/wEz8fRalcAAGkaUwAAHHSKQsDIEAAfBIEYm4HgjTUA
				H0u5/gyDabhQGL1wAvFMJ2f7cN0PI0VSShW1aBT/AFPh
				+tIfNjK6A7/AHPh6Kif4Ouue5Ok2AB/BwI1NU4vNkPC1
				x+uZdA5jCAAHkyWSyIrV6fW09YLgU1BOkvdAiCigR7nt
				S7aMfUJ/gG5p+jlewHk0WNQMbC2AtQThLXQIop4S1TbX
				esGHgG3IBDkMAAAUTRZuEgl+0Om4Kz8fBNEm5DlPrkkP
				Ya+NQ1a3IBjjloEE3mLhzgf4KVmfBMPwfomC1hOFzVoM
				Y6HaoAAIOAvgABBOlsgUUQsCTjnwS1bn6KGwtRrEoRlr
				W5rJV4DDiLyhE8XCbglPR8Em7Z+imMWr7simTQbodJNE
				OwzAAfgaBw3QvjdxHEosyxrswzTOc1PbltCfzSH6u/Qo
				G1rXtiwzEIUxTGdT2adsi47KLat64rmCi6q52ngIGvq/
				sCwYih0qSFKqq6srt4PE+GsqzjmtKREfmaVJYMyXJgmQ
				Kpom3QeevXVqHPSjHWpClKYTSnKyjHcqmhiHIgCyJfGv
				COHUjyQLUkhJiKkBAAARAQAAAwAAAAEAIAAAAQEAAwAA
				AAEAIAAAAQIAAwAAAAQAABoCAQMAAwAAAAEABQAAAQYA
				AwAAAAEAAgAAAQoAAwAAAAEAAQAAAREABAAAAAEAABWM
				ARIAAwAAAAEAAQAAARUAAwAAAAEABAAAARYAAwAAAAEA
				IAAAARcABAAAAAEAAAOjARwAAwAAAAEAAQAAASgAAwAA
				AAEAAgAAAT0AAwAAAAEAAgAAAVIAAwAAAAEAAQAAAVMA
				AwAAAAQAABoKh3MABwAAB9gAABoSAAAjuAAIAAgACAAI
				AAEAAQABAAEAAAfYYXBwbAIgAABtbnRyUkdCIFhZWiAH
				2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAA
				AAAAAAAAAAAAAAAA9tYAAQAAAADTLWFwcGwAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABZxj
				cHJ0AAAHFAAAADh3dHB0AAAHTAAAABRyWFlaAAAHYAAA
				ABRnWFlaAAAHdAAAABRiWFlaAAAHiAAAABRyVFJDAAAH
				nAAAAA5jaGFkAAAHrAAAACxiVFJDAAAHnAAAAA5nVFJD
				AAAHnAAAAA5kZXNjAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJv
				ZmlsZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAf
				AAAADHNrU0sAAAAoAAABhGRhREsAAAAuAAABrGNhRVMA
				AAAkAAAB2nZpVk4AAAAkAAAB/nB0QlIAAAAmAAACInVr
				VUEAAAAqAAACSGZyRlUAAAAoAAACcmh1SFUAAAAoAAAC
				mnpoVFcAAAAWAAACwm5iTk8AAAAmAAAC2GNzQ1oAAAAi
				AAAC/mhlSUwAAAAeAAADIGl0SVQAAAAoAAADPnJvUk8A
				AAAkAAADZmRlREUAAAAsAAADimtvS1IAAAAWAAADtnN2
				U0UAAAAmAAAC2HpoQ04AAAAWAAADzGphSlAAAAAaAAAD
				4mVsR1IAAAAiAAAD/HB0UE8AAAAmAAAEHm5sTkwAAAAo
				AAAERGVzRVMAAAAmAAAEHnRoVEgAAAAkAAAEbHRyVFIA
				AAAiAAAEkGZpRkkAAAAoAAAEsmhySFIAAAAoAAAE2nBs
				UEwAAAAsAAAFAnJ1UlUAAAAiAAAFLmFyRUcAAAAmAAAF
				UGVuVVMAAAAmAAAFdgBWAWEAZQBvAGIAZQBjAG4A/QAg
				AFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGUA
				bAAgAFIARwBCAC0AYgBlAHMAawByAGkAdgBlAGwAcwBl
				AFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIA
				aQBjAEMepQB1ACAAaADsAG4AaAAgAFIARwBCACAAQwBo
				AHUAbgBnAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUA
				bgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQQ4BDkAIAQ/
				BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwA
				IABnAOkAbgDpAHIAaQBxAHUAZQAgAFIAVgBCAMEAbAB0
				AGEAbADhAG4AbwBzACAAUgBHAEIAIABwAHIAbwBmAGkA
				bJAadSgAIABSAEcAQgAggnJfaWPPj/AARwBlAG4AZQBy
				AGkAcwBrACAAUgBHAEIALQBwAHIAbwBmAGkAbABPAGIA
				ZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwF5AXo
				BdUF5AXZBdwAIABSAEcAQgAgBdsF3AXcBdkAUAByAG8A
				ZgBpAGwAbwAgAFIARwBCACAAZwBlAG4AZQByAGkAYwBv
				AFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIA
				aQBjAEEAbABsAGcAZQBtAGUAaQBuAGUAcwAgAFIARwBC
				AC0AUAByAG8AZgBpAGzHfLwYACAAUgBHAEIAINUEuFzT
				DMd8Zm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABS
				AEcAQgAgMNcw7TDVMKEwpDDrA5MDtQO9A7kDugPMACAD
				wAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAg
				AFIARwBCACAAZwBlAG4A6QByAGkAYwBvAEEAbABnAGUA
				bQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUAbA5C
				DhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQO
				GwBHAGUAbgBlAGwAIABSAEcAQgAgAFAAcgBvAGYAaQBs
				AGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8A
				ZgBpAGkAbABpAEcAZQBuAGUAcgBpAQ0AawBpACAAUgBH
				AEIAIABwAHIAbwBmAGkAbABVAG4AaQB3AGUAcgBzAGEA
				bABuAHkAIABwAHIAbwBmAGkAbAAgAFIARwBCBB4EMQRJ
				BDgEOQAgBD8EQAQ+BEQEOAQ7BEwAIABSAEcAQgZFBkQG
				QQAgBioGOQYxBkoGQQAgAFIARwBCACAGJwZEBjkGJwZF
				AEcAZQBuAGUAcgBpAGMAIABSAEcAQgAgAFAAcgBvAGYA
				aQBsAGV0ZXh0AAAAAENvcHlyaWdodCAyMDA3IEFwcGxl
				IEluYy4sIGFsbCByaWdodHMgcmVzZXJ2ZWQuAFhZWiAA
				AAAAAADzUgABAAAAARbPWFlaIAAAAAAAAHRNAAA97gAA
				A9BYWVogAAAAAAAAWnUAAKxzAAAXNFhZWiAAAAAAAAAo
				GgAAFZ8AALg2Y3VydgAAAAAAAAABAc0AAHNmMzIAAAAA
				AAEMQgAABd7///MmAAAHkgAA/ZH///ui///9owAAA9wA
				AMBsgAAgQAD0FESOhCUIsLJL+h0DiERiUTiACiwAXcZW
				5yjhscUfbwgkQjVklWYtlApe0riktl0uBUxADTmjXKk3
				JqrnS4J09I8re0vgYGA4Af4FAsRAL6fMCfb7oQAmIKAC
				yqy5eNZf8Of1RAADpL+V6kAAHZbLgQBgT9JRNAD+HxFg
				T6fVRiwCADvvT/r0Cf4Jqj/MZRAAOUq9iL5QpuAD7OqG
				gT1el9gV6d98vt/wJpK+FT63xKJOmNOKAyOTymWzFezV
				Gzme0EQfOi0mmAGSyl5vdRsFGBgLoxlKeFTq1xKNO+NO
				SBgT0ecCfj9qOqqLXZ4AANqgSK5gLV7IiL6OJYAD8Kpe
				owIBlGEQnv2riXUigGA1vTyTAALPSFr71qC/Ikfy1H8D
				4HAAfBMEwt4eiOpy6oo+SXNaAJKEO/I6EU7AAOkiB/gq
				qh8E0SkNiSKqBHuerpt2oTsoEwCvkoyAEjmRKjAkop8E
				2SUNiYLKBHs1C+qyeKtoeqMWgABCigISsan+DAMw2Kgw
				x/FLKLuACdFWnifKA3IAKIgbMLo3Kpqqq6RBAkiTJQFq
				VJZL8vzMmhppsnCIIKDyDoShYiobI04opLCMl2jaOo+c
				RvICABEBAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgAD
				AAAABAAAJIoBAwADAAAAAQAFAAABBgADAAAAAQACAAAB
				CgADAAAAAQABAAABEQAEAAAAAQAAIeoBEgADAAAAAQAB
				AAABFQADAAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAA
				AQAAAc4BHAADAAAAAQABAAABKAADAAAAAQACAAABPQAD
				AAAAAQACAAABUgADAAAAAQABAAABUwADAAAABAAAJJKH
				cwAHAAAH2AAAJJoAAAAAAAgACAAIAAgAAQABAAEAAQAA
				B9hhcHBsAiAAAG1udHJSR0IgWFlaIAfZAAIAGQALABoA
				C2Fjc3BBUFBMAAAAAGFwcGwAAAAAAAAAAAAAAAAAAAAA
				AAD21gABAAAAANMtYXBwbAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2Rl
				c2MAAAEIAAAAb2RzY20AAAF4AAAFnGNwcnQAAAcUAAAA
				OHd0cHQAAAdMAAAAFHJYWVoAAAdgAAAAFGdYWVoAAAd0
				AAAAFGJYWVoAAAeIAAAAFHJUUkMAAAecAAAADmNoYWQA
				AAesAAAALGJUUkMAAAecAAAADmdUUkMAAAecAAAADmRl
				c2MAAAAAAAAAFEdlbmVyaWMgUkdCIFByb2ZpbGUAAAAA
				AAAAAAAAABRHZW5lcmljIFJHQiBQcm9maWxlAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAABtbHVjAAAAAAAAAB8AAAAMc2tTSwAA
				ACgAAAGEZGFESwAAAC4AAAGsY2FFUwAAACQAAAHadmlW
				TgAAACQAAAH+cHRCUgAAACYAAAIidWtVQQAAACoAAAJI
				ZnJGVQAAACgAAAJyaHVIVQAAACgAAAKaemhUVwAAABYA
				AALCbmJOTwAAACYAAALYY3NDWgAAACIAAAL+aGVJTAAA
				AB4AAAMgaXRJVAAAACgAAAM+cm9STwAAACQAAANmZGVE
				RQAAACwAAAOKa29LUgAAABYAAAO2c3ZTRQAAACYAAALY
				emhDTgAAABYAAAPMamFKUAAAABoAAAPiZWxHUgAAACIA
				AAP8cHRQTwAAACYAAAQebmxOTAAAACgAAAREZXNFUwAA
				ACYAAAQedGhUSAAAACQAAARsdHJUUgAAACIAAASQZmlG
				SQAAACgAAASyaHJIUgAAACgAAATacGxQTAAAACwAAAUC
				cnVSVQAAACIAAAUuYXJFRwAAACYAAAVQZW5VUwAAACYA
				AAV2AFYBYQBlAG8AYgBlAGMAbgD9ACAAUgBHAEIAIABw
				AHIAbwBmAGkAbABHAGUAbgBlAHIAZQBsACAAUgBHAEIA
				LQBiAGUAcwBrAHIAaQB2AGUAbABzAGUAUABlAHIAZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAOgAcgBpAGMAQx6lAHUA
				IABoAOwAbgBoACAAUgBHAEIAIABDAGgAdQBuAGcAUABl
				AHIAZgBpAGwAIABSAEcAQgAgAEcAZQBuAOkAcgBpAGMA
				bwQXBDAEMwQwBDsETAQ9BDgEOQAgBD8EQAQ+BEQEMAQ5
				BDsAIABSAEcAQgBQAHIAbwBmAGkAbAAgAGcA6QBuAOkA
				cgBpAHEAdQBlACAAUgBWAEIAwQBsAHQAYQBsAOEAbgBv
				AHMAIABSAEcAQgAgAHAAcgBvAGYAaQBskBp1KAAgAFIA
				RwBCACCCcl9pY8+P8ABHAGUAbgBlAHIAaQBzAGsAIABS
				AEcAQgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgD9ACAA
				UgBHAEIAIABwAHIAbwBmAGkAbAXkBegF1QXkBdkF3AAg
				AFIARwBCACAF2wXcBdwF2QBQAHIAbwBmAGkAbABvACAA
				UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8AUAByAG8AZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAGUAcgBpAGMAQQBsAGwA
				ZwBlAG0AZQBpAG4AZQBzACAAUgBHAEIALQBQAHIAbwBm
				AGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3xmbpAaACAA
				UgBHAEIAIGPPj/Blh072TgCCLAAgAFIARwBCACAw1zDt
				MNUwoTCkMOsDkwO1A70DuQO6A8wAIAPAA8EDvwPGA68D
				uwAgAFIARwBCAFAAZQByAGYAaQBsACAAUgBHAEIAIABn
				AGUAbgDpAHIAaQBjAG8AQQBsAGcAZQBtAGUAZQBuACAA
				UgBHAEIALQBwAHIAbwBmAGkAZQBsDkIOGw4jDkQOHw4l
				DkwAIABSAEcAQgAgDhcOMQ5IDicORA4bAEcAZQBuAGUA
				bAAgAFIARwBCACAAUAByAG8AZgBpAGwAaQBZAGwAZQBp
				AG4AZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAaQBsAGkA
				RwBlAG4AZQByAGkBDQBrAGkAIABSAEcAQgAgAHAAcgBv
				AGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAA
				cgBvAGYAaQBsACAAUgBHAEIEHgQxBEkEOAQ5ACAEPwRA
				BD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEG
				SgZBACAAUgBHAEIAIAYnBkQGOQYnBkUARwBlAG4AZQBy
				AGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZXRleHQA
				AAAAQ29weXJpZ2h0IDIwMDcgQXBwbGUgSW5jLiwgYWxs
				IHJpZ2h0cyByZXNlcnZlZC4AWFlaIAAAAAAAAPNSAAEA
				AAABFs9YWVogAAAAAAAAdE0AAD3uAAAD0FhZWiAAAAAA
				AABadQAArHMAABc0WFlaIAAAAAAAACgaAAAVnwAAuDZj
				dXJ2AAAAAAAAAAEBzQAAc2YzMgAAAAAAAQxCAAAF3v//
				8yYAAAeSAAD9kf//+6L///2jAAAD3AAAwGw=
				</data>
				<key>ModificationDate</key>
				<real>631734693.987939</real>
				<key>Name</key>
				<string>Copy list of specialised instances</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>AF5D08FD-1CC0-492C-91BA-D41BCF3007C7</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy selected Ulysses item as MD Link

    // main :: IO ()
    const main = () =&gt; {
        const
            kme = Application('Keyboard Maestro Engine'),
            itemName = (
                kme.doScript(windowNamePlist),
                kme.getvariable('windowName')
            );

        return either(
            alert('Copy as MD Link')
        )(
            s =&gt; (
                kme.setvariable('mdLink', {
                    to: s
                }),
                s
            )
        )(
            bindLR(
                clipTextLR()
            )(
                url =&gt; Right(`[${itemName}](${url})`)
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // ---------------- KEYBOARD MAESTRO -----------------

    // windowNamePlist :: XML String
    const windowNamePlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SetVariableToText&lt;/string&gt;
                &lt;key&gt;Text&lt;/key&gt;
                &lt;string&gt;%FrontWindowName%&lt;/string&gt;
                &lt;key&gt;Variable&lt;/key&gt;
                &lt;string&gt;windowName&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631051801.47009397</real>
				<key>ModificationDate</key>
				<real>631055245.93523097</real>
				<key>Name</key>
				<string>com.ulyssesapp.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>A1C9FAD9-5F46-46F5-9AC3-885A0F046244</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.toketaware.ithoughtsx</string>
							<key>Name</key>
							<string>iThoughtsX</string>
							<key>NewFile</key>
							<string>/Applications/iThoughtsX.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Link to any selected node or otherwise to document</string>
						<key>Actions</key>
						<array>
							<dict>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string></string>
								<key>Variable</key>
								<string>mdLink</string>
							</dict>
							<dict>
								<key>IsDisclosed</key>
								<false/>
								<key>JustDisplay</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetClipboardToText</string>
								<key>Text</key>
								<string></string>
							</dict>
							<dict>
								<key>Conditions</key>
								<dict>
									<key>ConditionList</key>
									<array>
										<dict>
											<key>ConditionType</key>
											<string>Menu</string>
											<key>MenuConditionSelectionType</key>
											<string>Path</string>
											<key>MenuConditionType</key>
											<string>IsEnabled</string>
											<key>MenuModifiers</key>
											<integer>256</integer>
											<key>MenuShortcut</key>
											<string>C</string>
											<key>MenuTitle</key>
											<string>Edit &gt; Copy as &gt; Link</string>
										</dict>
									</array>
									<key>ConditionListMatch</key>
									<string>All</string>
								</dict>
								<key>ElseActions</key>
								<array>
									<dict>
										<key>ActionName</key>
										<string>Link to document</string>
										<key>Actions</key>
										<array>
											<dict>
												<key>ActionName</key>
												<string>MD Link for iThoughtsX document, with no particular selection</string>
												<key>DisplayKind</key>
												<string>None</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>ExecuteJavaScriptForAutomation</string>
												<key>Path</key>
												<string></string>
												<key>Text</key>
												<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // MD Link for iThoughtsX Document with
    // no specific selection.

    const main = () =&gt; (
        Application('iThoughtsX').activate(),
        either(
            alert('MD Link')
        )(
            md =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: md
                }),
                md
            )
        )(
            appFrontWindowMDLinkLR(
                'com.toketaware.ithoughtsx'
            )
        )
    );

    // ---------------------- LINKS ----------------------

    // appFrontWindowMDLinkLR :: String -&gt; Either String String
    const appFrontWindowMDLinkLR = bundleID =&gt; {
        const
            procs = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                })
            .applicationProcesses.where({
                bundleIdentifier: bundleID
            });
        return bindLR(
            bindLR(
                procs.length &gt; 0 ? (
                    Right(procs.at(0).windows)
                ) : Left('Application not found: ' + bundleID)
            )(ws =&gt; ws.length &gt; 0 ? (
                Right(ws.at(0))
            ) : Left(`No windows found for ${bundleID}`))
        )(w =&gt; {
            const
                uw = ObjC.unwrap,
                [winTitle, maybeDocURL] = map(
                    k =&gt; uw(w.attributes.byName(k).value())
                )(['AXTitle', 'AXDocument'])
            return Boolean(maybeDocURL) ? (
                Right(`[${winTitle}](${maybeDocURL})`)
            ) : Left(
                `Window '${winTitle}' of:\n\n\t${bundleID}` + [
                    '\n\nmay not be a document window.',
                    `\nConsider adding a macro named '${bundleID}'`,
                    `to the KM Group '${kmGroupName}'.`,
                    '\n(Or request such a macro, which should',
                    'save a [label](url) string) in the',
                    'KM variable "mdLink")',
                    `on the Keyboard Maestro forum).`
                ].join('\n')
            )
        });
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // map :: (a -&gt; b) -&gt; [a] -&gt; [b]
    const map = f =&gt;
        // The list obtained by applying f
        // to each element of xs.
        // (The image of xs under f).
        xs =&gt; [...xs].map(f);

    return main()
})();</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseText</key>
												<true/>
											</dict>
										</array>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>Group</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>MacroActionType</key>
								<string>IfThenElse</string>
								<key>ThenActions</key>
								<array>
									<dict>
										<key>ActionName</key>
										<string>Link to selection</string>
										<key>Actions</key>
										<array>
											<dict>
												<key>MacroActionType</key>
												<string>SelectMenuItem</string>
												<key>Menu</key>
												<array>
													<string>Edit</string>
													<string>Copy as</string>
													<string>Link</string>
												</array>
												<key>TargetApplication</key>
												<dict>
													<key>BundleIdentifier</key>
													<string>com.toketaware.ithoughtsx</string>
													<key>Name</key>
													<string>iThoughtsX</string>
													<key>NewFile</key>
													<string>/Applications/iThoughtsX.app</string>
												</dict>
												<key>TargetingType</key>
												<string>Specific</string>
											</dict>
											<dict>
												<key>Conditions</key>
												<dict>
													<key>ConditionList</key>
													<array>
														<dict>
															<key>ClipboardConditionType</key>
															<string>IsNot</string>
															<key>ClipboardText</key>
															<string></string>
															<key>ConditionType</key>
															<string>Clipboard</string>
														</dict>
													</array>
													<key>ConditionListMatch</key>
													<string>All</string>
												</dict>
												<key>MacroActionType</key>
												<string>PauseUntil</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
											</dict>
											<dict>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string>%SystemClipboard%</string>
												<key>Variable</key>
												<string>mdURL</string>
											</dict>
											<dict>
												<key>IsDisclosed</key>
												<false/>
												<key>JustDisplay</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetClipboardToText</string>
												<key>Text</key>
												<string></string>
											</dict>
											<dict>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SelectMenuItem</string>
												<key>Menu</key>
												<array>
													<string>Edit</string>
													<string>Copy</string>
												</array>
												<key>TargetApplication</key>
												<dict>
													<key>BundleIdentifier</key>
													<string>com.toketaware.ithoughtsx</string>
													<key>Name</key>
													<string>iThoughtsX</string>
													<key>NewFile</key>
													<string>/Applications/iThoughtsX.app</string>
												</dict>
												<key>TargetingType</key>
												<string>Specific</string>
											</dict>
											<dict>
												<key>Conditions</key>
												<dict>
													<key>ConditionList</key>
													<array>
														<dict>
															<key>ClipboardConditionType</key>
															<string>IsNot</string>
															<key>ClipboardText</key>
															<string></string>
															<key>ConditionType</key>
															<string>Clipboard</string>
														</dict>
													</array>
													<key>ConditionListMatch</key>
													<string>All</string>
												</dict>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>PauseUntil</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
											</dict>
											<dict>
												<key>ActionName</key>
												<string>Execute JavaScript For Automation :: Name of selected node.</string>
												<key>DisplayKind</key>
												<string>Variable</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>ExecuteJavaScriptForAutomation</string>
												<key>Path</key>
												<string></string>
												<key>Text</key>
												<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(
            msg =&gt; msg
        )(
			x =&gt; {
				const xs = lines(x);
				return 0 &lt; xs.length ? (
		            xs[0]
        		) : x;
			}
		)(clipTextLR())


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // string delimited by newline and or CR.
        0 &lt; s.length ? (
            s.split(/[\r\n]+/)
        ) : [];

    return main();
})();</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseText</key>
												<true/>
												<key>Variable</key>
												<string>mdName</string>
											</dict>
											<dict>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string>[%Variable%mdName%](%Variable%mdURL%)</string>
												<key>Variable</key>
												<string>mdLink</string>
											</dict>
											<dict>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string></string>
												<key>Variable</key>
												<string>mdName</string>
											</dict>
											<dict>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string></string>
												<key>Variable</key>
												<string>mdURL</string>
											</dict>
										</array>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>Group</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
						</array>
						<key>MacroActionType</key>
						<string>Group</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628791216.25947201</real>
				<key>ModificationDate</key>
				<real>628950108.08559895</real>
				<key>Name</key>
				<string>com.toketaware.ithoughtsx</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>6A609F65-4F5D-4C82-97BD-AB9F0FEFDAA2</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020

    const
        track = Application('com.spotify.client')
        .currentTrack(),
        idTrack = track.id().split(':')[2];
    return `[${track.name()}](spotify://track/${idTrack})`;
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620241764.56565905</real>
				<key>ModificationDate</key>
				<real>628543773.40122902</real>
				<key>Name</key>
				<string>com.spotify.client</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>DD3929E5-5681-4FBD-9010-22A5F9A9CED3</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy selected Ulysses item as MD Link

    // main :: IO ()
    const main = () =&gt; {
        const
            kme = Application('Keyboard Maestro Engine'),
            itemName = (
                kme.doScript(windowNamePlist),
                kme.getvariable('windowName')
            );

        return either(
            alert('Copy as MD Link')
        )(
            s =&gt; (
                kme.setvariable('mdLink', {
                    to: s
                }),
                s
            )
        )(
            bindLR(
                clipTextLR()
            )(
                url =&gt; Right(`[${itemName}](${url})`)
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // ---------------- KEYBOARD MAESTRO -----------------

    // windowNamePlist :: XML String
    const windowNamePlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SetVariableToText&lt;/string&gt;
                &lt;key&gt;Text&lt;/key&gt;
                &lt;string&gt;%FrontWindowName%&lt;/string&gt;
                &lt;key&gt;Variable&lt;/key&gt;
                &lt;string&gt;windowName&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631055636.30216706</real>
				<key>ModificationDate</key>
				<real>631055639.14778101</real>
				<key>Name</key>
				<string>com.soulmen.ulysses-setapp</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>75E588FE-2D2F-42E6-86F0-8104C7960598</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Share</string>
							<string>Copy Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.reederapp.macOS</string>
							<key>Name</key>
							<string>Reeder</string>
							<key>NewFile</key>
							<string>/Applications/Reeder.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until clipboard has text</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>NotifyOnTimeOut</key>
						<true/>
						<key>TimeOutAbortsMacro</key>
						<false/>
						<key>TimeOutPeriod</key>
						<real>5</real>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Reeder link'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(link =&gt; Right(`[](${link})`))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ----------------- GENERAL FUNCTIONS -----------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink% </string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620248960.36932695</real>
				<key>ModificationDate</key>
				<real>628543718.09737802</real>
				<key>Name</key>
				<string>com.reederapp.macOS</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>4B909105-12BA-4141-9F2E-A33BB7B5BBE4</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Share</string>
							<string>Copy Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.reederapp.macOS</string>
							<key>Name</key>
							<string>Reeder</string>
							<key>NewFile</key>
							<string>/Applications/Reeder.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until clipboard has text</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>NotifyOnTimeOut</key>
						<true/>
						<key>TimeOutAbortsMacro</key>
						<false/>
						<key>TimeOutPeriod</key>
						<real>5</real>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Reeder link'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(link =&gt; Right(`[](${link})`))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ----------------- GENERAL FUNCTIONS -----------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink% </string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>626022406.92979598</real>
				<key>ModificationDate</key>
				<real>628543703.99265897</real>
				<key>Name</key>
				<string>com.reederapp.5.macOS</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>9FEA90F1-542F-4231-B4BD-5ADDDF6D9298</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // com.panic.Transmit
    // vs App Store build:
    // com.panic.transmit.mas

    // main :: IO ()
    const main = () =&gt; {
        const
            transmit = Application('Transmit'),
            ds = transmit.documents;
        return either(
            // Notification
            msg =&gt; msg
        )(
            link =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: link
                }),
                link
            )
        )(bindLR(
            0 &lt; ds.length ? (
                Right(ds.at(0))
            ) : Left('No documents open in Transmit')
        )(doc =&gt; {
            const tabs = doc.tabs;
            return bindLR(
                0 &lt; tabs.length ? (
                    Right(doc.currentTab())
                ) : Left(
                    'No tabs found for document :: doc.name()'
                )
            )(tab =&gt; {
                const fbs = tab.fileBrowsers;
                return bindLR(
                    0 &lt; fbs.length ? (
                        Right(fbs.at(0))
                    ) : Left(
                        'No file browsers found for current tab.'
                    )
                )(fb =&gt; {
                    const selns = fb.selectedBrowserItems;
                    return bindLR(
                        0 &lt; selns.length ? (
                            Right(selns.at(0))
                        ) : Left('Nothing selected in front tab')
                    )(x =&gt; Right(
                        `[${x.name()}]` + (
                            `(${encodeURI('file://' + x.path())})`
                        )
                    ));
                });
            });
        }));
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628771538.92972803</real>
				<key>ModificationDate</key>
				<real>628771547.77784097</real>
				<key>Name</key>
				<string>com.panic.transmit.mas</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>5028564D-691D-4E67-A053-EFEE757D03F3</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.sonnysoftware.bookends</string>
							<key>Name</key>
							<string>Bookends</string>
							<key>NewFile</key>
							<string>/Applications/Bookends.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy selected items from Bookends as MD links.
    // Rob Trew @2020

    // main :: IO ()
    const main = () =&gt; {
        const
            url = 'bookends://sonnysoftware.com/',
            bookends = Application('Bookends'),
            ws = bookends.libraryWindows;
        return either(
            alert('Copy as MD link')
        )(
            copyText
        )(
            bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left(
                    'No library windows open in Bookends.'
                )
            )(
                w =&gt; Right(
                    w.selectedPublicationItems()
                    .map(
                        x =&gt; `[${bookends.format(x).trim()}]` + (
                            `(${url}${x.id()})`
                        )
                    )
                    .join('\n')
                )
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>622163020.078107</real>
				<key>ModificationDate</key>
				<real>629019131.52665102</real>
				<key>Name</key>
				<string>com.sonnysoftware.bookends</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>1011E7F7-8471-4D2A-B0D0-0943E1523C4C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // main :: IO ()
    const main = () =&gt; {
        const
            op = Application('OmniPlan'),
            wins = op.windows,
            version = last(op.id());

        return either(
            // A user message,
            alert('MD link')
        )(
            // or a Markdown link.
            x =&gt; x
        )(
            bindLR(
                0 &lt; wins.length ? (
                    Right(wins.at(0))
                ) : Left(
                    `No documents open in OmniPlan ${version}.`
                )
            )(window =&gt; {
                const
                    doc = window.document,
                    fp = Path(doc.file()).toString(),
                    opURL = encodeURI(`omniplan://localhost${fp}`),
                    fileURL = encodeURI('file://' + fp),
                    selns = window.selectedTasks(),
                    taskNames = selns.map(x =&gt; x.name())
                    .join(','),
                    taskIds = selns.map(x =&gt; x.id())
                    .join(',%2520');
                return Right(
                    0 &lt; selns.length ? (
                        `[${taskNames}](${opURL}/task/${taskIds})`
                    ) : `[${doc.name()}](${fileURL})`
                );
            })
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // last :: [a] -&gt; a
    const last = xs =&gt; (
        // The last item of a list.
        ys =&gt; 0 &lt; ys.length ? (
            ys.slice(-1)[0]
        ) : undefined
    )(list(xs));

    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>629071556.148844</real>
				<key>ModificationDate</key>
				<real>629072222.24903905</real>
				<key>Name</key>
				<string>com.omnigroup.OmniPlan4</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>A5DE452C-923A-4747-9DF7-B8269A473293</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionName</key>
						<string>Clear System Clipboard to empty string</string>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>File</string>
							<string>Copy Markdown Deeplink</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.lukilabs.lukiapp</string>
							<key>Name</key>
							<string>Craft</string>
							<key>NewFile</key>
							<string>/Applications/Craft.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause Until Clipboard has non-empty text</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>634235267.36757696</real>
				<key>ModificationDate</key>
				<real>634235457.69243896</real>
				<key>Name</key>
				<string>com.lukilabs.lukiapp</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>F0F53070-9404-4EB4-A1F5-7D3B5DD8D62A</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Either an alert message or MD links(s) for any 
    // OmniFocus 3 selections
    // Placed in a Keyboard Maestro variable
    // with the name 'mdLink'

    const main = () =&gt; {
        const
            focus = Application('OmniFocus'),
            ds = focus.documents;
        return either(
            msg =&gt; (
                alert('MD Link')(msg),
                ''
            )
        )(s =&gt; (
            Application('Keyboard Maestro Engine')
            .setvariable('mdLink', {
                to: s
            }),
            s
        ))(
            bindLR(
                0 &lt; ds.length ? (
                    Right(ds.at(0))
                ) : Left('No OmniFocus documents found.')
            )(doc =&gt; {
                const ws = doc.documentWindows;
                return bindLR(
                    0 &lt; ws.length ? (
                        Right(ws.at(0))
                    ) : Left('No document window found.')
                )(w =&gt; {
                    const
                        mainSelns = w.content.selectedTrees,
                        panel = 0 &lt; mainSelns.length ? (
                            mainSelns
                        ) : w.sidebar.selectedTrees;
                    return 0 &lt; panel.length ? (
                        Right(
                            panel().map(
                                x =&gt; `[${x.name()}]` + (
                                    `(omnifocus:///task/${x.id()})`
                                )
                            ).join('\n')
                        )
                    ) : Left('Nothing selected in OmniFocus.');
                })
            })
        )
    };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // MAIN --
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628975106.58552098</real>
				<key>ModificationDate</key>
				<real>628975205.67310405</real>
				<key>Name</key>
				<string>com.omnigroup.OmniFocus3.MacAppStore</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>B3169CC6-6482-47E8-AA98-F9D00DC052D0</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt; {
        const
            documents = Application(
                'com.multimarkdown.nvUltra'
            ).documents,
            kme = Application('Keyboard Maestro Engine'),
            setMDLink = s =&gt; (
                kme.setvariable('mdLink', {
                    to: s
                }),
                s
            );
        return (
            // In Keyboard Maestro, then:
            setMDLink(''),
            either(
                // in a user dialog,
                alert('Copy as Markdown Link')
            )(
                // or in Keyboard Maestro.
                setMDLink
            )(
                bindLR(
                    0 &lt; documents.length ? (
                        Right(documents.at(0))
                    ) : Left(
                        'No front document found in nvUltra.'
                    )
                )(doc =&gt; {
                    const fp = str(Path(doc.note()));
                    return fp.endsWith('null') ? (
                        Left(`Selection is not a text file.`)
                    ) : Right(
                        `[${takeBaseName(fp)}]` + (
                            `(${doc.noteLink()})`
                        )
                    );
                })
            )
        );
    };


    // ---------------------- MACOS ----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // str :: a -&gt; String
    const str = x =&gt;
        Array.isArray(x) &amp;&amp; x.every(
            v =&gt; ('string' === typeof v) &amp;&amp; (1 === v.length)
        ) ? (
            x.join('')
        ) : x.toString();


    // takeBaseName :: FilePath -&gt; String
    const takeBaseName = strPath =&gt;
        ('' !== strPath) ? (
            ('/' !== strPath[strPath.length - 1]) ? (() =&gt; {
                const fn = strPath.split('/').slice(-1)[0];
                return fn.includes('.') ? (
                    fn.split('.').slice(0, -1).join('.')
                ) : fn;
            })() : ''
        ) : '';

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631585981.14060795</real>
				<key>ModificationDate</key>
				<real>631732616.51027405</real>
				<key>Name</key>
				<string>com.multimarkdown.nvUltra</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>932C62D8-0A67-4442-9F54-AB36C72C1515</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    const
        kme = Application('Keyboard Maestro'),
        selnMacros = kme.selectedMacros();

    return (
        0 &lt; selnMacros.length ? (
            selnMacros
        ) : kme.selectedMacroGroups()
    ).map(
        x =&gt; `[${x.name()}]` + (
            `(keyboardmaestro://m=${x.id()})`
        )
    ).join('\n');
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%   </string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628990819.70212102</real>
				<key>ModificationDate</key>
				<real>628992905.45375502</real>
				<key>Name</key>
				<string>com.stairways.keyboardmaestro.editor</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>99C77823-EBFC-4D9C-89E7-566687F0673E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Editor</string>
							<string>Show Path Bar</string>
						</array>
						<key>NotifyOnFailure</key>
						<false/>
						<key>StopOnFailure</key>
						<false/>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.panic.Nova</string>
							<key>Name</key>
							<string>Nova</string>
							<key>NewFile</key>
							<string>/Applications/Nova.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Briefly</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.createTemplateTagFirstArg=function(d){return d.raw=d};$jscomp.createTemplateTagFirstArgWithRaw=function(d,e){d.raw=e;return d};
(function(){var d=function(a){return function(b){var c=Object.assign(Application("System Events"),{includeStandardAdditions:!0});return c.activate(),c.displayDialog(b,{withTitle:a,buttons:["OK"],defaultButton:"OK"}),b}},e=function(a){return{type:"Either",Left:a}},g=function(a){return{type:"Either",Right:a}},h=function(a){return function(b){return void 0!==a.Left?a:b(a.Right)}},k=function(a){return function(b){return function(c){return"Either"===c.type?void 0!==c.Left?a(c.Left):b(c.Right):void 0}}},
l=function(a){a=Array.isArray(a)?a:Array.from(a||[]);return 0&lt;a.length?a.slice(0,-1):void 0};return function(){var a=Object.assign(Application("System Events"),{includeStandardAdditions:!0}).applicationProcesses.where({name:"Nova"});return k(d("Copy as MD link"))(function(b){return Application("Keyboard Maestro Engine").setvariable("mdLink",{to:b}),b})(h(0&lt;a.length?g(a.at(0).windows):e("Nova not running."))(function(b){return h(0&lt;b.length?g(b.at(0).splitterGroups.at(0).splitterGroups.at(0).splitterGroups.at(0).groups.at(0)):
e("No windows open in Nova."))(function(c){var m=c.lists;return 0&lt;c.lists.length?h(g(m.at(0)))(function(f){f=l(f.staticTexts().map(function(n){return n.name()}));var p=encodeURI("file:///Users/"+f.join("/"));return g("["+(0&lt;f.length?f.slice(-1)[0]:void 0)+"]("+p+")")}):e("Editor &gt; Show Path Bar not chosen.")})}))}()})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>633698454.90628695</real>
				<key>ModificationDate</key>
				<real>633700281.50065506</real>
				<key>Name</key>
				<string>com.panic.Nova</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>5D689369-7240-4DDE-9FCB-AF5DFFFDE4F0</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Copy DEVONthink 3 URL as Markdown [title](link)
    // ( including any ?page=nn attribute in a content record)
    // For multiple selections outside content records,
    // copies several md links.

    // Rob Trew @2020
    // Ver 0.3

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt; {
        const
            think = Application('DEVONthink 3'),
            windows = think.thinkWindows,
            sa = Object.assign(Application.currentApplication(), {
                includeStandardAdditions: true
            });

        return either(
            msg =&gt; sa.displayNotification(msg, {
                withTitle: 'Copy reference URL'
            })
        )(
            url =&gt; (
                copyText(url),
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: url
                }),
                sa.displayNotification(url, {
                    withTitle: 'Reference URL copied.'
                }),
                url
            )
        )(
            bindLR(
                0 &lt; windows.length ? (
                    Right(windows.at(0))
                ) : Left('No windows open.')
            )(
                window =&gt; {
                    const record = window.contentRecord();
                    return null !== record ? (() =&gt; {
                        const
                            pageCount = record.pageCount(),
                            page = window.currentPage(),
                            hasPage = -1 !== page,
                            pageString = hasPage ? (
                                `?page=${page}`
                            ) : '',
                            title = record.name() + (
                                hasPage ? (
                                    ` p${page} of ${pageCount}`
                                ) : ''
                            );
                        return Right(
                            `[${title}]` + (
                                `(${record.referenceURL()}${pageString})`
                            )
                        );
                    })() : (() =&gt; {
                        const selections = think.selection();
                        return 0 &lt; selections.length ? (
                            Right(
                                selections.map(x =&gt; {
                                    const
                                        title = x.name(),
                                        url = x.referenceURL();
                                    return `[${title}](${url})`;
                                }).join('\n')
                            )
                        ) : Left('Nothing selected in DEVONthink.')
                    })();
                }
            ));
    };

    // ----------------------- JXA -----------------------

    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620239734.951316</real>
				<key>ModificationDate</key>
				<real>633948712.50211</real>
				<key>Name</key>
				<string>com.devon-technologies.think3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>BBE7FE30-0DC7-49C0-8D73-434731A9C810</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020
    
    return Application('HoudahSpot')
        .selection()
        .map(
            x =&gt; `[${x.name()}]` + (
                `(${encodeURI('file://' + x.path())})`
            )
        )
        .join('\n');
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>629131329.70978701</real>
				<key>ModificationDate</key>
				<real>629131410.09574103</real>
				<key>Name</key>
				<string>com.houdah.HoudahSpot4</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>92CEA724-340D-4A95-8EE4-71ED5A61CE53</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @ 2020

    // Copy Markdown Link to front document, URL, or resource.
    // Ver 0.09

    // Switched to running app-specific macros by UUID
    // fetched from a JSON dictionary stored in a 
    // uuidsForMDLink KM variable.
    
    // If this variable is not found, or a UUID retrieved
    // from it is not found, then the dictionary is regenerated.

    // The regeneration, which will happen on the first
    // run, but should only be needed thereafter when 
    // new sub-macros are added, will activate Keyboard Maestro.app

    // Normally use of the macro will, however, normally
    // bypass Keyboard Maestro.app and run through 
    // Keyboard Maestro Engine instead.

    ObjC.import('AppKit');

    const kmGroupName = 'MD link tools';

    // ---------------------- MAIN -----------------------
    // main :: IO ()
    const main = () =&gt; {
        const bundleID = frontAppBundleId();
        return either(
            msg =&gt; (
                alert('Copy as Markdown link')(msg),
                msg
            )
        )(
            mdLink =&gt; (
                copyText(mdLink),
                mdLink
            )
        )(
            bindLR(
                void 0 !== bundleID ? (
                    Right(bundleID)
                ) : Left(
                    'No active application detected'
                )
            )(
                bundleID =&gt; {
                    // ------------ BROWSER ? ------------
                    const fnBrowser = browserCode()[bundleID];
                    return Boolean(fnBrowser) ? (
                        fnBrowser(bundleID)
                    ) : (() =&gt; {
                        // ---- APP-SPECIFIC MACRO ? -----
                        const
                            kme = Application('Keyboard Maestro Engine'),
                            dctUUID = either(
                                msg =&gt; (
                                    console.log(
                                        'BundleID map had to be regenerated',
                                        msg
                                    ),
                                    // Regenerated UUID dictionary
                                    updatedUUIDMap()
                                )
                            )(
                                // UUID dictionary from existing
                                // KM Variable
                                dct =&gt; (
                                    console.log(
                                        'BundleID map found.'
                                    ),
                                    dct
                                )
                            )(
                                jsonParseLR(
                                    kme.getvariable('uuidsForMDLink')
                                )
                            ),
                            maybeUUID = dctUUID[bundleID];
                        return Boolean(maybeUUID) ? (
                            either(
                                // If the UUID wasn't found,
                                // then run a new one from an 
                                // updated dictionary.
                                msg =&gt; (
                                    console.log(msg),
                                    bindLR(
                                        doScriptLR(kme)(
                                            updatedUUIDMap()[bundleID]
                                        )
                                    )(
                                        // Link after use of alternate UUID
                                        _ =&gt; Right(kme.getvariable('mdLink'))
                                    )
                                )
                            )(
                                // Link read after execution with UUID
                                _ =&gt; Right(kme.getvariable('mdLink'))
                            )(
                                // Run macro with this UUID if possible.
                                doScriptLR(kme)(maybeUUID)
                            )
                        ) : appFrontWindowMDLinkLR(bundleID);
                    })();
                }
            )
        );
    };

    const browserCode = () =&gt; ({
        'com.apple.Safari': browserLinkLR,
        'com.google.Chrome': browserLinkLR
    });


    // doScriptLR :: UUID -&gt; Either String String
    const doScriptLR = kme =&gt;
        uuid =&gt; {
            try {
                return (
                    kme.doScript(uuid),
                    Right(uuid)
                );
            } catch (e) {
                return Left(
                    `Macro UUID :: ${uuid}\n\n${e.message}`
                );
            }
        };

    // -------------- BUNDLEID -&gt; UUID MAP ---------------

    // updatedUUIDMap :: IO () -&gt; { bundleID :: UUID }
    const updatedUUIDMap = () =&gt; {
        const
            macroGroupName = 'MD Link tools',
            mdLinkToolsGroups = Application(
                'Keyboard Maestro'
            ).macroGroups.where({
                name: macroGroupName
            });
        return either(
            alert('Copy as MD Link - Map bundle to UUID')
        )(
            dictUUIDs =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('uuidsForMDLink', {
                    to: JSON.stringify(
                        dictUUIDs, null, 2
                    )
                }),
                dictUUIDs
            )
        )(
            0 &lt; mdLinkToolsGroups.length ? (() =&gt; {
                const
                    instances = mdLinkToolsGroups.at(0)
                    .macros()
                    .flatMap(macro =&gt; {
                        const k = macro.name();
                        return k.includes('.') ? (
                            [
                                [k, macro.id()]
                            ]
                        ) : [];
                    });
                return Right(
                    instances.reduce(
                        (a, [bundle, uuid]) =&gt; Object.assign(
                            a, {
                                [bundle]: uuid
                            }
                        ), {}
                    )
                );
            })() : Left(
                `Macro group not found:\n\n\t${macroGroupName}`
            )
        );
    };


    // --------------------- BROWSERS ----------------------

    // browserLinkLR :: String -&gt; Either String IO String
    const browserLinkLR = bundleID =&gt; {
        const
            app = Application(bundleID),
            ws = app.windows;
        return bindLR(
            0 &lt; ws.length ? (
                Right(ws.at(0))
            ) : Left('No windows open in ' + bundleID)
        )(
            w =&gt; {
                const tabs = w.tabs;
                return 0 &lt; tabs.length ? (() =&gt; {
                    const
                        tab = w[
                            'com.apple.Safari' === bundleID ? (
                                'currentTab'
                            ) : 'activeTab'
                        ]();
                    return Right(
                        `[${tab.name()}](${tab.url()})`
                    );
                })() : Left(
                    'No open tabs in front window of ' + bundleID
                );
            }
        );
    };

    // ----------------------- JXA -----------------------

    // frontAppBundleId :: () -&gt; String
    const frontAppBundleId = () =&gt; {
        const uw = ObjC.unwrap;
        return uw(uw(
            $.NSWorkspace.sharedWorkspace.activeApplication
        ).NSApplicationBundleIdentifier);
    };

    // ------- DEFAULT - DOCUMENT OF FRONT WINDOW --------

    // appFrontWindowMDLinkLR :: String -&gt; Either String String
    const appFrontWindowMDLinkLR = bundleID =&gt; {
        const
            procs = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                })
            .applicationProcesses.where({
                bundleIdentifier: bundleID
            });
        return bindLR(
            bindLR(
                procs.length &gt; 0 ? (
                    Right(procs.at(0).windows)
                ) : Left('Application not found: ' + bundleID)
            )(ws =&gt; ws.length &gt; 0 ? (
                Right(ws.at(0))
            ) : Left(`No windows found for ${bundleID}`))
        )(w =&gt; {
            const
                uw = ObjC.unwrap,
                [winTitle, maybeDocURL] = map(
                    bundleID =&gt; uw(w.attributes.byName(bundleID).value())
                )(['AXTitle', 'AXDocument']);
            return Boolean(maybeDocURL) ? (
                Right(`[${winTitle}](${maybeDocURL})`)
            ) : Left(
                `Window '${winTitle}' of:\n\n\t${bundleID}` + [
                    '\n\nmay not be a document window.',
                    `\nConsider adding a macro named '${bundleID}'`,
                    `to the KM Group '${kmGroupName}'.`,
                    '\n(Or request such a macro, which should',
                    'save a [label](url) string) in the',
                    'KM variable "mdLink")',
                    `on the Keyboard Maestro forum).`
                ].join('\n')
            );
        });
    };

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // jsonParseLR :: String -&gt; Either String a
    const jsonParseLR = s =&gt; {
        // Either a message, or a JS value obtained
        // from a successful parse of s.
        try {
            return Right(JSON.parse(s));
        } catch (e) {
            return Left(
                `${e.message} (line:${e.line} col:${e.column})`
            );
        }
    };


    // map :: (a -&gt; b) -&gt; [a] -&gt; [b]
    const map = f =&gt;
        // The list obtained by applying f
        // to each element of xs.
        // (The image of xs under f).
        xs =&gt; xs.map(f);

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>DeviceID</key>
						<string>SOUNDEFFECTS</string>
						<key>MacroActionType</key>
						<string>PlaySound</string>
						<key>Path</key>
						<string>/System/Library/Sounds/Glass.aiff</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>Volume</key>
						<integer>48</integer>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>591010979.372293</real>
				<key>CustomIconData</key>
				<data>
				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
				AAAAAQBAAAABAgADAAAABAAADaQBAwADAAAAAQAFAAAB
				BgADAAAAAQACAAABCgADAAAAAQABAAABEQAEAAAAAQAA
				AAgBEgADAAAAAQABAAABFQADAAAAAQAEAAABFgADAAAA
				AQBAAAABFwAEAAAAAQAADMkBHAADAAAAAQABAAABKAAD
				AAAAAQACAAABPQADAAAAAQACAAABUgADAAAAAQABAAAB
				UwADAAAABAAADayHcwAHAAAH2AAADbQAABkwAAgACAAI
				AAgAAQABAAEAAQAAB9hhcHBsAiAAAG1udHJSR0IgWFla
				IAfZAAIAGQALABoAC2Fjc3BBUFBMAAAAAGFwcGwAAAAA
				AAAAAAAAAAAAAAAAAAD21gABAAAAANMtYXBwbAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAC2Rlc2MAAAEIAAAAb2RzY20AAAF4AAAF
				nGNwcnQAAAcUAAAAOHd0cHQAAAdMAAAAFHJYWVoAAAdg
				AAAAFGdYWVoAAAd0AAAAFGJYWVoAAAeIAAAAFHJUUkMA
				AAecAAAADmNoYWQAAAesAAAALGJUUkMAAAecAAAADmdU
				UkMAAAecAAAADmRlc2MAAAAAAAAAFEdlbmVyaWMgUkdC
				IFByb2ZpbGUAAAAAAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtbHVjAAAAAAAA
				AB8AAAAMc2tTSwAAACgAAAGEZGFESwAAAC4AAAGsY2FF
				UwAAACQAAAHadmlWTgAAACQAAAH+cHRCUgAAACYAAAIi
				dWtVQQAAACoAAAJIZnJGVQAAACgAAAJyaHVIVQAAACgA
				AAKaemhUVwAAABYAAALCbmJOTwAAACYAAALYY3NDWgAA
				ACIAAAL+aGVJTAAAAB4AAAMgaXRJVAAAACgAAAM+cm9S
				TwAAACQAAANmZGVERQAAACwAAAOKa29LUgAAABYAAAO2
				c3ZTRQAAACYAAALYemhDTgAAABYAAAPMamFKUAAAABoA
				AAPiZWxHUgAAACIAAAP8cHRQTwAAACYAAAQebmxOTAAA
				ACgAAAREZXNFUwAAACYAAAQedGhUSAAAACQAAARsdHJU
				UgAAACIAAASQZmlGSQAAACgAAASyaHJIUgAAACgAAATa
				cGxQTAAAACwAAAUCcnVSVQAAACIAAAUuYXJFRwAAACYA
				AAVQZW5VUwAAACYAAAV2AFYBYQBlAG8AYgBlAGMAbgD9
				ACAAUgBHAEIAIABwAHIAbwBmAGkAbABHAGUAbgBlAHIA
				ZQBsACAAUgBHAEIALQBiAGUAcwBrAHIAaQB2AGUAbABz
				AGUAUABlAHIAZgBpAGwAIABSAEcAQgAgAGcAZQBuAOgA
				cgBpAGMAQx6lAHUAIABoAOwAbgBoACAAUgBHAEIAIABD
				AGgAdQBuAGcAUABlAHIAZgBpAGwAIABSAEcAQgAgAEcA
				ZQBuAOkAcgBpAGMAbwQXBDAEMwQwBDsETAQ9BDgEOQAg
				BD8EQAQ+BEQEMAQ5BDsAIABSAEcAQgBQAHIAbwBmAGkA
				bAAgAGcA6QBuAOkAcgBpAHEAdQBlACAAUgBWAEIAwQBs
				AHQAYQBsAOEAbgBvAHMAIABSAEcAQgAgAHAAcgBvAGYA
				aQBskBp1KAAgAFIARwBCACCCcl9pY8+P8ABHAGUAbgBl
				AHIAaQBzAGsAIABSAEcAQgAtAHAAcgBvAGYAaQBsAE8A
				YgBlAGMAbgD9ACAAUgBHAEIAIABwAHIAbwBmAGkAbAXk
				BegF1QXkBdkF3AAgAFIARwBCACAF2wXcBdwF2QBQAHIA
				bwBmAGkAbABvACAAUgBHAEIAIABnAGUAbgBlAHIAaQBj
				AG8AUAByAG8AZgBpAGwAIABSAEcAQgAgAGcAZQBuAGUA
				cgBpAGMAQQBsAGwAZwBlAG0AZQBpAG4AZQBzACAAUgBH
				AEIALQBQAHIAbwBmAGkAbMd8vBgAIABSAEcAQgAg1QS4
				XNMMx3xmbpAaACAAUgBHAEIAIGPPj/Blh072TgCCLAAg
				AFIARwBCACAw1zDtMNUwoTCkMOsDkwO1A70DuQO6A8wA
				IAPAA8EDvwPGA68DuwAgAFIARwBCAFAAZQByAGYAaQBs
				ACAAUgBHAEIAIABnAGUAbgDpAHIAaQBjAG8AQQBsAGcA
				ZQBtAGUAZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAZQBs
				DkIOGw4jDkQOHw4lDkwAIABSAEcAQgAgDhcOMQ5IDicO
				RA4bAEcAZQBuAGUAbAAgAFIARwBCACAAUAByAG8AZgBp
				AGwAaQBZAGwAZQBpAG4AZQBuACAAUgBHAEIALQBwAHIA
				bwBmAGkAaQBsAGkARwBlAG4AZQByAGkBDQBrAGkAIABS
				AEcAQgAgAHAAcgBvAGYAaQBsAFUAbgBpAHcAZQByAHMA
				YQBsAG4AeQAgAHAAcgBvAGYAaQBsACAAUgBHAEIEHgQx
				BEkEOAQ5ACAEPwRABD4ERAQ4BDsETAAgAFIARwBCBkUG
				RAZBACAGKgY5BjEGSgZBACAAUgBHAEIAIAYnBkQGOQYn
				BkUARwBlAG4AZQByAGkAYwAgAFIARwBCACAAUAByAG8A
				ZgBpAGwAZXRleHQAAAAAQ29weXJpZ2h0IDIwMDcgQXBw
				bGUgSW5jLiwgYWxsIHJpZ2h0cyByZXNlcnZlZC4AWFla
				IAAAAAAAAPNSAAEAAAABFs9YWVogAAAAAAAAdE0AAD3u
				AAAD0FhZWiAAAAAAAABadQAArHMAABc0WFlaIAAAAAAA
				ACgaAAAVnwAAuDZjdXJ2AAAAAAAAAAEBzQAAc2YzMgAA
				AAAAAQxCAAAF3v//8yYAAAeSAAD9kf//+6L///2jAAAD
				3AAAwGyAACBQOCQISwcUGmFG8lw0ohaIBeCxOKRWLReM
				RmKuqOOlax9XpeRJFtyVsRkBSkBGaWG88y89hWZBN9TU
				AP+cRqdTueT2BAGgAADUMAOujO1D0lCpqmJF/U9/QSFG
				k4o2rI6oAB91ufV2vV+dgWxACVAA52c5SJLo+DiUULu4
				MYKXMI1t92C8Xm9RSxAUAOzAO8i4MdVZGpmpmZ84u943
				HY4D5EAWpNNfLOgM5kLzh/4+LAO/ADJZ2dAGcgB7vXPR
				igAEAOfYOl37PSauKgQBgB+txrAACshigAAgKdggD7ol
				FeBAQCbaNbN37XnQQAgoGAB6ptFAAImxBb6dgEJ8d6NJ
				qTcFg6BafpwXodL28IFAsAPZPpAABA0H3fcSLqim4POu
				exjme9D1Ju+D4ve+LqPm+r7vy/b+oxAB/wE+sCwO9cFP
				bBkGp/B77Pw/T+AK/yLQtDECQMf70w5ECBw/EDqvpEcJ
				RNFCKxVAcNRdBD2RBGcGxrCESQnE8KvXFcfRfBMYoFIb
				4yLG8Swo/8lx7FsnSDBspPbKkIytJMsQDLUNyfKEvunM
				MjxzJUzQzLcgQ66c1rAAoDJ+10HASAB6E6/AJDIPErxS
				9YPga+pmN7F1FTSgh/H4gR+H6x87tKgR+n04RjF44SUp
				+/wEz8fRalcAAGkaUwAAHHSKQsDIEAAfBIEYm4HgjTUA
				H0u5/gyDabhQGL1wAvFMJ2f7cN0PI0VSShW1aBT/AFPh
				+tIfNjK6A7/AHPh6Kif4Ouue5Ok2AB/BwI1NU4vNkPC1
				x+uZdA5jCAAHkyWSyIrV6fW09YLgU1BOkvdAiCigR7nt
				S7aMfUJ/gG5p+jlewHk0WNQMbC2AtQThLXQIop4S1TbX
				esGHgG3IBDkMAAAUTRZuEgl+0Om4Kz8fBNEm5DlPrkkP
				Ya+NQ1a3IBjjloEE3mLhzgf4KVmfBMPwfomC1hOFzVoM
				Y6HaoAAIOAvgABBOlsgUUQsCTjnwS1bn6KGwtRrEoRlr
				W5rJV4DDiLyhE8XCbglPR8Em7Z+imMWr7simTQbodJNE
				OwzAAfgaBw3QvjdxHEosyxrswzTOc1PbltCfzSH6u/Qo
				G1rXtiwzEIUxTGdT2adsi47KLat64rmCi6q52ngIGvq/
				sCwYih0qSFKqq6srt4PE+GsqzjmtKREfmaVJYMyXJgmQ
				Kpom3QeevXVqHPSjHWpClKYTSnKyjHcqmhiHIgCyJfGv
				COHUjyQLUkhJiKkBAAARAQAAAwAAAAEAIAAAAQEAAwAA
				AAEAIAAAAQIAAwAAAAQAABoCAQMAAwAAAAEABQAAAQYA
				AwAAAAEAAgAAAQoAAwAAAAEAAQAAAREABAAAAAEAABWM
				ARIAAwAAAAEAAQAAARUAAwAAAAEABAAAARYAAwAAAAEA
				IAAAARcABAAAAAEAAAOjARwAAwAAAAEAAQAAASgAAwAA
				AAEAAgAAAT0AAwAAAAEAAgAAAVIAAwAAAAEAAQAAAVMA
				AwAAAAQAABoKh3MABwAAB9gAABoSAAAjuAAIAAgACAAI
				AAEAAQABAAEAAAfYYXBwbAIgAABtbnRyUkdCIFhZWiAH
				2QACABkACwAaAAthY3NwQVBQTAAAAABhcHBsAAAAAAAA
				AAAAAAAAAAAAAAAA9tYAAQAAAADTLWFwcGwAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAtkZXNjAAABCAAAAG9kc2NtAAABeAAABZxj
				cHJ0AAAHFAAAADh3dHB0AAAHTAAAABRyWFlaAAAHYAAA
				ABRnWFlaAAAHdAAAABRiWFlaAAAHiAAAABRyVFJDAAAH
				nAAAAA5jaGFkAAAHrAAAACxiVFJDAAAHnAAAAA5nVFJD
				AAAHnAAAAA5kZXNjAAAAAAAAABRHZW5lcmljIFJHQiBQ
				cm9maWxlAAAAAAAAAAAAAAAUR2VuZXJpYyBSR0IgUHJv
				ZmlsZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAbWx1YwAAAAAAAAAf
				AAAADHNrU0sAAAAoAAABhGRhREsAAAAuAAABrGNhRVMA
				AAAkAAAB2nZpVk4AAAAkAAAB/nB0QlIAAAAmAAACInVr
				VUEAAAAqAAACSGZyRlUAAAAoAAACcmh1SFUAAAAoAAAC
				mnpoVFcAAAAWAAACwm5iTk8AAAAmAAAC2GNzQ1oAAAAi
				AAAC/mhlSUwAAAAeAAADIGl0SVQAAAAoAAADPnJvUk8A
				AAAkAAADZmRlREUAAAAsAAADimtvS1IAAAAWAAADtnN2
				U0UAAAAmAAAC2HpoQ04AAAAWAAADzGphSlAAAAAaAAAD
				4mVsR1IAAAAiAAAD/HB0UE8AAAAmAAAEHm5sTkwAAAAo
				AAAERGVzRVMAAAAmAAAEHnRoVEgAAAAkAAAEbHRyVFIA
				AAAiAAAEkGZpRkkAAAAoAAAEsmhySFIAAAAoAAAE2nBs
				UEwAAAAsAAAFAnJ1UlUAAAAiAAAFLmFyRUcAAAAmAAAF
				UGVuVVMAAAAmAAAFdgBWAWEAZQBvAGIAZQBjAG4A/QAg
				AFIARwBCACAAcAByAG8AZgBpAGwARwBlAG4AZQByAGUA
				bAAgAFIARwBCAC0AYgBlAHMAawByAGkAdgBlAGwAcwBl
				AFAAZQByAGYAaQBsACAAUgBHAEIAIABnAGUAbgDoAHIA
				aQBjAEMepQB1ACAAaADsAG4AaAAgAFIARwBCACAAQwBo
				AHUAbgBnAFAAZQByAGYAaQBsACAAUgBHAEIAIABHAGUA
				bgDpAHIAaQBjAG8EFwQwBDMEMAQ7BEwEPQQ4BDkAIAQ/
				BEAEPgREBDAEOQQ7ACAAUgBHAEIAUAByAG8AZgBpAGwA
				IABnAOkAbgDpAHIAaQBxAHUAZQAgAFIAVgBCAMEAbAB0
				AGEAbADhAG4AbwBzACAAUgBHAEIAIABwAHIAbwBmAGkA
				bJAadSgAIABSAEcAQgAggnJfaWPPj/AARwBlAG4AZQBy
				AGkAcwBrACAAUgBHAEIALQBwAHIAbwBmAGkAbABPAGIA
				ZQBjAG4A/QAgAFIARwBCACAAcAByAG8AZgBpAGwF5AXo
				BdUF5AXZBdwAIABSAEcAQgAgBdsF3AXcBdkAUAByAG8A
				ZgBpAGwAbwAgAFIARwBCACAAZwBlAG4AZQByAGkAYwBv
				AFAAcgBvAGYAaQBsACAAUgBHAEIAIABnAGUAbgBlAHIA
				aQBjAEEAbABsAGcAZQBtAGUAaQBuAGUAcwAgAFIARwBC
				AC0AUAByAG8AZgBpAGzHfLwYACAAUgBHAEIAINUEuFzT
				DMd8Zm6QGgAgAFIARwBCACBjz4/wZYdO9k4AgiwAIABS
				AEcAQgAgMNcw7TDVMKEwpDDrA5MDtQO9A7kDugPMACAD
				wAPBA78DxgOvA7sAIABSAEcAQgBQAGUAcgBmAGkAbAAg
				AFIARwBCACAAZwBlAG4A6QByAGkAYwBvAEEAbABnAGUA
				bQBlAGUAbgAgAFIARwBCAC0AcAByAG8AZgBpAGUAbA5C
				DhsOIw5EDh8OJQ5MACAAUgBHAEIAIA4XDjEOSA4nDkQO
				GwBHAGUAbgBlAGwAIABSAEcAQgAgAFAAcgBvAGYAaQBs
				AGkAWQBsAGUAaQBuAGUAbgAgAFIARwBCAC0AcAByAG8A
				ZgBpAGkAbABpAEcAZQBuAGUAcgBpAQ0AawBpACAAUgBH
				AEIAIABwAHIAbwBmAGkAbABVAG4AaQB3AGUAcgBzAGEA
				bABuAHkAIABwAHIAbwBmAGkAbAAgAFIARwBCBB4EMQRJ
				BDgEOQAgBD8EQAQ+BEQEOAQ7BEwAIABSAEcAQgZFBkQG
				QQAgBioGOQYxBkoGQQAgAFIARwBCACAGJwZEBjkGJwZF
				AEcAZQBuAGUAcgBpAGMAIABSAEcAQgAgAFAAcgBvAGYA
				aQBsAGV0ZXh0AAAAAENvcHlyaWdodCAyMDA3IEFwcGxl
				IEluYy4sIGFsbCByaWdodHMgcmVzZXJ2ZWQuAFhZWiAA
				AAAAAADzUgABAAAAARbPWFlaIAAAAAAAAHRNAAA97gAA
				A9BYWVogAAAAAAAAWnUAAKxzAAAXNFhZWiAAAAAAAAAo
				GgAAFZ8AALg2Y3VydgAAAAAAAAABAc0AAHNmMzIAAAAA
				AAEMQgAABd7///MmAAAHkgAA/ZH///ui///9owAAA9wA
				AMBsgAAgQAD0FESOhCUIsLJL+h0DiERiUTiACiwAXcZW
				5yjhscUfbwgkQjVklWYtlApe0riktl0uBUxADTmjXKk3
				JqrnS4J09I8re0vgYGA4Af4FAsRAL6fMCfb7oQAmIKAC
				yqy5eNZf8Of1RAADpL+V6kAAHZbLgQBgT9JRNAD+HxFg
				T6fVRiwCADvvT/r0Cf4Jqj/MZRAAOUq9iL5QpuAD7OqG
				gT1el9gV6d98vt/wJpK+FT63xKJOmNOKAyOTymWzFezV
				Gzme0EQfOi0mmAGSyl5vdRsFGBgLoxlKeFTq1xKNO+NO
				SBgT0ecCfj9qOqqLXZ4AANqgSK5gLV7IiL6OJYAD8Kpe
				owIBlGEQnv2riXUigGA1vTyTAALPSFr71qC/Ikfy1H8D
				4HAAfBMEwt4eiOpy6oo+SXNaAJKEO/I6EU7AAOkiB/gq
				qh8E0SkNiSKqBHuerpt2oTsoEwCvkoyAEjmRKjAkop8E
				2SUNiYLKBHs1C+qyeKtoeqMWgABCigISsan+DAMw2Kgw
				x/FLKLuACdFWnifKA3IAKIgbMLo3Kpqqq6RBAkiTJQFq
				VJZL8vzMmhppsnCIIKDyDoShYiobI04opLCMl2jaOo+c
				RvICABEBAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgAD
				AAAABAAAJIoBAwADAAAAAQAFAAABBgADAAAAAQACAAAB
				CgADAAAAAQABAAABEQAEAAAAAQAAIeoBEgADAAAAAQAB
				AAABFQADAAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAA
				AQAAAc4BHAADAAAAAQABAAABKAADAAAAAQACAAABPQAD
				AAAAAQACAAABUgADAAAAAQABAAABUwADAAAABAAAJJKH
				cwAHAAAH2AAAJJoAAAAAAAgACAAIAAgAAQABAAEAAQAA
				B9hhcHBsAiAAAG1udHJSR0IgWFlaIAfZAAIAGQALABoA
				C2Fjc3BBUFBMAAAAAGFwcGwAAAAAAAAAAAAAAAAAAAAA
				AAD21gABAAAAANMtYXBwbAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2Rl
				c2MAAAEIAAAAb2RzY20AAAF4AAAFnGNwcnQAAAcUAAAA
				OHd0cHQAAAdMAAAAFHJYWVoAAAdgAAAAFGdYWVoAAAd0
				AAAAFGJYWVoAAAeIAAAAFHJUUkMAAAecAAAADmNoYWQA
				AAesAAAALGJUUkMAAAecAAAADmdUUkMAAAecAAAADmRl
				c2MAAAAAAAAAFEdlbmVyaWMgUkdCIFByb2ZpbGUAAAAA
				AAAAAAAAABRHZW5lcmljIFJHQiBQcm9maWxlAAAAAAAA
				AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				AAAAAAAAAAAAAABtbHVjAAAAAAAAAB8AAAAMc2tTSwAA
				ACgAAAGEZGFESwAAAC4AAAGsY2FFUwAAACQAAAHadmlW
				TgAAACQAAAH+cHRCUgAAACYAAAIidWtVQQAAACoAAAJI
				ZnJGVQAAACgAAAJyaHVIVQAAACgAAAKaemhUVwAAABYA
				AALCbmJOTwAAACYAAALYY3NDWgAAACIAAAL+aGVJTAAA
				AB4AAAMgaXRJVAAAACgAAAM+cm9STwAAACQAAANmZGVE
				RQAAACwAAAOKa29LUgAAABYAAAO2c3ZTRQAAACYAAALY
				emhDTgAAABYAAAPMamFKUAAAABoAAAPiZWxHUgAAACIA
				AAP8cHRQTwAAACYAAAQebmxOTAAAACgAAAREZXNFUwAA
				ACYAAAQedGhUSAAAACQAAARsdHJUUgAAACIAAASQZmlG
				SQAAACgAAASyaHJIUgAAACgAAATacGxQTAAAACwAAAUC
				cnVSVQAAACIAAAUuYXJFRwAAACYAAAVQZW5VUwAAACYA
				AAV2AFYBYQBlAG8AYgBlAGMAbgD9ACAAUgBHAEIAIABw
				AHIAbwBmAGkAbABHAGUAbgBlAHIAZQBsACAAUgBHAEIA
				LQBiAGUAcwBrAHIAaQB2AGUAbABzAGUAUABlAHIAZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAOgAcgBpAGMAQx6lAHUA
				IABoAOwAbgBoACAAUgBHAEIAIABDAGgAdQBuAGcAUABl
				AHIAZgBpAGwAIABSAEcAQgAgAEcAZQBuAOkAcgBpAGMA
				bwQXBDAEMwQwBDsETAQ9BDgEOQAgBD8EQAQ+BEQEMAQ5
				BDsAIABSAEcAQgBQAHIAbwBmAGkAbAAgAGcA6QBuAOkA
				cgBpAHEAdQBlACAAUgBWAEIAwQBsAHQAYQBsAOEAbgBv
				AHMAIABSAEcAQgAgAHAAcgBvAGYAaQBskBp1KAAgAFIA
				RwBCACCCcl9pY8+P8ABHAGUAbgBlAHIAaQBzAGsAIABS
				AEcAQgAtAHAAcgBvAGYAaQBsAE8AYgBlAGMAbgD9ACAA
				UgBHAEIAIABwAHIAbwBmAGkAbAXkBegF1QXkBdkF3AAg
				AFIARwBCACAF2wXcBdwF2QBQAHIAbwBmAGkAbABvACAA
				UgBHAEIAIABnAGUAbgBlAHIAaQBjAG8AUAByAG8AZgBp
				AGwAIABSAEcAQgAgAGcAZQBuAGUAcgBpAGMAQQBsAGwA
				ZwBlAG0AZQBpAG4AZQBzACAAUgBHAEIALQBQAHIAbwBm
				AGkAbMd8vBgAIABSAEcAQgAg1QS4XNMMx3xmbpAaACAA
				UgBHAEIAIGPPj/Blh072TgCCLAAgAFIARwBCACAw1zDt
				MNUwoTCkMOsDkwO1A70DuQO6A8wAIAPAA8EDvwPGA68D
				uwAgAFIARwBCAFAAZQByAGYAaQBsACAAUgBHAEIAIABn
				AGUAbgDpAHIAaQBjAG8AQQBsAGcAZQBtAGUAZQBuACAA
				UgBHAEIALQBwAHIAbwBmAGkAZQBsDkIOGw4jDkQOHw4l
				DkwAIABSAEcAQgAgDhcOMQ5IDicORA4bAEcAZQBuAGUA
				bAAgAFIARwBCACAAUAByAG8AZgBpAGwAaQBZAGwAZQBp
				AG4AZQBuACAAUgBHAEIALQBwAHIAbwBmAGkAaQBsAGkA
				RwBlAG4AZQByAGkBDQBrAGkAIABSAEcAQgAgAHAAcgBv
				AGYAaQBsAFUAbgBpAHcAZQByAHMAYQBsAG4AeQAgAHAA
				cgBvAGYAaQBsACAAUgBHAEIEHgQxBEkEOAQ5ACAEPwRA
				BD4ERAQ4BDsETAAgAFIARwBCBkUGRAZBACAGKgY5BjEG
				SgZBACAAUgBHAEIAIAYnBkQGOQYnBkUARwBlAG4AZQBy
				AGkAYwAgAFIARwBCACAAUAByAG8AZgBpAGwAZXRleHQA
				AAAAQ29weXJpZ2h0IDIwMDcgQXBwbGUgSW5jLiwgYWxs
				IHJpZ2h0cyByZXNlcnZlZC4AWFlaIAAAAAAAAPNSAAEA
				AAABFs9YWVogAAAAAAAAdE0AAD3uAAAD0FhZWiAAAAAA
				AABadQAArHMAABc0WFlaIAAAAAAAACgaAAAVnwAAuDZj
				dXJ2AAAAAAAAAAEBzQAAc2YzMgAAAAAAAQxCAAAF3v//
				8yYAAAeSAAD9kf//+6L///2jAAAD3AAAwGw=
				</data>
				<key>ModificationDate</key>
				<real>634776880.79479098</real>
				<key>Name</key>
				<string>Copy as Markdown link</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>46</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>2304</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>712D1DA3-9A39-45C2-95E5-7A375714D757</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.apple.iCal</string>
							<key>Name</key>
							<string>Calendar</string>
							<key>NewFile</key>
							<string>/System/Applications/Calendar.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until clipboard has text</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Calendar link'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(k =&gt; bindLR(
                clipOfTypeLR('public.url')
            )(v =&gt; Right(`[${k}](${v})`)))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ----------------- GENERAL FUNCTIONS -----------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620246382.12232697</real>
				<key>ModificationDate</key>
				<real>622376137.18323398</real>
				<key>Name</key>
				<string>com.apple.iCal</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>544AE8B8-2115-48E0-93DE-C8EA202C773F</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // com.panic.Transmit
    // vs App Store build:
    // com.panic.transmit.mas

    // main :: IO ()
    const main = () =&gt; {
        const
            transmit = Application('Transmit'),
            ds = transmit.documents;
        return either(
            // Notification
            msg =&gt; msg
        )(
            link =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: link
                }),
                link
            )
        )(bindLR(
            0 &lt; ds.length ? (
                Right(ds.at(0))
            ) : Left('No documents open in Transmit')
        )(doc =&gt; {
            const tabs = doc.tabs;
            return bindLR(
                0 &lt; tabs.length ? (
                    Right(doc.currentTab())
                ) : Left(
                    'No tabs found for document :: doc.name()'
                )
            )(tab =&gt; {
                const fbs = tab.fileBrowsers;
                return bindLR(
                    0 &lt; fbs.length ? (
                        Right(fbs.at(0))
                    ) : Left(
                        'No file browsers found for current tab.'
                    )
                )(fb =&gt; {
                    const selns = fb.selectedBrowserItems;
                    return bindLR(
                        0 &lt; selns.length ? (
                            Right(selns.at(0))
                        ) : Left('Nothing selected in front tab')
                    )(x =&gt; Right(
                        `[${x.name()}]` + (
                            `(${encodeURI('file://' + x.path())})`
                        )
                    ));
                });
            });
        }));
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628543401.21383905</real>
				<key>ModificationDate</key>
				<real>628543509.088274</real>
				<key>Name</key>
				<string>com.panic.Transmit</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>8E20DD40-B180-490C-A4BD-E248EF417FA2</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC6YAAAAKwAAAAEA
						AACQAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bH0Ke1xjb2xvcnRibDtccmVkMjU1
						XGdyZWVuMjU1XGJsdWUyNTU7fQp7
						XCpcZXhwYW5kZWRjb2xvcnRibDs7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAlGV9X7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Tested for Soulver 3</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Sheet</string>
							<string>Copy Link to Sheet</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>app.soulver.mac</string>
							<key>Name</key>
							<string>Soulver 3</string>
							<key>NewFile</key>
							<string>/Applications/Soulver 3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until text clipboard not empty</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdURL</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    const
        bundleID = 'app.soulver.mac',
        kme = Application(
            'Keyboard Maestro Engine'
        ),
        kmVar = k =&gt; kme.getvariable(k),
        se = (
            Application('app.soulver.mac').activate(),
            Application('System Events')
        ),
        procs = se.applicationProcesses.where({
            name: 'Soulver 3'
        }),
        sheetName = 0 &lt; procs.length ? (
            procs.at(0).windows.at(0).name()
        ) : 'Soulver 3 sheet name not found.',
        link = `[${sheetName}](${kmVar('mdURL')})`;

    return (
        kme.setvariable('mdLink', {
            to: link
        }),
        link
    );
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string></string>
						<key>Subtitle</key>
						<string>%Variable%mdLink%</string>
						<key>Text</key>
						<string></string>
						<key>Title</key>
						<string>Copy as Markdown Link</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631732621.41446495</real>
				<key>ModificationDate</key>
				<real>631734136.49643195</real>
				<key>Name</key>
				<string>app.soulver.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>26E5498B-A75A-4ED5-9CEC-8FEA37065470</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // main :: IO ()
    const main = () =&gt; {
        const
            op = Application('OmniPlan'),
            wins = op.windows,
            version = last(op.id());

        return either(
            // A user message,
            alert('MD link')
        )(
            // or a Markdown link.
            x =&gt; x
        )(
            bindLR(
                0 &lt; wins.length ? (
                    Right(wins.at(0))
                ) : Left(
                    `No documents open in OmniPlan ${version}.`
                )
            )(window =&gt; {
                const
                    doc = window.document,
                    fp = Path(doc.file()).toString(),
                    opURL = encodeURI(`omniplan://localhost${fp}`),
                    fileURL = encodeURI('file://' + fp),
                    selns = window.selectedTasks(),
                    taskNames = selns.map(x =&gt; x.name())
                    .join(','),
                    taskIds = selns.map(x =&gt; x.id())
                    .join(',%2520');
                return Right(
                    0 &lt; selns.length ? (
                        `[${taskNames}](${opURL}/task/${taskIds})`
                    ) : `[${doc.name()}](${fileURL})`
                );
            })
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // last :: [a] -&gt; a
    const last = xs =&gt; (
        // The last item of a list.
        ys =&gt; 0 &lt; ys.length ? (
            ys.slice(-1)[0]
        ) : undefined
    )(list(xs));

    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>629071910.84008896</real>
				<key>ModificationDate</key>
				<real>629072217.68619704</real>
				<key>Name</key>
				<string>com.omnigroup.OmniPlan3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>14FA415E-F1E6-4991-B9FD-A319D21ACDA7</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Note</string>
							<string>Copy Note Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.happenapps.Quiver</string>
							<key>Name</key>
							<string>Quiver</string>
							<key>NewFile</key>
							<string>/Applications/Quiver.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020

    ObjC.import('AppKit')

    // main :: IO ()
    const main = () =&gt;
        either(alert('Quiver'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.html')
            )(s =&gt; Right(
                `[${s.slice(63, -4)}](${s.slice(9, 61)})`
            ))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ---------------------- GENERAL ----------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620228833.87620103</real>
				<key>ModificationDate</key>
				<real>629107751.63594604</real>
				<key>Name</key>
				<string>com.happenapps.Quiver</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>0461A380-1770-4E6C-AD05-76606C37D343</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Either an alert message or MD links(s) for any 
    // OmniFocus 3 selections
    // Placed in a Keyboard Maestro variable
    // with the name 'mdLink'

    const main = () =&gt; {
        const
            focus = Application('OmniFocus'),
            ds = focus.documents;
        return either(
            msg =&gt; (
                alert('MD Link')(msg),
                ''
            )
        )(s =&gt; (
            Application('Keyboard Maestro Engine')
            .setvariable('mdLink', {
                to: s
            }),
            s
        ))(
            bindLR(
                0 &lt; ds.length ? (
                    Right(ds.at(0))
                ) : Left('No OmniFocus documents found.')
            )(doc =&gt; {
                const ws = doc.documentWindows;
                return bindLR(
                    0 &lt; ws.length ? (
                        Right(ws.at(0))
                    ) : Left('No document window found.')
                )(w =&gt; {
                    const
                        mainSelns = w.content.selectedTrees,
                        panel = 0 &lt; mainSelns.length ? (
                            mainSelns
                        ) : w.sidebar.selectedTrees;
                    return 0 &lt; panel.length ? (
                        Right(
                            panel().map(
                                x =&gt; `[${x.name()}]` + (
                                    `(omnifocus:///task/${x.id()})`
                                )
                            ).join('\n')
                        )
                    ) : Left('Nothing selected in OmniFocus.');
                })
            })
        )
    };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // MAIN --
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628968821.703493</real>
				<key>ModificationDate</key>
				<real>628975201.57141995</real>
				<key>Name</key>
				<string>com.omnigroup.OmniFocus3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>807CFEC6-5B7A-4A79-BDD0-BB4F6506B8CE</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // MD link to file selected in Obsidian v. 0.10.1
    
    // Rob Trew @2020
    // Ver 0.1

    // main :: IO ()
    const main = () =&gt; {
        const
            fpFolder = '~/Library/Application Support/Obsidian',
            fileName = 'obsidian.json',
            fpFullPath = combine(fpFolder)(fileName);

        const
            kme = Application('Keyboard Maestro Engine'),
            windowTitle = (
                activateNamedApp(kme)('Obsidian'),
                frontWindowName(kme)('windowName')
            );

        return either(
            alert('Copy as MD Link')
        )(
            mdLink =&gt; kme.setvariable('mdLink', {to: mdLink})
        )(
            bindLR(
                windowTitle.includes(' - ') ? (
                    Right(windowTitle.split(' - ')[0])
                ) : Left('Obsidian window title not found')
            )(vaultName =&gt; bindLR(
                doesDirectoryExist(fpFolder) ? (
                    Right(fpFullPath)
                ) : Left(`Folder not found :: ${fpFolder}`)
            )(fp =&gt; bindLR(
                doesFileExist(fp) ? (
                    readFileLR(fp)
                ) : Left(`File not found :: ${fp}`)
            )(txt =&gt; bindLR(
                jsonParseLR(txt)
            )(dct =&gt; bindLR(
                Boolean(dct.vaults) ? (() =&gt; {
                    const
                        vaults = dct.vaults,
                        ks = Object.keys(vaults),
                        matchingVaults = ks.filter(
                            k =&gt; {
                                const vault = vaults[k];
                                return Boolean(vault.open) &amp;&amp; (
                                    vault.path.endsWith(vaultName)
                                );
                            }
                        ),
                        intMatches = matchingVaults.length;
                    return 0 &lt; intMatches ? (
                        1 &lt; intMatches ? (
                            Left(
                                'Ambiguous: two open vaults ' &amp; (
                                    `named ${vaultName}.`
                                )
                            )
                        ) : Right(
                            Tuple(ks[0])(
                                vaults[ks[0]].path
                            )
                        )
                    ) : Left(
                        `No vault matches window name ${vaultName}`
                    );
                })() : Left(`No vaults listed in ${fp}`)
            )(tpl =&gt; {
                const
                    dataFolder = combine(tpl[1])(
                        '.obsidian'
                    );
                return bindLR(
                    doesDirectoryExist(dataFolder) ? (
                        Right([tpl[0], dataFolder])
                    ) : Left(
                        `Folder not found :: ${dataFolder}`
                    )
                )(([vaultID, fpObsidian]) =&gt; bindLR(
                    readFileLR(
                        combine(fpObsidian)('workspace')
                    )
                )(txt =&gt; bindLR(
                    jsonParseLR(txt)
                )(dct =&gt; {
                    const mru = dct.lastOpenFiles;
                    return 0 &lt; mru.length ? (
                        Right(
                            `[${mru[0]}](` + (
                                `obsidian://open?vault=${vaultID}&amp;` + (
                                    `file=${encodeURIComponent(mru[0])})`
                                )
                            )
                        )
                    ) : Left('Last opened file not found.');
                })));
            })))))
        );
    };

    // ---------------- KEYBOARD MAESTRO -----------------

    // frontWindowName :: Application -&gt; String -&gt; String
    const frontWindowName = kme =&gt;
        kmVarName =&gt; (
            kme.doScript(
                `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SetVariableToText&lt;/string&gt;
                &lt;key&gt;Text&lt;/key&gt;
                &lt;string&gt;%FrontWindowName%&lt;/string&gt;
                &lt;key&gt;Variable&lt;/key&gt;
                &lt;string&gt;${kmVarName}&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`
            ),
            kme.getvariable(kmVarName)
        );

    // activateNamedApp :: Application -&gt; String -&gt; IO ()
    const activateNamedApp = kme =&gt;
        appName =&gt; kme.doScript(
            `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;AllWindows&lt;/key&gt;
                &lt;true/&gt;
                &lt;key&gt;AlreadyActivatedActionType&lt;/key&gt;
                &lt;string&gt;Normal&lt;/string&gt;
                &lt;key&gt;Application&lt;/key&gt;
                &lt;dict&gt;
                    &lt;key&gt;BundleIdentifier&lt;/key&gt;
                    &lt;string&gt;md.obsidian&lt;/string&gt;
                    &lt;key&gt;Name&lt;/key&gt;
                    &lt;string&gt;${appName}&lt;/string&gt;
                    &lt;key&gt;NewFile&lt;/key&gt;
                    &lt;string&gt;/Applications/Obsidian.app&lt;/string&gt;
                &lt;/dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;ActivateApplication&lt;/string&gt;
                &lt;key&gt;ReopenWindows&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;TimeOutAbortsMacro&lt;/key&gt;
                &lt;true/&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`
        );


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK',
                    withIcon: sa.pathToResource('Obsidian.icns', {
                        inBundle: 'Applications/Obsidian.app'
                    })
                }),
                s
            );
        };

    // doesDirectoryExist :: FilePath -&gt; IO Bool
    const doesDirectoryExist = fp =&gt; {
        const ref = Ref();
        return $.NSFileManager.defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp)
                .stringByStandardizingPath, ref
            ) &amp;&amp; ref[0];
    };

    // doesFileExist :: FilePath -&gt; IO Bool
    const doesFileExist = fp =&gt; {
        const ref = Ref();
        return $.NSFileManager.defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp)
                .stringByStandardizingPath, ref
            ) &amp;&amp; 1 !== ref[0];
    };

    // readFileLR :: FilePath -&gt; Either String IO String
    const readFileLR = fp =&gt; {
        // Either a message or the contents of any
        // text file at the given filepath.
        const
            e = $(),
            ns = $.NSString
            .stringWithContentsOfFileEncodingError(
                $(fp).stringByStandardizingPath,
                $.NSUTF8StringEncoding,
                e
            );
        return ns.isNil() ? (
            Left(ObjC.unwrap(e.localizedDescription))
        ) : Right(ObjC.unwrap(ns));
    };

    // --------------------- GENERIC ---------------------
    // https: //github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // combine (&lt;/&gt;) :: FilePath -&gt; FilePath -&gt; FilePath
    const combine = fp =&gt;
        // Two paths combined with a path separator. 
        // Just the second path if that starts 
        // with a path separator.
        fp1 =&gt; Boolean(fp) &amp;&amp; Boolean(fp1) ? (
            '/' === fp1.slice(0, 1) ? (
                fp1
            ) : '/' === fp.slice(-1) ? (
                fp + fp1
            ) : fp + '/' + fp1
        ) : fp + fp1;


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // jsonParseLR :: String -&gt; Either String a
    const jsonParseLR = s =&gt; {
        // Either a message, or a JS value obtained
        // from a successful parse of s.
        try {
            return Right(JSON.parse(s));
        } catch (e) {
            return Left(
                `${e.message} (line:${e.line} col:${e.column})`
            );
        }
    };

    // MAIN --
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>630955437.86829698</real>
				<key>ModificationDate</key>
				<real>630955964.35114396</real>
				<key>Name</key>
				<string>md.obsidian</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>0CF6AA0F-24F5-4C34-B309-B4033930EBC2</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020

    const main = () =&gt; {
        const
            mail = Application('com.apple.mail'),
            msgID = x =&gt; x.messageId(),
            msgs = nubBy(on(eq)(msgID))(
                sortOn(msgID)(mail.selection())
            );
        return unlines(msgs.map(
            x =&gt; {
                const
                    label = x.subject() + ' ' + (
                        taskPaperDateString(
                            Math.max(
                                x.dateReceived(),
                                x.dateSent()
                            )
                        )
                    ) + ' ' + x.sender(),
                    url = mailURL(x.messageId());
                return `[${label}](${url})`;
            }
        ));
    };

    // iso8601Local :: Date -&gt; String
    const iso8601Local = dte =&gt;
        new Date(dte - (6E4 * dte.getTimezoneOffset()))
        .toISOString();


    // taskPaperDateString :: Date -&gt; String
    const taskPaperDateString = dte =&gt; {
        const [d, t] = iso8601Local(new Date()).split('T');
        return [d, t.slice(0, 5)].join(' ');
    };

    // mailURL :: String -&gt; String
    const mailURL = messageID =&gt;
        "message://%3C" + messageID + "%3E";


    // ---------------------- GENERIC ----------------------

    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // fanArrow (&amp;&amp;&amp;) :: (a -&gt; b) -&gt; (a -&gt; c) -&gt; (a -&gt; (b, c))
    const fanArrow = f =&gt;
        // A function from x to a tuple of (f(x), g(x))
        // ((,) . f &lt;*&gt; g)
        g =&gt; x =&gt; Tuple(f(x))(
            g(x)
        );

    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);
            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );

    // eq (==) :: Eq a =&gt; a -&gt; a -&gt; Bool
    const eq = a =&gt;
        // True when a and b are equivalent in the terms
        // defined below for their shared data type.
        b =&gt; {
            const t = typeof a;
            return t !== typeof b ? (
                false
            ) : 'object' !== t ? (
                'function' !== t ? (
                    a === b
                ) : a.toString() === b.toString()
            ) : (() =&gt; {
                const kvs = Object.entries(a);
                return kvs.length !== Object.keys(b).length ? (
                    false
                ) : kvs.every(([k, v]) =&gt; eq(v)(b[k]));
            })();
        };

    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];

    // identity :: a -&gt; a
    const identity = x =&gt;
        // The identity function.
        x;

    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // map :: (a -&gt; b) -&gt; [a] -&gt; [b]
    const map = f =&gt;
        // The list obtained by applying f
        // to each element of xs.
        // (The image of xs under f).
        xs =&gt; [...xs].map(f);

    // min :: Ord a =&gt; a -&gt; a -&gt; a
    const min = a =&gt;
        b =&gt; b &lt; a ? b : a;

    // nubBy :: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [a]
    const nubBy = fEq =&gt; {
        const go = xs =&gt; 0 &lt; xs.length ? (() =&gt; {
            const x = xs[0];
            return [x].concat(
                go(xs.slice(1)
                    .filter(y =&gt; !fEq(x)(y))
                )
            );
        })() : [];
        return compose(go, list);
    };

    // on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c
    const on = f =&gt;
        // e.g. groupBy(on(eq)(length))
        g =&gt; a =&gt; b =&gt; f(g(a))(g(b));


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];

    // sortOn :: Ord b =&gt; (a -&gt; b) -&gt; [a] -&gt; [a]
    const sortOn = f =&gt;
        // Equivalent to sortBy(comparing(f)), but with f(x)
        // evaluated only once for each x in xs.
        // ('Schwartzian' decorate-sort-undecorate).
        xs =&gt; list(xs).map(
            fanArrow(f)(identity)
        )
        .sort(uncurry(comparing(fst)))
        .map(snd);

    // unlines :: [String] -&gt; String
    const unlines = xs =&gt;
        // A single string formed by the intercalation
        // of a list of strings with the newline character.
        xs.join('\n');

    // uncurry :: (a -&gt; b -&gt; c) -&gt; ((a, b) -&gt; c)
    const uncurry = f =&gt;
        // A function over a pair, derived
        // from a curried function.
        function () {
            const
                args = arguments,
                xy = Boolean(args.length % 2) ? (
                    args[0]
                ) : args;
            return f(xy[0])(xy[1]);
        };

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620209142.63086402</real>
				<key>ModificationDate</key>
				<real>628543644.54914796</real>
				<key>Name</key>
				<string>com.apple.mail</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>DD01F5EE-5C11-4CCC-9812-D3CBB9992B41</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.apple.AddressBook</string>
							<key>Name</key>
							<string>Contacts</string>
							<key>NewFile</key>
							<string>/System/Applications/Contacts.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Rob Trew @2020

    // Any Contacts in the clipboard rewritten as 
    // [name](addressbook://etc) Markdown links
    // and stored in an "mdLink" KM Variable

    // main :: IO ()
    const main = () =&gt; {
        const
            pBoard = $.NSPasteboard.generalPasteboard,
            unwrap = ObjC.deepUnwrap;
        return defaultOrFromFirst(
            'No contact found in clipboard'
        )(
            x =&gt; x
        )(
            unwrap(
                pBoard.pasteboardItems.js[0]
                .types
            )
            .filter(k =&gt; k.startsWith('dyn'))
            .flatMap(clipType =&gt; {
                const
                    dict = unwrap(
                        pBoard
                        .propertyListForType(clipType)
                    );
                return !!dict ? (
                    Object.keys(dict)
                    .filter(k =&gt; k.endsWith('ABPerson'))
                    .flatMap(uid =&gt; {
                        const
                            x = dict[uid],
                            pre = x.First || '',
                            nom = x.Last || '',
                            label = !!(pre + nom) ? (
                                `${pre} ${nom}`
                            ) : (x.Organization || '?');
                        return [
                            `[${label}]` + (
                                `(addressbook://${uid})`
                            )
                        ];
                    }).join('\n')
                ) : [];
            })
        );
    };

    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // defaultOrFromFirst :: b -&gt; (a -&gt; b) -&gt; [a] -&gt; b
    const defaultOrFromFirst = v =&gt;
        // Equivalent of maybe | either for
        // the list monad. 
        f =&gt; xs =&gt; 0 &lt; xs.length ? (
            f(xs[0])
        ) : v;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>622187946.18329895</real>
				<key>ModificationDate</key>
				<real>628543630.21091902</real>
				<key>Name</key>
				<string>com.apple.AddressBook</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>06E5AD7D-7B75-4693-980C-CF976F4550BF</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.OakTree.Accordance</string>
							<key>Name</key>
							<string>Accordance</string>
							<key>NewFile</key>
							<string>/Applications/Accordance.app</string>
						</dict>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy As</string>
							<string>Location URL</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.OakTree.Accordance</string>
							<key>Name</key>
							<string>Accordance</string>
							<key>NewFile</key>
							<string>/Applications/Accordance.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Rob Trew @2020

    // main :: IO ()
    const main = () =&gt;
        either(
            x =&gt; 'hello'
        )(
            x =&gt; x
        )(
            bindLR(
                clipTextLR()
            )(s =&gt; {
                const xs = parse(accordLinkP())(s);
                return 0 &lt; xs.length ? (
                    Right(xs[0][0])
                ) : Left(
                    'No Accordance link found in clipboard.'
                );
            })
        );

    // ---------------------- PARSING ----------------------

    // accordLinkP :: Parser String
    const accordLinkP = () =&gt;
        // Internal link for Accordance.app parsed
        // from Edit &gt; Copy As &gt; Location URL
        // clipboard string.
        thenBindP(
            manyTill(
                anyChar()
            )(
                string('/read/')
            )
        )(
            takeWhileP(ne('#'))
        )(book =&gt; thenBindP(char('#'))(
            fmapP(concat)(some(anyChar()))
        )(ref =&gt; pureP(
            `[${book} ${ref.replace(/_/, ' ')}]` + (
                `(accord://read/${book}#${ref})`
            )
        )));

    // ---------------- PARSER COMBINATORS -----------------

    // Parser :: String -&gt; [(a, String)] -&gt; Parser a
    const Parser = f =&gt;
        // A function lifted into a Parser object.
        ({
            type: 'Parser',
            parser: f
        });


    // altP (&lt;|&gt;) :: Parser a -&gt; Parser a -&gt; Parser a
    const altP = p =&gt;
        // p, or q if p doesn't match.
        q =&gt; Parser(s =&gt; {
            const xs = parse(p)(s);
            return 0 &lt; xs.length ? (
                xs
            ) : parse(q)(s);
        });


    // anyChar :: () -&gt; Parser Char
    const anyChar = () =&gt;
        // A single character.
        Parser(
            s =&gt; 0 &lt; s.length ? [
                Tuple(s[0])(
                    s.slice(1)
                )
            ] : []
        );


    // apP &lt;*&gt; :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const apP = pf =&gt;
        // A new parser obtained by the application 
        // of a Parser-wrapped function,
        // to a Parser-wrapped value.
        p =&gt; Parser(
            s =&gt; parse(pf)(s).flatMap(
                vr =&gt; parse(
                    fmapP(vr[0])(p)
                )(vr[1])
            )
        );


    // bindP (&gt;&gt;=) :: Parser a -&gt; 
    // (a -&gt; Parser b) -&gt; Parser b
    const bindP = p =&gt;
        // A new parser obtained by the application of 
        // a function to a Parser-wrapped value.
        // The function must enrich its output, lifting it 
        // into a new Parser.
        // Allows for the nesting of parsers.
        f =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                tpl =&gt; parse(f(tpl[0]))(tpl[1])
            )
        );


    // char :: Char -&gt; Parser Char
    const char = x =&gt;
        // A particular single character.
        satisfy(c =&gt; x == c);


    // fmapP :: (a -&gt; b) -&gt; Parser a -&gt; Parser b  
    const fmapP = f =&gt;
        // A new parser derived by the structure-preserving 
        // application of f to the value in p.
        p =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                first(f)
            )
        );


    // liftA2P :: (a -&gt; b -&gt; c) -&gt; 
    // Parser a -&gt; Parser b -&gt; Parser c
    const liftA2P = op =&gt;
        // The binary function op, lifted
        // to a function over two parsers.
        p =&gt; apP(fmapP(op)(p));


    // manyTill :: Parser a -&gt; Parser e -&gt; Parser [a]
    const manyTill = p =&gt;
        // All of the matches for p before e matches.
        // Wrapping e in lookAhead can preserve any 
        // string which matches e, if it is needed.
        e =&gt; {
            const
                scan = () =&gt; altP(
                    thenP(e)(pureP([]))
                )(
                    bindP(
                        p
                    )(x =&gt; bindP(
                        go
                    )(xs =&gt; pureP(
                        [x].concat(xs)
                    )))
                ),
                go = scan();
            return go;
        };


    // parse :: Parser a -&gt; String -&gt; [(a, String)]
    const parse = p =&gt;
        // The result of parsing s with p.
        s =&gt; {
            // showLog('s', s)
            return p.parser([...s]);
        };


    // pureP :: a -&gt; Parser a
    const pureP = x =&gt;
        // The value x lifted, unchanged, 
        // into the Parser monad.
        Parser(s =&gt; [Tuple(x)(s)]);


    // satisfy :: (Char -&gt; Bool) -&gt; Parser Char
    const satisfy = test =&gt;
        // Any character for which the 
        // given predicate returns true.
        Parser(
            s =&gt; 0 &lt; s.length ? (
                test(s[0]) ? [
                    Tuple(s[0])(s.slice(1))
                ] : []
            ) : []
        );


    // sequenceP :: [Parser a] -&gt; Parser [a]
    const sequenceP = ps =&gt;
        // A single parser for a list of values, derived
        // from a list of parsers for single values.
        Parser(
            s =&gt; ps.reduce(
                (a, q) =&gt; a.flatMap(
                    vr =&gt; parse(q)(snd(vr)).flatMap(
                        first(xs =&gt; fst(vr).concat(xs))
                    )
                ),
                [Tuple([])(s)]
            )
        );


    // some :: Parser a -&gt; Parser [a]
    const some = p =&gt; {
        // One or more instances of p.
        // Lifts a parser for a simple type of value 
        // to a parser for a list of such values.
        const many_p = p =&gt;
            altP(some(p))(pureP([]));
        return Parser(
            s =&gt; parse(
                liftA2P(
                    x =&gt; xs =&gt; [x].concat(xs)
                )(p)(many_p(p))
            )(s)
        );
    };


    // string :: String -&gt; Parser String
    const string = s =&gt;
        // A particular string.
        fmapP(cs =&gt; cs.join(''))(
            sequenceP([...s].map(char))
        );


    // takeWhileP :: (Char -&gt; Bool) -&gt; Parser String
    const takeWhileP = p =&gt;
        // The largest prefix in which p is
        // true over all the characters.
        Parser(
            compose(
                pureList,
                first(concat),
                span(p)
            )
        );


    // thenBindP :: Parser a -&gt; Parser b -&gt; 
    // (b -&gt; Parser c) Parser c
    const thenBindP = o =&gt;
        // A combination of thenP and bindP in which a 
        // preliminary  parser consumes text and discards
        // its output, before any output of a subsequent
        // parser is bound.
        p =&gt; f =&gt; Parser(
            s =&gt; parse(o)(s).flatMap(
                vr =&gt; parse(p)(vr[1]).flatMap(
                    tpl =&gt; parse(f(tpl[0]))(tpl[1])
                )
            )
        );


    // thenP (&gt;&gt;) :: Parser a -&gt; Parser b -&gt; Parser b
    const thenP = o =&gt;
        // A composite parser in which o just consumes text
        // and then p consumes more and returns a value.
        p =&gt; Parser(
            s =&gt; parse(o)(s).flatMap(
                vr =&gt; parse(p)(vr[1])
            )
        );

    // ------------------------ JXA ------------------------

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        // ObjC.import('AppKit')
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );


    // concat :: [[a]] -&gt; [a]
    // concat :: [String] -&gt; String
    const concat = xs =&gt; (
        ys =&gt; 0 &lt; ys.length ? (
            ys.every(Array.isArray) ? (
                []
            ) : ''
        ).concat(...ys) : ys
    )(list(xs));


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // first :: (a -&gt; b) -&gt; ((a, c) -&gt; (b, c))
    const first = f =&gt;
        // A simple function lifted to one which applies
        // to a tuple, transforming only its first item.
        xy =&gt; Tuple(f(xy[0]))(
            xy[1]
        );


    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];


    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // ne :: a -&gt; a -&gt; Bool
    const ne = a =&gt;
        b =&gt; a !== b;


    // pureList :: a -&gt; [a]
    const pureList = x =&gt; [x];


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];


    // sj :: a -&gt; String
    function sj() {
        const args = Array.from(arguments);
        return JSON.stringify.apply(
            null,
            1 &lt; args.length &amp;&amp; !isNaN(args[0]) ? [
                args[1], null, args[0]
            ] : [args[0], null, 2]
        );
    }


    // span :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])
    const span = p =&gt;
        // Longest prefix of xs consisting of elements which
        // all satisfy p, tupled with the remainder of xs.
        xs =&gt; {
            const
                ys = 'string' !== typeof xs ? (
                    list(xs)
                ) : xs,
                iLast = ys.length - 1;
            return splitAt(
                until(
                    i =&gt; iLast &lt; i || !p(ys[i])
                )(i =&gt; 1 + i)(0)
            )(ys);
        };


    // splitAt :: Int -&gt; [a] -&gt; ([a], [a])
    const splitAt = n =&gt;
        xs =&gt; Tuple(xs.slice(0, n))(
            xs.slice(n)
        );


    // until :: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a
    const until = p =&gt; f =&gt; x =&gt; {
        let v = x;
        while (!p(v)) v = f(v);
        return v;
    };

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620257297.67379797</real>
				<key>ModificationDate</key>
				<real>628771454.095999</real>
				<key>Name</key>
				<string>com.OakTree.Accordance</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>7B3BF0C5-81FE-4283-900C-2997A54AE621</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC4ZAgAAKwAAAAEA
						AAARAgAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNjcx
						XGNvY29hc3VicnRmNjAwCntcZm9u
						dHRibFxmMFxmc3dpc3NcZmNoYXJz
						ZXQwIEhlbHZldGljYTt9CntcY29s
						b3J0Ymw7XHJlZDI1NVxncmVlbjI1
						NVxibHVlMjU1O1xyZWQwXGdyZWVu
						MFxibHVlMDt9CntcKlxleHBhbmRl
						ZGNvbG9ydGJsOztcY3NzcmdiXGMw
						XGMwXGMwXGM4NDcwNlxjbmFtZSBj
						b250cm9sVGV4dENvbG9yO30KXHBh
						cmRcdHg1NjBcdHgxMTIwXHR4MTY4
						MFx0eDIyNDBcdHgyODAwXHR4MzM2
						MFx0eDM5MjBcdHg0NDgwXHR4NTA0
						MFx0eDU2MDBcdHg2MTYwXHR4Njcy
						MFxwYXJkaXJuYXR1cmFsXHBhcnRp
						Z2h0ZW5mYWN0b3IwCgpcZjBcZnMz
						MFxmc21pbGxpMTUzNjQgXGNmMiBW
						ZXIgMC4wMSBSb2IgVHJldyAyMDIw
						XApcCklmIHRoZSBpdGVtIGlzIGN1
						cnJlbnRseSBiZWluZyBlZGl0ZWQs
						IGZvY3VzIGJyaWVmbHkgc3dpdGNo
						ZXMgdG8gdGhlIGVuY2xvc2luZyBn
						cm91cCAodG8gZW5hYmxlIGxpbmsg
						Y29weWluZykgYW5kIGlzIHRoZW4g
						cmVzdG9yZWQufQEAAAAjAAAAAQAA
						AAcAAABUWFQucnRmEAAAACAWRF62
						AQAAAAAAAAAAAAA=
						</data>
						<key>Title</key>
						<string>Copy MD [Name](URL) link to current item.</string>
					</dict>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.literatureandlatte.scrivener3</string>
							<key>Name</key>
							<string>Scrivener</string>
							<key>NewFile</key>
							<string>/Applications/Scrivener.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC6YAAAAKwAAAAEA
						AACQAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bH0Ke1xjb2xvcnRibDtccmVkMjU1
						XGdyZWVuMjU1XGJsdWUyNTU7fQp7
						XCpcZXhwYW5kZWRjb2xvcnRibDs7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAlGV9X7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>ENCLOSING GROUP</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Temporarily get enclosing group context, if necessary.</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Menu</string>
									<key>MenuConditionSelectionType</key>
									<string>Path</string>
									<key>MenuConditionType</key>
									<string>IsEnabled</string>
									<key>MenuModifiers</key>
									<integer>256</integer>
									<key>MenuShortcut</key>
									<string>C</string>
									<key>MenuTitle</key>
									<string>Navigate &gt; Go To &gt; Enclosing Group</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string>false</string>
								<key>Variable</key>
								<string>scrivenerContextChanged</string>
							</dict>
						</array>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SelectMenuItem</string>
								<key>Menu</key>
								<array>
									<string>Navigate</string>
									<string>Go To</string>
									<string>Enclosing Group</string>
								</array>
								<key>TargetApplication</key>
								<dict>
									<key>BundleIdentifier</key>
									<string>com.literatureandlatte.scrivener3</string>
									<key>Name</key>
									<string>Scrivener</string>
									<key>NewFile</key>
									<string>/Applications/Scrivener.app</string>
								</dict>
								<key>TargetingType</key>
								<string>Specific</string>
							</dict>
							<dict>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string>true</string>
								<key>Variable</key>
								<string>scrivenerContextChanged</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC6YAAAAKwAAAAEA
						AACQAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bH0Ke1xjb2xvcnRibDtccmVkMjU1
						XGdyZWVuMjU1XGJsdWUyNTU7fQp7
						XCpcZXhwYW5kZWRjb2xvcnRibDs7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAlGV9X7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Copy NAME</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>scrivenerItemName</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC6YAAAAKwAAAAEA
						AACQAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bH0Ke1xjb2xvcnRibDtccmVkMjU1
						XGdyZWVuMjU1XGJsdWUyNTU7fQp7
						XCpcZXhwYW5kZWRjb2xvcnRibDs7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAlGV9X7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Copy URL</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy Special</string>
							<string>Copy Document as External Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.literatureandlatte.scrivener3</string>
							<key>Name</key>
							<string>Scrivener</string>
							<key>NewFile</key>
							<string>/Applications/Scrivener.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until Clipboard contains "x-scrivener-item:"</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>Contains</string>
									<key>ClipboardText</key>
									<string>x-scrivener-item:</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC6YAAAAKwAAAAEA
						AACQAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bH0Ke1xjb2xvcnRibDtccmVkMjU1
						XGdyZWVuMjU1XGJsdWUyNTU7fQp7
						XCpcZXhwYW5kZWRjb2xvcnRibDs7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAlGV9X7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>MARKDOWN link copied to mdLink variable, context restored, user notified</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Variable</string>
									<key>Variable</key>
									<string>scrivenerContextChanged</string>
									<key>VariableConditionType</key>
									<string>Is</string>
									<key>VariableValue</key>
									<string>true</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>MacroActionType</key>
								<string>SelectMenuItem</string>
								<key>Menu</key>
								<array>
									<string>Navigate</string>
									<string>Editor</string>
									<string>Backward in Document History</string>
								</array>
								<key>TargetApplication</key>
								<dict>
									<key>BundleIdentifier</key>
									<string>com.literatureandlatte.scrivener3</string>
									<key>Name</key>
									<string>Scrivener</string>
									<key>NewFile</key>
									<string>/Applications/Scrivener.app</string>
								</dict>
								<key>TargetingType</key>
								<string>Specific</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%Variable%scrivenerItemName%](%SystemClipboard%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string>Glass</string>
						<key>Subtitle</key>
						<string>%Variable%mdLink%</string>
						<key>Text</key>
						<string></string>
						<key>Title</key>
						<string>Copy as Markdown Link</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631093054.48296905</real>
				<key>ModificationDate</key>
				<real>631093423.86375201</real>
				<key>Name</key>
				<string>com.literatureandlatte.scrivener3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>ACA8F294-9784-4700-9669-E2F26A06141F</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string>Submarine</string>
						<key>Subtitle</key>
						<string>Cycling Kindle Views</string>
						<key>Text</key>
						<string>Please wait ...</string>
						<key>Title</key>
						<string>Copy As MD Link</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy as MD Link for macOS Kindle

    // Rob Trew @ 2020

    // Read available fields 
    //     (for md link :: Title + Author, Location, ASIN)
    // from active Kindle view &lt;- {'page', 'icon', 'list'}
    // and continue to 'next' view,
    // until 'home' and 'dry'.

    // main :: IO ()
    const main = () =&gt; {
        const kme = Application('Keyboard Maestro Engine');
        return either(
            alert('Copy as MD Link')
        )(x =&gt; (
            kme.setvariable('mdLink', {
                to: x
            }),
            x
        ))(
            bindLR(
                kindleProcLR()
            )(proc =&gt; bindLR(
                until(
                    homeAndDryOrSunk
                )(
                    harvestNextViewLR(kme)(proc)
                )(
                    viewHarvestFromProcessLR(kme)(proc)({
                        viewPath: []
                    })
                )
            )(linkFromDictLR))
        );
    };


    // harvestNextViewLR :: Application -&gt; a
    // Dict -&gt; Either String Dict
    const harvestNextViewLR = kme =&gt;
        proc =&gt; lrDict =&gt; {
            const
                dict = lrDict.Right,
                path = dict.viewPath,
                currentView = last(path);
            return (
                // In Kindle:
                !isComplete(dict) ? (
                    'list' !== currentView ? (
                        kme.doScript(
                            'page' !== currentView ? (
                                hitReturnPlist
                            ) : menuChainPlist([
                                'File',
                                'Close Book'
                            ])
                        )
                    ) : Boolean(dict.location) ? (
                        clickViewButton(proc)('list')
                    ) : kme.doScript(hitReturnPlist)
                ) : 'page' !== currentView ? (
                    'page' !== path[0] ? (
                        clickViewButton(proc)(currentView)
                    ) : kme.doScript(
                        menuChainPlist(['File', 'Open Book'])
                    )
                ) : kme.doScript(
                    menuChainPlist(['File', 'Close Book'])
                ),
                // In JavaScript interpreter:
                viewHarvestFromProcessLR(kme)(proc)(
                    dict
                )
            );
        };


    // linkFromDictLR :: Dict -&gt; Either String String
    const linkFromDictLR = dict =&gt;
        // Either a message or an MD Link string
        bindLR(
            Boolean(dict.name) ? (
                Right(dict.name)
            ) : Left('Name field not found')
        )(name =&gt; {
            const
                i = [...name].findIndex(
                    c =&gt; ',' === c
                );
            return -1 !== i ? (() =&gt; {
                const [title, rest] = splitAt(i)(name);
                const
                    authorList = Object.keys(
                        rest.slice(1).split(/; /g).reduce(
                            (a, k) =&gt; Object.assign({},
                                a, {
                                    [
                                        reverse(
                                            k.split(', ')
                                        ).join(' ')
                                    ]: 1
                                }), {}
                        )
                    );
                return Right(
                    `[${title} – ${authorList.join(', ')}]` + (
                        '(kindle://book?action=open&amp;asin=' + (
                            `${dict.asin}&amp;location=${dict.location})`
                        )
                    )
                );
            })() : Left('No comma found in name field.');
        });


    // isComplete :: Dict -&gt; Bool
    const isComplete = dict =&gt; {
        // Complete if the dictionary 
        // holds all 3 key values &lt;- {asin, location, name}
        const ks = Object.keys(dict);
        return ['name', 'asin', 'location'].every(
            k =&gt; ks.includes(k)
        );
    };


    // homeAndDryOrSunk :: Either String Dict -&gt; Bool
    const homeAndDryOrSunk = lrDict =&gt;
        // Either an explanatory message, or 
        // True if all the sought key values are 
        // present in the dictionary, and the path
        // shows a return to initial position.
        Boolean(lrDict.Left) || (() =&gt; {
            const
                dict = lrDict.Right,
                path = dict.viewPath;
            return 1 &lt; path.length &amp;&amp; (
                path[0] === last(path)
            ) &amp;&amp; isComplete(dict);
        })();


    // viewHarvestFromProcessLR :: Application -&gt; 
    // process -&gt; Dict -&gt; Either String Dict
    const viewHarvestFromProcessLR = kme =&gt;
        // Either a message or a dictionary with
        // additional fields and an extended path
        // of visited views.
        process =&gt; history =&gt; bindLR(
            kindleProcWinLR(process)
        )(window =&gt; bindLR(
            kindleWindowToolbarLR(window)
        )(toolbar =&gt; bindLR(
            kindleToolbarControlsLR(toolbar)
        )(controls =&gt; bindLR(
            kindleWindowTypeLR(controls)
        )(winType =&gt; 'page' === winType ? (
            locationFromKindlePageLR(history)(window)
        ) : 'list' === winType ? (
            authorFromKindleListLR(history)(window)
        ) : 'icon' === winType ? (
            bindLR(
                titlePosnSizeFromKindleIconLR(window)
            )(
                asinEtcFromIconDetailsLR(kme)(history)
            )
        ) : Left('other')))));


    // asinEtcFromIconDetailsLR :: Application -&gt; 
    // Dict -&gt; (String, String, String) -&gt; 
    // Either String Dict
    const asinEtcFromIconDetailsLR = kme =&gt;
        // Either a message or a dictionary with an 
        // extended viewPath and updated or added 
        // `asin` and `name` fields.
        history =&gt; ([label, posn, size]) =&gt; {
            const
                x = posn[0] + size[0] / 2,
                y = posn[1] + size[1] / 2;
            return Right(
                (
                    copyText(''),
                    kme.doScript(
                        clickPointPlist(x)(y)
                    ),
                    kme.doScript(controlCplist),
                    Object.assign({}, history, {
                        viewPath: history.viewPath.concat('icon'),
                        name: label.split(', Reading')[0],
                        asin: either(
                            _ =&gt; 'Empty clipboard - asin not found.'
                        )(
                            x =&gt; x.split('-0-')[0]
                        )(clipTextLR())
                    })
                )
            );
        };


    // titlePosnSizeFromKindleIconLR :: Window -&gt; 
    // Either String [String, (Int, Int), (Int, Int)]
    const titlePosnSizeFromKindleIconLR = window =&gt; {
        const lists = window.lists;
        return bindLR(
            0 &lt; lists.length ? (
                Right(lists.at(0))
            ) : Left('No icon list found - perhaps not icon view ?')
        )(list =&gt; {
            const
                staticText = lists.at(0)
                .staticTexts.at(0);
            return Right([
                'title', 'position', 'size'
            ].map(k =&gt; staticText[k]()));
        });
    };


    // kindleProcLR :: () -&gt; Either String Process
    const kindleProcLR = () =&gt; {
        // Either a message, or a reference
        // to a running Kindle process.
        const
            kindleProcs = Application('System Events')
            .applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return 0 &lt; kindleProcs.length ? (
            Right(kindleProcs.at(0))
        ) : Left('Kindle reader not found.');
    };


    // kindleProcWinLR :: Process -&gt; Either String Window
    const kindleProcWinLR = process =&gt; {
        const wins = process.windows;
        return 0 &lt; wins.length ? (
            Right(wins.at(0))
        ) : Left('Open window not found in Kindle.');
    };


    // kindleToolbarControlsLR :: Toolbar -&gt; 
    // Either Message Buttons
    const kindleToolbarControlsLR = toolbar =&gt; {
        const controls = toolbar.uiElements;
        return 0 &lt; controls.length ? (
            Right(controls)
        ) : Left('No UI elements found in toolbar.');
    };


    // kindleWindowToolbarLR :: Window -&gt; Either String Toolbar
    const kindleWindowToolbarLR = window =&gt; {
        const toolbars = window.toolbars;
        return 0 &lt; toolbars.length ? (
            Right(toolbars.at(0))
        ) : Left(
            'No toolbars found in Kindle window: ' + (
                window.name()
            )
        );
    };


    // kindleWindowTypeLR :: controls -&gt; 
    // Either String String
    const kindleWindowTypeLR = controls =&gt; {
        const count = controls.length;
        return [3, 4, 8].includes(count) ? (
            Right(({
                3: 'list',
                4: 'icon',
                8: 'page'
            })[count])
        ) : Left(
            'Unrecognised pattern of controls on toolbar.'
        );
    };


    // authorFromKindleListLR :: Dict -&gt; 
    // Window -&gt; Either String Dict
    const authorFromKindleListLR = history =&gt;
        window =&gt; {
            const tables = window.tables;
            return bindLR(
                0 &lt; tables.length ? (
                    Right(tables.at(0))
                ) : Left('No table found in window - perhaps not list ?')
            )(
                table =&gt; {
                    const staticTexts = table.staticTexts;
                    return bindLR(
                        1 &lt; staticTexts.length ? (
                            Right(staticTexts)
                        ) : Left('Less than 2 static texts found.')
                    )(
                        texts =&gt; Right(
                            Object.assign({}, history, {
                                viewPath: history.viewPath
                                    .concat('list'),
                                author: texts.at(1).title()
                            })
                        )
                    );
                }
            );
        };


    // --------------------- TOKENS ----------------------

    // locationFromKindlePageLR :: Dict -&gt; 
    // Window -&gt; Either String Dict
    const locationFromKindlePageLR = history =&gt;
        window =&gt; {
            const
                staticTexts = window.staticTexts(),
                iLabel = staticTexts.findIndex(
                    x =&gt; 0 &lt; x.uiElements.length
                );
            return -1 !== iLabel ? (() =&gt; {
                const
                    xs = staticTexts[iLabel]
                    .uiElements.at(0).value()
                    .split(/\s+/g),
                    lng = xs.length;
                return bindLR(
                    2 &lt; lng ? (
                        Right(xs[lng - 3])
                    ) : Left(
                        'Location string not found.'
                    )
                )(label =&gt; isNaN(label) ? (
                    Left('Expected a location integer.')
                ) : Right(
                    Object.assign({}, history, {
                        viewPath: history.viewPath.concat('page'),
                        location: parseInt(label)
                    })
                ));
            })() : Left('Library page');
        };


    // --------------------- KINDLE ----------------------

    // kindlePageBookNameLR :: Either String String
    const kindlePageBookNameLR = () =&gt; {
        const
            se = Application('System Events'),
            kindleProcs = se.applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return bindLR(
            0 &lt; kindleProcs.length ? (
                Right(kindleProcs.at(0))
            ) : Left('Kindle reader not found.')
        )(kindleProc =&gt; {
            const ws = kindleProc.windows;
            return bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left('No windows open in Kindle')
            )(win =&gt; {
                const
                    toolbar = win.toolbars.at(0),
                    buttons = toolbar.buttons;
                return buttons.length !== 4 ? (
                    Left('This is not a reading page')
                ) : Right(win.title().split(' - ').slice(1)[0]);
            });
        });
    };


    // kindleButtonTypeLR :: () -&gt; IO Dict
    const kindleButtonTypeLR = () =&gt; {
        // Either a message, or a dictionary with 
        // a single key drawn from {'icon', 'list', 'library'}
        // the value of the key is a button which can be 
        // clicked with the method:
        // (dct[k]).actions.at(0).perform()
        const
            se = Application('System Events'),
            kindleProcs = se.applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return bindLR(
            0 &lt; kindleProcs.length ? (
                Right(kindleProcs.at(0))
            ) : Left('Kindle reader not found.')
        )(kindleProc =&gt; {
            const ws = kindleProc.windows;
            return bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left('No windows open in Kindle')
            )(win =&gt; {
                const
                    toolbar = win.toolbars.at(0),
                    buttons = toolbar.buttons;
                return Right(
                    0 &lt; buttons.length ? ({
                        library: buttons.at(0)
                    }) : (() =&gt; {
                        const
                            groups = toolbar.groups,
                            blnIconView = 3 &lt; groups.length,
                            group = groups.at(
                                blnIconView ? (
                                    2
                                ) : 1
                            );
                        return {
                            [blnIconView ? 'list' : 'icons']: (
                                group.radioGroups.at(0)
                                .radioButtons.at(
                                    blnIconView ? (
                                        1
                                    ) : 0
                                )
                            )
                        };
                    })()
                );
            });
        });
    };


    // clickViewButton :: Process -&gt; String -&gt; Kindle IO
    const clickViewButton = proc =&gt;
        // A button clicked
        // Either the List view or Icons view button,
        // to toggle from the current view to its sibling. 
        viewName =&gt; {
            const
                toolbar = proc.windows.at(0)
                .toolbars.at(0),
                blnIconView = 'list' !== viewName,
                group = toolbar.groups.at(
                    blnIconView ? 2 : 1
                ),
                button = group.radioGroups.at(0)
                .radioButtons.at(
                    blnIconView ? 1 : 0
                );
            return button.actions.at(0).perform();
        };


    // kindleLocationFromPageLR :: 
    const kindleLocationFromPageLR = () =&gt; {
        const
            se = Application('System Events'),
            kindleProcs = se.applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return bindLR(
            0 &lt; kindleProcs.length ? (
                Right(kindleProcs.at(0))
            ) : Left('Kindle reader not found.')
        )(kindleProc =&gt; {
            const ws = kindleProc.windows;
            return bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left('No windows open in Kindle')
            )(win =&gt; {
                const
                    staticTexts = win.staticTexts(),
                    iLabel = staticTexts.findIndex(
                        x =&gt; 0 &lt; x.uiElements.length
                    );
                return -1 !== iLabel ? (() =&gt; {
                    const
                        xs = staticTexts[iLabel]
                        .uiElements.at(0).value()
                        .split(/\s+/g),
                        lng = xs.length;
                    return bindLR(
                        2 &lt; lng ? (
                            Right(xs[lng - 3])
                        ) : Left(
                            'Location string not found.'
                        )
                    )(label =&gt; isNaN(label) ? (
                        Left('Expected a location integer.')
                    ) : Right(parseInt(label)));
                })() : Left('Library page');
            });
        });
    };


    // kindleTypeAndFieldLR :: () -&gt; Either String (String, String)
    const kindleTypeAndFieldLR = () =&gt;
        // Either a message or a key value pair in which
        // the key is drawn from {'name', 'asin', 'location'}
        either(
            _ =&gt; bindLR(
                kindleLocationFromPageLR()
            )(
                label =&gt; Right(['location', label])
            )
        )(
            txt =&gt; 0 &lt; txt.length ? (
                txt.endsWith('EBOK') ? (
                    Right(['asin', txt.split('-')[0]])
                ) : Right(['name', txt])
            ) : Left('No text copied in Library view.')
        )(
            clipTextLR()
        );


    // ------------------- KM ACTIONS --------------------

    // activateKindlePlist :: XML String
    const activateKindlePlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;AllWindows&lt;/key&gt;
            &lt;true/&gt;
            &lt;key&gt;AlreadyActivatedActionType&lt;/key&gt;
            &lt;string&gt;Normal&lt;/string&gt;
            &lt;key&gt;Application&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;BundleIdentifier&lt;/key&gt;
                &lt;string&gt;com.amazon.Kindle&lt;/string&gt;
                &lt;key&gt;Name&lt;/key&gt;
                &lt;string&gt;Kindle&lt;/string&gt;
                &lt;key&gt;NewFile&lt;/key&gt;
                &lt;string&gt;/Applications/Kindle.app&lt;/string&gt;
            &lt;/dict&gt;
            &lt;key&gt;MacroActionType&lt;/key&gt;
            &lt;string&gt;ActivateApplication&lt;/string&gt;
            &lt;key&gt;ReopenWindows&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;TimeOutAbortsMacro&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;/plist&gt;`;


    // clickPointPlist :: Int -&gt; Int -&gt; XML String
    const clickPointPlist = x =&gt;
        y =&gt; `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;Action&lt;/key&gt;
            &lt;string&gt;MoveAndClick&lt;/string&gt;
            &lt;key&gt;Button&lt;/key&gt;
            &lt;integer&gt;0&lt;/integer&gt;
            &lt;key&gt;ClickCount&lt;/key&gt;
            &lt;integer&gt;1&lt;/integer&gt;
            &lt;key&gt;DisplayMatches&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;DragHorizontalPosition&lt;/key&gt;
            &lt;string&gt;0&lt;/string&gt;
            &lt;key&gt;DragVerticalPosition&lt;/key&gt;
            &lt;string&gt;0&lt;/string&gt;
            &lt;key&gt;Fuzz&lt;/key&gt;
            &lt;integer&gt;15&lt;/integer&gt;
            &lt;key&gt;HorizontalPositionExpression&lt;/key&gt;
            &lt;string&gt;${x}&lt;/string&gt;
            &lt;key&gt;MacroActionType&lt;/key&gt;
            &lt;string&gt;MouseMoveAndClick&lt;/string&gt;
            &lt;key&gt;Modifiers&lt;/key&gt;
            &lt;integer&gt;0&lt;/integer&gt;
            &lt;key&gt;MouseDrag&lt;/key&gt;
            &lt;string&gt;None&lt;/string&gt;
            &lt;key&gt;Relative&lt;/key&gt;
            &lt;string&gt;Window&lt;/string&gt;
            &lt;key&gt;RelativeCorner&lt;/key&gt;
            &lt;string&gt;TopLeft&lt;/string&gt;
            &lt;key&gt;RestoreMouseLocation&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;VerticalPositionExpression&lt;/key&gt;
            &lt;string&gt;${y}&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;/plist&gt;`;


    // menuChainPlist :: [String] -&gt; XML String
    const menuChainPlist = ks =&gt; `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;MacroActionType&lt;/key&gt;
            &lt;string&gt;SelectMenuItem&lt;/string&gt;
            &lt;key&gt;Menu&lt;/key&gt;
            &lt;array&gt;
            ${ks.map(k =&gt; ['&lt;string&gt;',k,'&lt;/string&gt;'].join('')).join('\n')}
            &lt;/array&gt;
            &lt;key&gt;TargetApplication&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;BundleIdentifier&lt;/key&gt;
                &lt;string&gt;com.amazon.Kindle&lt;/string&gt;
                &lt;key&gt;Name&lt;/key&gt;
                &lt;string&gt;Kindle&lt;/string&gt;
                &lt;key&gt;NewFile&lt;/key&gt;
                &lt;string&gt;/Applications/Kindle.app&lt;/string&gt;
            &lt;/dict&gt;
            &lt;key&gt;TargetingType&lt;/key&gt;
            &lt;string&gt;Specific&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;/plist&gt;`;


    // controlCplist :: XML String
    const controlCplist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;KeyCode&lt;/key&gt;
                &lt;integer&gt;8&lt;/integer&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SimulateKeystroke&lt;/string&gt;
                &lt;key&gt;Modifiers&lt;/key&gt;
                &lt;integer&gt;256&lt;/integer&gt;
                &lt;key&gt;ReleaseAll&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;TargetApplication&lt;/key&gt;
                &lt;dict/&gt;
                &lt;key&gt;TargetingType&lt;/key&gt;
                &lt;string&gt;Front&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`;


    // hitReturnPlist :: XML String
    const hitReturnPlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;KeyCode&lt;/key&gt;
                &lt;integer&gt;36&lt;/integer&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SimulateKeystroke&lt;/string&gt;
                &lt;key&gt;Modifiers&lt;/key&gt;
                &lt;integer&gt;0&lt;/integer&gt;
                &lt;key&gt;ReleaseAll&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;TargetApplication&lt;/key&gt;
                &lt;dict/&gt;
                &lt;key&gt;TargetingType&lt;/key&gt;
                &lt;string&gt;Front&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`;


    // pausePlist :: XML String
    const pausePlist = `
        &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;Pause&lt;/string&gt;
                &lt;key&gt;Time&lt;/key&gt;
                &lt;string&gt;0.2&lt;/string&gt;
                &lt;key&gt;TimeOutAbortsMacro&lt;/key&gt;
                &lt;true/&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`;


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // last :: [a] -&gt; a
    const last = xs =&gt;
        // The last item of a list.
        0 &lt; xs.length ? (
            xs.slice(-1)[0]
        ) : undefined;


    // reverse :: [a] -&gt; [a]
    const reverse = xs =&gt;
        'string' !== typeof xs ? (
            xs.slice(0).reverse()
        ) : xs.split('').reverse().join('');


    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        console.log(
            args
            .map(JSON.stringify)
            .join(' -&gt; ')
        );

    // splitAt :: Int -&gt; [a] -&gt; ([a], [a])
    const splitAt = n =&gt;
        xs =&gt; [
            xs.slice(0, n),
            xs.slice(n)
        ];

    // until :: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a
    const until = p =&gt;
        f =&gt; x =&gt; {
            let v = x;
            while (!p(v)) v = f(v);
            return v;
        };

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>DeviceID</key>
						<string>SOUNDEFFECTS</string>
						<key>MacroActionType</key>
						<string>PlaySound</string>
						<key>Path</key>
						<string>/System/Library/Sounds/Glass.aiff</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>630112216.709167</real>
				<key>ModificationDate</key>
				<real>631030651.40844798</real>
				<key>Name</key>
				<string>com.amazon.Kindle</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>F547E9C5-B98C-4D41-8200-3E901301E412</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';
    // Rob Trew @2020
    const
        finder = Application('com.apple.finder'),
        xs = finder.selection();
    return 0 &lt; xs.length ? (
        xs.map(
            x =&gt; `[${x.name()}](${x.url()})`
        ).join('\n')
    ) : (() =&gt; {
        const
            url = finder.insertionLocation().url(),
            fp = decodeURI(url).slice(7);
        return `[${fp}](${url})`;
    })();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620251830.94660604</real>
				<key>ModificationDate</key>
				<real>634569765.27849495</real>
				<key>Name</key>
				<string>com.apple.finder</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>2626F019-00BB-4673-8FFF-8951007F04F6</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.culturedcode.ThingsMac</string>
							<key>Name</key>
							<string>Things</string>
							<key>NewFile</key>
							<string>/Applications/Things3.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Items</string>
							<string>Share</string>
							<string>Copy Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.culturedcode.ThingsMac</string>
							<key>Name</key>
							<string>Things</string>
							<key>NewFile</key>
							<string>/Applications/Things3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>StartsWith</string>
									<key>ClipboardText</key>
									<string>things</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdURL</string>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>Pause</string>
						<key>Time</key>
						<string>.5</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Items</string>
							<string>Share</string>
							<string>Copy Text</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.culturedcode.ThingsMac</string>
							<key>Name</key>
							<string>Things</string>
							<key>NewFile</key>
							<string>/Applications/Things3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>DoesNotMatch</string>
									<key>ClipboardText</key>
									<string>^things*</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%SystemClipboard%](%Variable%mdURL%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628200210.26363599</real>
				<key>ModificationDate</key>
				<real>628201962.985695</real>
				<key>Name</key>
				<string>com.culturedcode.ThingsMac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>987CAFF7-4F70-479E-B904-77951F78E187</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>File</string>
							<string>Copy</string>
							<string>Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.agiletortoise.Drafts-OSX</string>
							<key>Name</key>
							<string>Drafts</string>
							<key>NewFile</key>
							<string>/Applications/Drafts.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause Until non-empty text in clipboard</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdURL</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>File</string>
							<string>Copy</string>
							<string>Contents</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.agiletortoise.Drafts-OSX</string>
							<key>Name</key>
							<string>Drafts</string>
							<key>NewFile</key>
							<string>/Applications/Drafts.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause Until non-empty text in clipboard</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

	// main :: IO ()
    const main = () =&gt; either(
        alert('Copy as MD link')
    )(
        txt =&gt; {
            const
                mdURL = Application(
                    'Keyboard Maestro Engine'
                ).getvariable('mdURL');
            return `[${txt}](${mdURL})`;
        }
    )(
        bindLR(
            clipTextLR()
        )(
            txt =&gt; Right(
                txt.split(/[\n\r]+/)[0]
            )
        )
    );

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink% </string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>630094796.31117594</real>
				<key>ModificationDate</key>
				<real>630097318.81927097</real>
				<key>Name</key>
				<string>com.agiletortoise.Drafts-OSX</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>39E16879-839F-48F2-A6E6-1786C71CC777</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy Day as Text</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.flexibits.fantastical2.mac</string>
							<key>Name</key>
							<string>Fantastical</string>
							<key>NewFile</key>
							<string>/Applications/Fantastical 2.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(
            alert('MD links from Fantastical')
        )(
            x =&gt; x
        )(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(
                clip =&gt; {
                    const
                        dateString = clip.split('\n')[0],
                        iso8601 = taskPaperDateString(
                            new Date(dateString)
                        ).slice(0, 10),
                        pfx = 'x-fantastical3://show/calendar/';
                    return Right(
                        `[${dateString}](${pfx + iso8601})`
                    );
                }
            )
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ---------------------- GENERAL ----------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // iso8601Local :: Date -&gt; String
    const iso8601Local = dte =&gt;
        new Date(dte - (6E4 * dte.getTimezoneOffset()))
        .toISOString();

    // taskPaperDateString :: Date -&gt; String
    const taskPaperDateString = dte =&gt; {
        const [d, t] = iso8601Local(new Date()).split('T');
        return [d, t.slice(0, 5)].join(' ');
    };

    // main
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>DisplayBriefly</string>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620254453.41475594</real>
				<key>ModificationDate</key>
				<real>628543664.04437196</real>
				<key>Name</key>
				<string>com.flexibits.fantastical2.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>02F4C082-9FB2-4E86-A5C6-B6ADC4B0B5B1</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>EF4C10A0-F061-48D9-A676-4E31D5359C50</string>
		<key>UID</key>
		<string>1C0A5328-B9EF-45FC-B4D3-4DF3806E5B9B</string>
	</dict>
</array>
</plist>
