<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997196</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>local_Window Title</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>return (() =&gt; {
    "use strict";

    // MD link to file selected in Obsidian v. 0.10.1

    // Rob Trew @2020, @2024
    // Ver 0.5

    // main :: IO ()
    const main = () =&gt;
        either(
            alert("Copy as MD Link")
        )(
            mdLink =&gt; mdLink
        )(
            bindLR(
                openObsidianVaultIdPathsLR()
            )(
                mdLinkFromIdPathsLR(
                    kmvar.local_Window_Title
                )
            )
        );


    // openObsidianVaultIdPathsLR :: () -&gt; IO Either String FilePath
    const openObsidianVaultIdPathsLR = () =&gt;
        bindLR(
            bindLR(
                readFileLR(
                    [
                        "~/Library/Application Support",
                        "/Obsidian/obsidian.json"
                    ]
                    .join("")
                )
            )(
                jsonParseLR
            )
        )(
            dict =&gt; "vaults" in dict
                ? Right(
                    Object.entries(dict.vaults)
                    .flatMap(
                        ([k, v]) =&gt; v.open
                            ? [Tuple(k)(v.path)]
                            : []
                    )
                )
                : Left("No 'vaults' key found in Obsidian.json")

        );

    // mdLinkFromIdPathsLR ::
    // String -&gt; [(id, FilePath)] -&gt; Either String String
    const mdLinkFromIdPathsLR = windowTitle =&gt;
        idPaths =&gt; {
            const
                noteAndVault = windowTitle
                .split(" - ")
                .slice(0, -1)
                .join(" - "),
                iVault = idPaths.findIndex(
                    idFp =&gt; noteAndVault.endsWith(
                        takeFileName(idFp[1])
                    )
                );

            return fmapLR(idPath =&gt; {
                const
                    vaultName = takeFileName(idPath[1]),
                    noteName = noteAndVault.slice(
                        0,
                        (noteAndVault.length - vaultName.length) - 3
                    );

                return `[${noteName}](` + (
                    `obsidian://open?vault=${idPath[0]}&amp;` + (
                        `file=${encodeURIComponent(noteName)})`
                    )
                );
            })(
                -1 !== iVault
                    ? Right(idPaths[iVault])
                    : Left(
                        "Window title doesn't match open vault name."
                    )
            );
        };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };

    // readFileLR :: FilePath -&gt; Either String IO String
    const readFileLR = fp =&gt; {
    // Either a message or the contents of any
    // text file at the given filepath.
        const
            uw = ObjC.unwrap,
            e = $(),
            ns = $.NSString
            .stringWithContentsOfFileEncodingError(
                $(fp).stringByStandardizingPath,
                $.NSUTF8StringEncoding,
                e
            );

        return ns.isNil()
            ? Left(uw(e.localizedDescription))
            : Right(uw(ns));
    };


    // --------------------- GENERIC ---------------------
    // https: //github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = lr =&gt;
    // Bind operator for the Either option type.
    // If lr has a Left value then lr unchanged,
    // otherwise the function mf applied to the
    // Right value in lr.
        mf =&gt; "Left" in lr
            ? lr
            : mf(lr.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
    // Application of the function fl to the
    // contents of any Left value in e, or
    // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);


    // fmapLR (&lt;$&gt;) :: (b -&gt; c) -&gt; Either a b -&gt; Either a c
    const fmapLR = f =&gt;
    // Either f mapped into the contents of any Right
    // value in e, or e unchanged if is a Left value.
        e =&gt; "Left" in e
            ? e
            : Right(f(e.Right));


    // jsonParseLR :: String -&gt; Either String a
    const jsonParseLR = s =&gt; {
        // Either a message, or a JS value obtained
        // from a successful parse of s.
        try {
            return Right(JSON.parse(s));
        } catch (e) {
            return Left(
                `${e.message} (line:${e.line} col:${e.column})`
            );
        }
    };

    // takeFileName :: FilePath -&gt; FilePath
    const takeFileName = fp =&gt;
    // The file name component of a filepath.
        0 &lt; fp.length
            ? "/" !== fp[fp.length - 1]
                ? fp.split("/").slice(-1)[0]
                : ""
            : "";


    // MAIN --
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740856569.43946898</real>
				<key>ModificationDate</key>
				<real>740988293.47620702</real>
				<key>Name</key>
				<string>Obsidian link from window title</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>MacroTriggerType</key>
						<string>Subroutine</string>
						<key>Parameters</key>
						<array>
							<string>local_Window Title</string>
						</array>
						<key>ReturnsValue</key>
						<false/>
					</dict>
				</array>
				<key>UID</key>
				<string>3447E395-DDE1-4BBF-8CAE-AC5AEF4CC125</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997043</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>From front application and selection to mdLink string value</string>
						<key>ActionUID</key>
						<integer>15997044</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    // Rob Trew @ 2020

    // Copy Markdown Link to front document, URL, or resource.
    // Ver 0.34

    // Switched to running app-specific macros by UUID
    // fetched from a JSON dictionary stored in a
    // uuidsForMDLink KM variable.

    // If this variable is not found, or a UUID retrieved
    // from it is not found, then the dictionary is regenerated.

    // The regeneration, which will happen on the first
    // run, but should only be needed thereafter when
    // new sub-macros are added, will activate Keyboard Maestro.app

    // Normally use of the macro will, however, normally
    // bypass Keyboard Maestro.app and run through
    // Keyboard Maestro Engine instead.

    ObjC.import("AppKit");

    const kmGroupName = "MD link tools";

    // ---------------------- MAIN -----------------------
    // main :: IO ()
    // eslint-disable-next-line max-lines-per-function
    const main = () =&gt; {
        const bundleID = frontAppBundleId();

        return either(
            msg =&gt; (
                alert("Copy as Markdown link")(msg),
                msg
            )
        )(
            mdLink =&gt; mdLink
        )(
            bindLR(
                void 0 !== bundleID
                    ? Right(bundleID)
                    : Left(
                        "No active application detected"
                    )
            )(linkForBundleLR)
        );
    };

    // linkForBundleLR :: String -&gt; Either String String
    const linkForBundleLR = bundleID =&gt;
        // ------------ BROWSER ? ------------

        [
            "com.apple.Safari",
            "com.google.Chrome",
            "com.microsoft.edgemac",
            "com.vivaldi.Vivaldi",
            "com.kagi.kagimacOS",
            "com.operasoftware.Opera",
            "company.thebrowser.Browser"
        ].includes(bundleID)
            ? browserLinkLR(bundleID)
            : (() =&gt; {
                // ---- APP-SPECIFIC MACRO ? -----
                const
                    kme = Application("Keyboard Maestro Engine"),
                    dctUUID = either(
                        msg =&gt; (
                            // eslint-disable-next-line no-console
                            console.log(
                                "BundleID map had to be regenerated",
                                msg
                            ),
                            // Regenerated UUID dictionary
                            updatedUUIDMap()
                        )
                    )(
                        // UUID dictionary from existing
                        // KM Variable
                        dct =&gt; dct
                    )(
                        jsonParseLR(
                            kme.getvariable("uuidsForMDLink")
                        )
                    );

                return linkFromUUID(kme)(bundleID)(
                    dctUUID[bundleID]
                );
            })();

    // linkFromUUID :: Application -&gt;
    // String -&gt; String -&gt; String
    const linkFromUUID = kme =&gt;
        bundleID =&gt; maybeUUID =&gt; Boolean(maybeUUID)
            ? either(
                // If the UUID wasn"t found,
                // then run a new one from an
                // updated dictionary.
                () =&gt; (
                    bindLR(
                        doScriptLR(kme)(
                            updatedUUIDMap()[bundleID]
                        )
                    )(
                        // Link after use of alternate UUID
                        () =&gt; Right(
                            kme.getvariable("mdLink")
                        )
                    )
                )
            )(
                // Link read after  with UUID
                () =&gt; Right(kme.getvariable("mdLink"))
            )(
                // Run macro with this UUID if possible.
                doScriptLR(kme)(maybeUUID)
            )
            : appFrontWindowMDLinkLR(bundleID);


    // doScriptLR :: UUID -&gt; Either String String
    const doScriptLR = kme =&gt;
        uuid =&gt; {
            try {
                return (
                    kme.doScript(uuid),
                    Right(uuid)
                );
            } catch (e) {
                return Left(
                    `Macro UUID :: ${uuid}\n\n${e.message}`
                );
            }
        };

    // -------------- BUNDLEID -&gt; UUID MAP ---------------

    // updatedUUIDMap :: IO () -&gt; { bundleID :: UUID }
    const updatedUUIDMap = () =&gt; {
        const
            macroGroupName = "MD Link tools",
            mdLinkToolsGroups = Application(
                "Keyboard Maestro"
            ).macroGroups.where({
                name: macroGroupName
            });

        return either(
            alert("Copy as MD Link - Map bundle to UUID")
        )(
            dictUUIDs =&gt; (
                Application("Keyboard Maestro Engine")
                    .setvariable("uuidsForMDLink", {
                        to: JSON.stringify(
                            dictUUIDs, null, 2
                        )
                    }),
                dictUUIDs
            )
        )(
            0 &lt; mdLinkToolsGroups.length
                ? (() =&gt; {
                    const
                        instances = mdLinkToolsGroups.at(0)
                            .macros()
                            .flatMap(macro =&gt; {
                                const k = macro.name();

                                return k.includes(".")
                                    ? [[k, macro.id()]]
                                    : [];
                            });

                    return Right(
                        instances.reduce(
                            (a, [bundle, uuid]) =&gt; Object.assign(
                                a, {
                                [bundle]: uuid
                            }
                            ), {}
                        )
                    );
                })()
                : Left(
                    `Macro group not found:\n\n\t${macroGroupName}`
                )
        );
    };


    // --------------------- BROWSERS ----------------------

    // browserLinkLR :: String -&gt; Either String IO String
    const browserLinkLR = bundleID =&gt; {
        const
            w = Application(bundleID).windows.at(0),
            anySelectedText = copiedText(),
            anyHighlight = 0 &lt; anySelectedText.length
                ? `#:~:text=${encodeURIComponent(anySelectedText)}`
                : "";

        return "company.thebrowser.Browser" !== bundleID
            ? w.exists()
                ? w.tabs.at(0).exists()
                    ? (() =&gt; {
                        const
                            tab = w[
                                [
                                    "com.apple.Safari",
                                    "com.kagi.kagimacOS"
                                ]
                                    .includes(bundleID)
                                    ? "currentTab"
                                    : "activeTab"
                            ]();

                        return Right(
                            `[${tab.name()}](${tab.url()}${anyHighlight})`
                        );
                    })()
                    : Left(
                        `No open tabs in front window of ${bundleID}`
                    )
                : Left(`No windows open in ${bundleID}`)
            : Right(
                (() =&gt; {
                    const tab = w.activeTab;

                    return `[${tab.title()}](${tab.url()}${anyHighlight})`;
                })()
            );
    };


    const copiedText = () =&gt; {
        const
            sa = Object.assign(
                Application.currentApplication(),
                { includeStandardAdditions: true }
            );

        return (
            sa.setTheClipboardTo(""),
            Application("Keyboard Maestro Engine")
                .doScript(`&lt;dict&gt;
                &lt;key&gt;Action&lt;/key&gt;
                &lt;string&gt;Copy&lt;/string&gt;
                &lt;key&gt;IsDisclosed&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;CutCopyPaste&lt;/string&gt;
                &lt;key&gt;NotifyOnTimeOut&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;TimeOutAbortsMacro&lt;/key&gt;
                &lt;true/&gt;
                &lt;key&gt;TimeOutPeriod&lt;/key&gt;
                &lt;real&gt;1&lt;/real&gt;
                &lt;/dict&gt;`),
            sa.theClipboard()
        );
    };


    // ----------------------- JXA -----------------------


    // frontAppBundleId :: () -&gt; String
    const frontAppBundleId = () =&gt; {
        const uw = ObjC.unwrap;

        return uw(uw(
            $.NSWorkspace.sharedWorkspace.activeApplication
        ).NSApplicationBundleIdentifier);
    };




    // ------- DEFAULT - DOCUMENT OF FRONT WINDOW --------

    // appFrontWindowMDLinkLR :: String -&gt; Either String String
    const appFrontWindowMDLinkLR = bundleID =&gt; {
        const
            procs = Object.assign(
                Application("System Events"), {
                includeStandardAdditions: true
            })
                .applicationProcesses.where({
                    bundleIdentifier: bundleID
                });

        return bindLR(
            bindLR(
                procs.length &gt; 0
                    ? Right(procs.at(0).windows)
                    : Left(`Application not found: ${bundleID}`)
            )(ws =&gt; ws.length &gt; 0
                ? Right(ws.at(0))
                : Left(`No windows found for ${bundleID}`))
        )(w =&gt; {
            const
                uw = ObjC.unwrap,
                [winTitle, maybeDocURL] = [
                    "AXTitle", "AXDocument"
                ]
                    .map(appID =&gt; uw(
                        w.attributes.byName(appID).value()
                    ));

            return Boolean(maybeDocURL)
                ? Right(`[${winTitle}](${maybeDocURL})`)
                : Left(
                    [
                        `Window "${winTitle}" of:\n\n\t${bundleID}`,
                        "\nmay not be a document window.",
                        `\nConsider adding a macro named "${bundleID}"`,
                        `to the KM Group "${kmGroupName}".`,
                        "\n(Or request such a macro, which should",
                        "save a [label](url) string) in the",
                        "KM variable \"mdLink\")",
                        "on the Keyboard Maestro forum)."
                    ].join("\n")
                );
        });
    };

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                includeStandardAdditions: true
            });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left
            ? m
            : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);


    // jsonParseLR :: String -&gt; Either String a
    const jsonParseLR = s =&gt; {
        // Either a message, or a JS value obtained
        // from a successful parse of s.
        try {
            return Right(JSON.parse(s));
        } catch (e) {
            return Left(
                `${e.message} (line:${e.line} col:${e.column})`
            );
        }
    };

    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        // eslint-disable-next-line no-console
        console.log(
            args
                .map(JSON.stringify)
                .join(" -&gt; ")
        );

    // MAIN ---
    return main();
})();

</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Copy to clipboard both as MD links and as RTF labelled hyperlinks</string>
						<key>ActionUID</key>
						<integer>15997045</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    // Rob Trew @2021, @2022

    // Value of KM mdLink variable placed in clipboard,
    // both as plain text,
    // and also as a labelled (and styled) RTF hyperlink.

    // Ver 0.2 added RTF link style options.
    // Ver 0.3 updated link style font, size, color.
    // Ver 0.4 added a pasteboard item for Bike Outliner

    ObjC.import("AppKit");

    // main :: IO ()
    const main = () =&gt; {
        const linkStyle = {
            "color": "#ACACAC",
            "font-family": "Helvetica Neue, sans-serif",
            "font-size": "13px"
        };

        const
            md = Application("Keyboard Maestro Engine")
            .getvariable("mdLink"),
            labelLinks = mdLinkPartPairs(md);

        return (
            copyTypedString(true)(
                "public.utf8-plain-text"
            )(md),
            copyTypedString(false)(
                "com.hogbaysoftware.bike.xml"
            )(
                bikeLinksXML(labelLinks)
            ),
            either(
                alert("Copy as RTF Link")
            )(
                copyTypedString(false)("public.rtf")
            )(
                rtfFromHTML(
                    styledLinks(linkStyle)(
                        labelLinks
                    )
                )
            ),
            md
        );
    };


    // ---------------------- LINKS ----------------------

    const bikeLinksXML = labelLinks =&gt; {
        const
            ps = labelLinks.map(
                ([k, url]) =&gt;
                    `&lt;li&gt;&lt;p&gt;&lt;a href="${url}"&gt;${k}&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;`
            ).join("\n");

        return `&lt;html&gt;&lt;body&gt;&lt;ul&gt;${ps}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;`;
    };

    // copyTypedString :: Bool -&gt; String -&gt; String -&gt; IO ()
    const copyTypedString = blnClear =&gt;
        // public.html, public.rtf, public.utf8-plain-text
        pbType =&gt; s =&gt; {
            const pb = $.NSPasteboard.generalPasteboard;

            return (
                blnClear &amp;&amp; pb.clearContents,
                pb.setStringForType(
                    $(s),
                    $(pbType)
                )
            );
        };

    // cssTag :: Dict {String :: String} -&gt; String
    const cssTag = settings =&gt; {
        const
            kvs = Object.entries(settings)
            .map(([k, v]) =&gt; `${k}: ${v};`)
            .join(" "),
            css = `p { ${kvs} }`;

        return `&lt;style type="text/css"&gt;${css}&lt;/style&gt;`;
    };

    // htmlEncoded :: String -&gt; String
    const htmlEncoded = s =&gt; {
        const rgx = /[\w\s]/u;

        return [...s].map(
            c =&gt; rgx.test(c) ? (
                c
            ) : `&amp;#${c.codePointAt(0)};`
        ).join("");
    };


    // mdLinkPartPairs :: String -&gt; [(String, String)]
    const mdLinkPartPairs = s =&gt;
        lines(s).map(x =&gt; {
            const ab = x.trim().split("](");

            return 2 !== ab.length ? (
                Tuple(s)("")
            ) : Tuple(ab[0].slice(1))(
                ab[1].slice(0, -1)
            );
        });


    // rtfFromHTML :: String -&gt; Either String String
    const rtfFromHTML = strHTML =&gt; {
        const
            as = $.NSAttributedString.alloc
            .initWithHTMLDocumentAttributes($(strHTML)
            .dataUsingEncoding($.NSUTF8StringEncoding),
            0
            );

        return bindLR(
            "function" !== typeof as
            .dataFromRangeDocumentAttributesError ? (
                    Left("String could not be parsed as HTML")
                ) : Right(as)
        )(
            // Function bound if Right value obtained above:
            htmlAS =&gt; {
                const
                    error = $(),
                    rtfData = htmlAS
                    .dataFromRangeDocumentAttributesError({
                        "location": 0,
                        "length": htmlAS.length
                    }, {
                        DocumentType: "NSRTF"
                    },
                    error
                    );

                return Boolean(
                    ObjC.unwrap(rtfData) &amp;&amp; !error.code
                ) ? Right(
                        ObjC.unwrap($.NSString.alloc
                        .initWithDataEncoding(
                            rtfData,
                            $.NSUTF8StringEncoding
                        ))
                    ) : Left(ObjC.unwrap(
                        error.localizedDescription
                    ));
            }
        );
    };

    // styledLinks :: Dict -&gt; [(String, String)] -&gt; String
    const styledLinks = styleDict =&gt;
        // One or more &lt;a href&gt; lines, wrapped in &lt;p&gt;...&lt;/p&gt;
        // and preceded by a &lt;style&gt; tag based on styleDict.
        kvs =&gt; {
            const
                css = cssTag(styleDict),
                linkTags = kvs.map(kv =&gt; {
                    const [label, url] = biList(kv).map(
                            htmlEncoded
                        ),
                        labelOrFullLink = Boolean(url) ? (
                            `&lt;a href="${url}"&gt;${label}&lt;/a&gt;`
                        ) : label;

                    return `${labelOrFullLink}`;
                })
                .join("&lt;br&gt;");

            return `${css}\n&lt;p&gt;${linkTags}&lt;/p&gt;`;
        };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });

    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
    // A pair of values, possibly of
    // different types.
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2,
            *[Symbol.iterator]() {
                for (const k in this) {
                    if (!isNaN(k)) {
                        yield this[k];
                    }
                }
            }
        });

    // biList :: (a, a) -&gt; [a]
    const biList = ab =&gt;
        // A list of two items derived from a tuple.
        Array.from(ab);

    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e ? (
            fl(e.Left)
        ) : fr(e.Right);

    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // string delimited by newline and or CR.
        0 &lt; s.length ? (
            s.split(/[\r\n]+/u)
        ) : [];

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>295</integer>
						<key>IsActive</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string>%Variable%mdLink%</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Notification</string>
						<key>ActionUID</key>
						<integer>15997046</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Variable</string>
									<key>Variable</key>
									<string>mdLink</string>
									<key>VariableConditionType</key>
									<string>IsNot</string>
									<key>VariableValue</key>
									<string></string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997048</integer>
								<key>MacroActionType</key>
								<string>Notification</string>
								<key>SoundName</key>
								<string>Glass</string>
								<key>Subtitle</key>
								<string>Nothing copied</string>
								<key>Text</key>
								<string>%Application%1%</string>
								<key>Title</key>
								<string>%ExecutingMacro% and RTF labelled hyperlink</string>
							</dict>
						</array>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997047</integer>
								<key>MacroActionType</key>
								<string>Notification</string>
								<key>SoundName</key>
								<string>Glass</string>
								<key>Subtitle</key>
								<string></string>
								<key>Text</key>
								<string>%Variable%mdLink%</string>
								<key>Title</key>
								<string>%ExecutingMacro% and RTF labelled hyperlink</string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15487694</integer>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string>%Delete%</string>
								<key>Variable</key>
								<string>mdLink</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>591010979.372293</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:239,239,239,255=↓=86=2=0=0=KMCOLOR:255,0,0,255</string>
				<key>ModificationDate</key>
				<real>744905251.65038097</real>
				<key>Name</key>
				<string>Copy as Markdown link</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>46</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>2304</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>6ABBE175-6098-4799-9C62-418126866B96</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997197</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Copy Markdown link from MarginNote 3'))(x =&gt; x)(
            bindLR(
                menuItemClickedLR('MarginNote 3')([
                    'Edit', 'Copy note URL'
                ])
            )(_ =&gt; {
                const strAddr = (
                    delay(0.2),
                    clipboardText()
                );
                return bindLR(
                    strAddr.startsWith('marginnote') ? (
                        Right(strAddr)
                    ) : Left('No address copied')
                )(address =&gt; bindLR(
                    menuItemClickedLR('MarginNote 3')([
                        'Edit', 'Copy'
                    ])
                )(_ =&gt; {
                    const strName = (
                        delay(0.5), // ADJUST HERE ...
                        clipboardText()
                    );
                    return !strName.startsWith('marginnote') ? (
                        Right('[' +
                            strName.split(/\n/)[0] +
                            '](' + address + ')')
                    ) : Left('No Name copied - try increasing delay ...')
                }))
            })
        );

    // alert :: String -&gt; String -&gt; IO String
    const alert = title =&gt; s =&gt; {
        const
            sa = Object.assign(Application('System Events'), {
                includeStandardAdditions: true
            });
        return (
            sa.activate(),
            sa.displayDialog(s, {
                withTitle: title,
                buttons: ['OK'],
                defaultButton: 'OK'
            }),
            s
        );
    };


    // clipboardText :: IO () -&gt; String
    const clipboardText = () =&gt;
        // Any plain text in the clipboard.
        ObjC.unwrap(
            $.NSString.alloc.initWithDataEncoding(
                $.NSPasteboard.generalPasteboard
                .dataForType($.NSPasteboardTypeString),
                $.NSUTF8StringEncoding
            )
        );

    // menuItemClickedLR :: String -&gt; [String] -&gt; Either String IO String
    const menuItemClickedLR = strAppName =&gt; menuParts =&gt; {
        const intMenuPath = menuParts.length;
        return 1 &lt; intMenuPath ? (() =&gt; {
            const
                appProcs = Application('System Events')
                .processes.where({
                    name: strAppName
                });
            return 0 &lt; appProcs.length ? (() =&gt; {
                Application(strAppName).activate();
                delay(0.1);
                return bindLR(
                    menuParts.slice(1, -1)
                    .reduce(
                        (lra, x) =&gt; bindLR(lra)(a =&gt; {
                            const menuItem = a.menuItems[x];
                            return menuItem.exists() ? (
                                Right(menuItem.menus[x])
                            ) : Left('Menu item not found: ' + x);
                        })(),
                        (() =&gt; {
                            const
                                k = menuParts[0],
                                menu = appProcs[0].menuBars[0]
                                .menus.byName(k);
                            return menu.exists() ? (
                                Right(menu)
                            ) : Left('Menu not found: ' + k);
                        })()
                    )
                )(xs =&gt; {
                    const
                        k = menuParts[intMenuPath - 1],
                        items = xs.menuItems,
                        strPath = [strAppName]
                        .concat(menuParts).join(' &gt; ');
                    return bindLR(
                        items[k].exists() ? (
                            Right(items[k])
                        ) : Left('Menu item not found: ' + k)
                    )(x =&gt; x.enabled() ? (
                        x.click(),
                        Right('Clicked: ' + strPath)
                    ) : Left(
                        'Menu item disabled : ' + strPath
                    ))
                })
            })() : Left(strAppName + ' not running.');
        })() : Left(
            'MenuItemClickedLR needs a menu path of 2+ items.'
        );
    };


    // GENERIC FUNCTIONS ----------------------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt; mf =&gt;
        undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt; fr =&gt; e =&gt;
        'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>593718996.65122902</real>
				<key>ModificationDate</key>
				<real>634818696.82369196</real>
				<key>Name</key>
				<string>QReader.MarginStudyMac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>22FB516D-D15A-420C-99B0-191EE1138BA1</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997163</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>org.mozilla.firefox</string>
							<key>Name</key>
							<string>Firefox</string>
							<key>NewFile</key>
							<string>/Applications/Firefox.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997164</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>37</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
						<key>TargetApplication</key>
						<dict/>
						<key>TargetingType</key>
						<string>Front</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>ActionUID</key>
						<integer>15997165</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997166</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%FrontWindowName%](%SystemClipboard%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620235747.35165203</real>
				<key>ModificationDate</key>
				<real>634818691.54600894</real>
				<key>Name</key>
				<string>org.mozilla.firefox</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>196FB146-050B-474E-B28A-2C8CB03F1D42</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997191</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997192</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>net.shinyfrog.bear</string>
							<key>Name</key>
							<string>Bear</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997193</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Note</string>
							<string>Copy Link To Note</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>net.shinyfrog.bear</string>
							<key>Name</key>
							<string>Bear</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997194</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997195</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Rob Trew @2020
    // Copy Bear selection as MD Link.

    const main = () =&gt;
        either(
            alert('Copy as MD Link')
        )(
            copyText
        )(
            mdLinkFromClipTypes(
                'net.shinyfrog.bear.url-name'
            )(
                'public.utf8-plain-text'
            )
        );

    // ---------- LINK PARTS FROM CLIPBOARD TYPES ----------

    // mdLinkFromClipTypes UTI String -&gt; 
    // UTI String -&gt; Either String MDLink
    const mdLinkFromClipTypes = nameUTI =&gt;
        urlUTI =&gt; bindLR(
            clipOfTypeLR(nameUTI)
        )(name =&gt; bindLR(
            clipOfTypeLR(urlUTI)
        )(url =&gt; Right(`[${name}](${url})`)));


    // ------------- JAVASCRIPT FOR AUTOMATION -------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        // ObjC.import('AppKit');
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        // ObjC.import('AppKit');
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>622068180.07188797</real>
				<key>ModificationDate</key>
				<real>678465748.77456903</real>
				<key>Name</key>
				<string>net.shinyfrog.bear</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>EF7011E5-1758-42DC-B377-865EB185D842</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997020</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAd3KjV7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Tested for Soulver 3</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997021</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997022</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Sheet</string>
							<string>Copy Link to Sheet</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>app.soulver.appstore.mac</string>
							<key>Name</key>
							<string>Soulver 3</string>
							<key>NewFile</key>
							<string>/Applications/Soulver 3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until text clipboard not empty</string>
						<key>ActionUID</key>
						<integer>15997023</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997024</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>local_URL</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997025</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>local_URL</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>const
    bundleID = 'app.soulver.mac',
    se = (
        Application(bundleID).activate(),
        Application('System Events')
    ),
    procs = se.applicationProcesses.where({
        name: 'Soulver 3'
    }),
    sheetName = 0 &lt; procs.length ? (
        procs.at(0).windows.at(0).name()
    ) : 'Soulver 3 sheet name not found.';

return `[${sheetName}](${kmvar.local_URL})`;</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740416244.844733</real>
				<key>ModificationDate</key>
				<real>740416261.00207806</real>
				<key>Name</key>
				<string>app.soulver.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>482DAAA1-E342-40D1-822D-988BB9AA8B34</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997077</integer>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC78BQAAKwAAAAEA
						AAD0BQAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bFxmMFxmc3dpc3NcZmNoYXJzZXQw
						IEhlbHZldGljYTtcZjFcZm5pbFxm
						Y2hhcnNldDAgTWVubG8tUmVndWxh
						cjtcZjJcZnN3aXNzXGZjaGFyc2V0
						MCBIZWx2ZXRpY2EtT2JsaXF1ZTsK
						fQp7XGNvbG9ydGJsO1xyZWQyNTVc
						Z3JlZW4yNTVcYmx1ZTI1NTtccmVk
						MFxncmVlbjBcYmx1ZTA7fQp7XCpc
						ZXhwYW5kZWRjb2xvcnRibDs7XGNz
						c3JnYlxjMFxjMFxjMFxjODQ3MDZc
						Y25hbWUgY29udHJvbFRleHRDb2xv
						cjt9ClxwYXJkXHR4NTYwXHR4MTEy
						MFx0eDE2ODBcdHgyMjQwXHR4Mjgw
						MFx0eDMzNjBcdHgzOTIwXHR4NDQ4
						MFx0eDUwNDBcdHg1NjAwXHR4NjE2
						MFx0eDY3MjBccGFyZGlybmF0dXJh
						bFxwYXJ0aWdodGVuZmFjdG9yMAoK
						XGYwXGZzMzBcZnNtaWxsaTE1MzY0
						IFxjZjIgRm9yIGEgbWVudSBvZiBt
						YXJrZG93biBsaW5rcyBpbiB0aGUg
						ZnJvbnQgZG9jdW1lbnQgaW4gVGFz
						a1BhcGVyIDMsIGVkaXQgOlwKXHBh
						cmRcdHg1NjBcdHgxMTIwXHR4MTY4
						MFx0eDIyNDBcdHgyODAwXHR4MzM2
						MFx0eDM5MjBcdHg0NDgwXHR4NTA0
						MFx0eDU2MDBcdHg2MTYwXHR4Njcy
						MFxwYXJkaXJuYXR1cmFsXHBhcnRp
						Z2h0ZW5mYWN0b3IwCgpcZjFcZnMy
						NCBcY2YwIFwKICAgIGNvbnN0IHNo
						b3dMaW5rc0luVGFza1BhcGVyRnJv
						bnREb2MgPSBmYWxzZTtcClwKXHBh
						cmRcdHg1NjBcdHgxMTIwXHR4MTY4
						MFx0eDIyNDBcdHgyODAwXHR4MzM2
						MFx0eDM5MjBcdHg0NDgwXHR4NTA0
						MFx0eDU2MDBcdHg2MTYwXHR4Njcy
						MFxwYXJkaXJuYXR1cmFsXHBhcnRp
						Z2h0ZW5mYWN0b3IwCgpcZjBcZnMz
						MFxmc21pbGxpMTUzNjQgXGNmMiBu
						ZWFyIHRoZSB0b3Agb2YgdGhlIEph
						dmFTY3JpcHQgZm9yIEF1dG9tYXRp
						b24gc2NyaXB0IGJlbG93LCB0bzpc
						ClwKCQpcZjFcZnMyNCBcY2YwIGNv
						bnN0IHNob3dMaW5rc0luVGFza1Bh
						cGVyRnJvbnREb2MgPSB0cnVlO1wK
						ClxmMFxmczMwXGZzbWlsbGkxNTM2
						NCBcY2YyIFwKT3IsIG9yIGEgbWVu
						dSBvZiBsaW5rcyBrZXB0IGluIGEg
						cGFydGljdWxhciB0ZXh0IGZpbGUs
						IGluIFttYXJrZG93biBsaW5rXSh1
						cmwpIGZvcm1hdDpcClwKXHBhcmRc
						dHg1NjBcdHgxMTIwXHR4MTY4MFx0
						eDIyNDBcdHgyODAwXHR4MzM2MFx0
						eDM5MjBcdHg0NDgwXHR4NTA0MFx0
						eDU2MDBcdHg2MTYwXHR4NjcyMFxw
						YXJkaXJuYXR1cmFsXHBhcnRpZ2h0
						ZW5mYWN0b3IwCgpcZjFcZnMyNCBc
						Y2YwIC0KXGYwXGZzMzBcZnNtaWxs
						aTE1MzY0IFxjZjIgIGVkaXQgdGhl
						IHZhbHVlIG9mIApcZjFcZnMyNCBc
						Y2YwIHNob3dMaW5rc0luVGFza1Bh
						cGVyRnJvbnREb2MgClxmMFxmczMw
						XGZzbWlsbGkxNTM2NCBcY2YyIHRv
						IApcZjFcZnMyNCBcY2YwIGZhbHNl
						LCBcCi0gClxmMFxmczMwXGZzbWls
						bGkxNTM2NCBcY2YyIHNwZWNpZnkg
						YSBmaWxlIHBhdGggYXMgdGhlIHZh
						bHVlIG9mIHRoZSAKXGYyXGkgbGlu
						a0xpc3RGaWxlUGF0aCAKXGYwXGkw
						ICB2YXJpYWJsZSBiZWxvdy59AQAA
						ACMAAAABAAAABwAAAFRYVC5ydGYQ
						AAAA+ZNGX7YBAAAAAAAAAAAAAA==
						</data>
						<key>Title</key>
						<string>A menu of links EITHER in a specified text file, OR in the front document in TaskPaper</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>SPECIFY HERE THE FILE PATH A TEXT FILE containing MD links of the pattern [label](url)</string>
						<key>ActionUID</key>
						<integer>15997078</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>~/projects/activeProjects.taskpaper</string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997079</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // Menu of the labels of any links 
    // (assumed to be in MD format) in the front
    // TaskPaper document, or in a file at the filePath 
    // specified by a Keyboard Maestro variable.

    // If one or more labels are chosen in the menu,
    // the corresponding links are opened.


    // --------------------- SETTINGS ----------------------

    // EITHER a menu of links in the TP3 front document,
    const showLinksInTaskPaperFrontDoc = true;

    // OR a menu of links in a file at a given path,
    // specified by a Keyboard Maestro variable.

    // e.g: '~/projects/activeProjects.taskpaper'
    const filePathKMVarName = 'linkListFilePath';


    // --------------------- MENU CODE ---------------------
    // main :: IO ()
    const main = () =&gt; {
        return either(
            msg =&gt; msg.startsWith('User cancelled') ? (
                msg
            ) : alert('Link menu')(msg)
        )(openLinks)(
            bindLR(
                showLinksInTaskPaperFrontDoc ? (
                    taskPaperFrontDocFilePathLR()
                ) : filePathFromKMVariableLR(
                    filePathKMVarName
                )
            )(fp =&gt; {
                const menuKVs = mdLinkValuesInFile(fp);
                return 0 &lt; menuKVs.length ? (
                    bindLR(
                        showMenuLR(true)('Links')(
                            menuKVs.map(x =&gt; x.label)
                        )
                    )(compose(
                        Right,
                        menuChoiceValues(
                            menuKVs
                        )('label')('link')
                    ))
                ) : Left('No links found in document.');
            })
        );
    };


    // ------------ FRONT DOCUMENT IN TASKPAPER ------------

    // taskPaperFrontDocFilePathLR :: Either String FilePath
    const taskPaperFrontDocFilePathLR = () =&gt; {
        const
            tp = Application('TaskPaper'),
            ds = tp.documents;
        return 0 &lt; ds.length ? (
            Right(ds.at(0).file().toString())
        ) : Left('No document found in TaskPaper');
    };


    // ---- FILEPATH GIVEN IN KEYBOARD MAESTRO VARIABLE ----
    const filePathFromKMVariableLR = kmVarName =&gt; {
        const
            fp = Application('Keyboard Maestro Engine')
            .getvariable(kmVarName);
        return Boolean(fp) ? (() =&gt; {
            const fpPath = filePath(fp);
            return doesFileExist(fpPath) ? (
                Right(fpPath)
            ) : Left('No file found at: ' + fpPath);
        })() : Left(
            'No value found for KM variable: "' + (
                kmVarName + '"'
            )
        );
    };


    // ----------- CHOICE OF LINKS IN GIVEN FILE -----------

    // mdLinkValuesInFile :: FilePath -&gt; 
    // [{label :: String, link :: String }]
    const mdLinkValuesInFile = fp =&gt;
        sortBy(comparing(x =&gt; x.label))(
            lines(readFile(fp)).flatMap(
                x =&gt; x.includes('](') ? (
                    parse(mdLinkParse())(strip(x))
                ) : []
            ).map(fst)
        );

    // openLinks :: [URL String] -&gt; IO [URL String]
    const openLinks = urls =&gt; {
        const
            sa = Object.assign(
                Application.currentApplication(), {
                    includeStandardAdditions: true
                });
        return urls.map(x =&gt; (
            sa.openLocation(x),
            x
        ));
    };

    // menuChoiceValues :: [Dict a] -&gt;
    // String -&gt; String -&gt; [String] -&gt; [a]
    const menuChoiceValues = menuKVs =&gt;
        // A map from a list of keys to a list of values,
        // given a list of dictionaries, 
        // with their label and value keys,
        // and some subset of label keys.
        labelKey =&gt; valueKey =&gt; ks =&gt; {
            const
                dct = menuKVs.reduce(
                    (a, x) =&gt; Object.assign(
                        a, {
                            [x[labelKey]]: x[valueKey]
                        }
                    ), {}
                );
            return ks.flatMap(k =&gt; {
                const v = dct[k];
                return void 0 !== v ? (
                    [v]
                ) : [];
            });
        };

    // ------------------- PARSING LINKS -------------------

    // mdLinkParse :: () -&gt; 
    // Parser {title :: String, link :: String}
    const mdLinkParse = () =&gt;
        bindP(
            char('[')
        )(_ =&gt; bindP(
            many(noneOf(']'))
        )(title =&gt; bindP(
            string('](')
        )(_ =&gt; bindP(
            many(noneOf(')'))
        )(link =&gt; pureP({
            label: title.join(''),
            link: link.join('')
        })))));

    // ------------ GENERIC PARSER COMBINATORS -------------

    // Parser :: String -&gt; [(a, String)] -&gt; Parser a
    const Parser = f =&gt;
        // A function lifted into a Parser object.
        ({
            type: 'Parser',
            parser: f
        });


    // altP (&lt;|&gt;) :: Parser a -&gt; Parser a -&gt; Parser a
    const altP = p =&gt;
        // p, or q if p doesn't match.
        q =&gt; Parser(s =&gt; {
            const xs = parse(p)(s);
            return 0 &lt; xs.length ? (
                xs
            ) : parse(q)(s);
        });


    // apP &lt;*&gt; :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const apP = pf =&gt;
        // A new parser obtained by the application 
        // of a Parser-wrapped function,
        // to a Parser-wrapped value.
        p =&gt; Parser(
            s =&gt; parse(pf)(s).flatMap(
                vr =&gt; parse(
                    fmapP(vr[0])(p)
                )(vr[1])
            )
        );


    // bindP (&gt;&gt;=) :: Parser a -&gt; 
    // (a -&gt; Parser b) -&gt; Parser b
    const bindP = p =&gt;
        // A new parser obtained by the application of 
        // a function to a Parser-wrapped value.
        // The function must enrich its output, lifting it 
        // into a new Parser.
        // Allows for the nesting of parsers.
        f =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                tpl =&gt; parse(f(tpl[0]))(tpl[1])
            )
        );


    // char :: Char -&gt; Parser Char
    const char = x =&gt;
        // A particular single character.
        satisfy(c =&gt; x == c);


    // fmapP :: (a -&gt; b) -&gt; Parser a -&gt; Parser b  
    const fmapP = f =&gt;
        // A new parser derived by the structure-preserving 
        // application of f to the value in p.
        p =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                vr =&gt; Tuple(f(vr[0]))(vr[1])
            )
        );


    // liftA2P :: (a -&gt; b -&gt; c) -&gt; 
    // Parser a -&gt; Parser b -&gt; Parser c
    const liftA2P = op =&gt;
        // The binary function op, lifted
        // to a function over two parsers.
        p =&gt; apP(fmapP(op)(p));


    // many :: Parser a -&gt; Parser [a]
    const many = p =&gt; {
        // Zero or more instances of p.
        // Lifts a parser for a simple type of value 
        // to a parser for a list of such values.
        const some_p = p =&gt;
            liftA2P(
                x =&gt; xs =&gt; [x].concat(xs)
            )(p)(many(p));
        return Parser(
            s =&gt; parse(
                0 &lt; s.length ? (
                    altP(some_p(p))(pureP([]))
                ) : pureP([])
            )(s)
        );
    };

    // noneOf :: String -&gt; Parser Char
    const noneOf = s =&gt;
        // Any character not found in the
        // exclusion string.
        satisfy(c =&gt; !s.includes(c));


    // parse :: Parser a -&gt; String -&gt; [(a, String)]
    const parse = p =&gt;
        // The result of parsing s with p.
        s =&gt; {
            // showLog('s', s)
            return p.parser([...s]);
        };


    // pureP :: a -&gt; Parser a
    const pureP = x =&gt;
        // The value x lifted, unchanged, 
        // into the Parser monad.
        Parser(s =&gt; [Tuple(x)(s)]);


    // satisfy :: (Char -&gt; Bool) -&gt; Parser Char
    const satisfy = test =&gt;
        // Any character for which the 
        // given predicate returns true.
        Parser(
            s =&gt; 0 &lt; s.length ? (
                test(s[0]) ? [
                    Tuple(s[0])(s.slice(1))
                ] : []
            ) : []
        );


    // sequenceP :: [Parser a] -&gt; Parser [a]
    const sequenceP = ps =&gt;
        // A single parser for a list of values, derived
        // from a list of parsers for single values.
        Parser(
            s =&gt; ps.reduce(
                (a, q) =&gt; a.flatMap(
                    vr =&gt; parse(q)(snd(vr)).flatMap(
                        first(xs =&gt; fst(vr).concat(xs))
                    )
                ),
                [Tuple([])(s)]
            )
        );


    // string :: String -&gt; Parser String
    const string = s =&gt;
        // A particular string.
        fmapP(cs =&gt; cs.join(''))(
            sequenceP([...s].map(char))
        );


    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK',
                    withIcon: sa.pathToResource('TaskPaper.icns', {
                        inBundle: 'Applications/TaskPaper.app'
                    })
                }),
                s
            );
        };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);
            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );

    // doesFileExist :: FilePath -&gt; IO Bool
    const doesFileExist = fp =&gt; {
        const ref = Ref();
        return $.NSFileManager.defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp)
                .stringByStandardizingPath, ref
            ) &amp;&amp; 1 !== ref[0];
    };

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // filePath :: String -&gt; FilePath
    const filePath = s =&gt;
        // The given file path with any tilde expanded
        // to the full user directory path.
        ObjC.unwrap(ObjC.wrap(s)
            .stringByStandardizingPath);


    // first :: (a -&gt; b) -&gt; ((a, c) -&gt; (b, c))
    const first = f =&gt;
        // A simple function lifted to one which applies
        // to a tuple, transforming only its first item.
        xy =&gt; Tuple(f(xy[0]))(
            xy[1]
        );


    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];


    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // newline-delimited string.
        0 &lt; s.length ? (
            s.split(/[\r\n]/)
        ) : [];


    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // readFile :: FilePath -&gt; IO String
    const readFile = fp =&gt; {
        // The contents of a text file at the
        // path file fp.
        const
            e = $(),
            ns = $.NSString
            .stringWithContentsOfFileEncodingError(
                $(fp).stringByStandardizingPath,
                $.NSUTF8StringEncoding,
                e
            );
        return ObjC.unwrap(
            ns.isNil() ? (
                e.localizedDescription
            ) : ns
        );
    };

    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        console.log(
            args
            .map(JSON.stringify)
            .join(' -&gt; ')
        );


    // showMenuLR :: Bool -&gt; String -&gt; [String] -&gt; 
    // Either String [String]
    const showMenuLR = blnMult =&gt;
        title =&gt; xs =&gt; 0 &lt; xs.length ? (() =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            sa.activate();
            const v = sa.chooseFromList(xs, {
                withTitle: title,
                withPrompt: 'Select' + (
                    blnMult ? (
                        ' one or more of ' +
                        xs.length.toString()
                    ) : ':'
                ),
                defaultItems: xs[0],
                okButtonName: 'OK',
                cancelButtonName: 'Cancel',
                multipleSelectionsAllowed: blnMult,
                emptySelectionAllowed: false
            });
            return Array.isArray(v) ? (
                Right(v)
            ) : Left('User cancelled ' + title + ' menu.');
        })() : Left(title + ': No items to choose from.');


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // strip :: String -&gt; String
    const strip = s =&gt;
        s.trim();

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Clear the linkListFilePath variable, in case similar macros use a different file.</string>
						<key>ActionUID</key>
						<integer>15997080</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620152106.71959996</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:239,239,239,255=↓=86=2=0=0=KMCOLOR:255,0,0,255</string>
				<key>ModificationDate</key>
				<real>659824624.20129597</real>
				<key>Name</key>
				<string>Menu of MD links in File specified by path</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>7E7A7A04-BC05-48B9-9B29-FB0403C0BB42</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997086</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>md.obsidian</string>
							<key>Name</key>
							<string>Obsidian</string>
							<key>NewFile</key>
							<string>/Applications/Obsidian.app</string>
						</dict>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997087</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>Application</key>
									<dict>
										<key>BundleIdentifier</key>
										<string>md.obsidian</string>
										<key>Name</key>
										<string>Obsidian</string>
										<key>NewFile</key>
										<string>/Applications/Obsidian.app</string>
									</dict>
									<key>ConditionType</key>
									<string>FrontWindow</string>
									<key>FrontWindowConditionType</key>
									<string>Exists</string>
									<key>IsFrontApplication</key>
									<false/>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997088</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>3447E395-DDE1-4BBF-8CAE-AC5AEF4CC125</string>
						<key>Parameters</key>
						<array>
							<string>%FrontWindowName%</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>630955437.86829698</real>
				<key>ModificationDate</key>
				<real>740984527.64106596</real>
				<key>Name</key>
				<string>md.obsidian</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>58101A65-1DFB-4B4A-9AC6-9D25B494E33A</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997198</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>local_BundleId</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>return (() =&gt; {
    "use strict";

    // Either an alert message or MD links(s) for any
    // OmniFocus 4 selections
    // Placed in a Keyboard Maestro variable
    // with the name 'mdLink'
    const main = () =&gt; {
        const
            focus = Application(kmvar.local_BundleId),
            doc = focus.documents.at(0);

        return either(
            msg =&gt; (
                alert("MD Link")(msg),
                ""
            )
        )(
            mdLink =&gt; mdLink
        )(
            bindLR(
                doc.exists()
                    ? Right(doc.documentWindows.at(0))
                    : Left("No OmniFocus documents found.")
            )(
                win =&gt; fmapLR(
                    selns =&gt; selns.map(markdownLink)
                    .join("\n")
                )(
                    win.exists()
                        ? focusSelnsLR(win)
                        : Left("No document window found.")
                )
            )
        );
    };


    // markdownLink :: Omnifocus Tree -&gt; String
    const markdownLink = ofTree =&gt; {
        const
            type = "folder" !== (
                ofTree.value().properties().pcls
            )
                ? "task"
                : "folder";

        return `[${ofTree.name()}]` + (
            `(omnifocus:///${type}/${ofTree.id()})`
        );
    };


    // focusSelnsLR :: Window -&gt; Either String OFTrees
    const focusSelnsLR = win =&gt; {
        const
            contentSelns = win.content.selectedTrees,
            panel = 0 &lt; contentSelns.length
                ? contentSelns
                : win.sidebar.selectedTrees;

        return 0 &lt; panel.length
            ? Right(panel())
            : Left("Nothing selected in OmniFocus.");
    };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = lr =&gt;
        // Bind operator for the Either option type.
        // If lr has a Left value then lr unchanged,
        // otherwise the function mf applied to the
        // Right value in lr.
        mf =&gt; "Left" in lr
            ? lr
            : mf(lr.Right);


    // fmapLR (&lt;$&gt;) :: (b -&gt; c) -&gt; Either a b -&gt; Either a c
    const fmapLR = f =&gt;
    // Either f mapped into the contents of any Right
    // value in e, or e unchanged if is a Left value.
        e =&gt; "Left" in e
            ? e
            : Right(f(e.Right));

    // MAIN --
    return main();
})();

</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740492054.76215601</real>
				<key>ModificationDate</key>
				<real>740492531.369488</real>
				<key>Name</key>
				<string>OmniFocus variant</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>MacroTriggerType</key>
						<string>Subroutine</string>
						<key>Parameters</key>
						<array>
							<string>local_BundleId</string>
						</array>
						<key>ReturnsValue</key>
						<false/>
					</dict>
				</array>
				<key>UID</key>
				<string>9BB504DE-9FA1-423A-9B08-8F6075FA3C73</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997156</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>From front application and selection to mdLink string value</string>
						<key>ActionUID</key>
						<integer>15997157</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    // Rob Trew @ 2020

    // Copy Markdown Link to front document, URL, or resource.
    // Ver 0.30

    // Switched to running app-specific macros by UUID
    // fetched from a JSON dictionary stored in a
    // uuidsForMDLink KM variable.

    // If this variable is not found, or a UUID retrieved
    // from it is not found, then the dictionary is regenerated.

    // The regeneration, which will happen on the first
    // run, but should only be needed thereafter when
    // new sub-macros are added, will activate Keyboard Maestro.app

    // Normally use of the macro will, however, normally
    // bypass Keyboard Maestro.app and run through
    // Keyboard Maestro Engine instead.

    ObjC.import("AppKit");

    const kmGroupName = "MD link tools";

    // ---------------------- MAIN -----------------------
    // main :: IO ()
    // eslint-disable-next-line max-lines-per-function
    const main = () =&gt; {
        const bundleID = frontAppBundleId();

        return either(
            msg =&gt; (
                alert("Copy as Markdown link")(msg),
                msg
            )
        )(
            mdLink =&gt; mdLink
        )(
            bindLR(
                void 0 !== bundleID ? (
                    Right(bundleID)
                ) : Left(
                    "No active application detected"
                )
            )(linkForBundleLR)
        );
    };

    // linkForBundleLR :: String -&gt; Either String String
    const linkForBundleLR = bundleID =&gt;
        // ------------ BROWSER ? ------------

        [
            "com.apple.Safari",
            "com.google.Chrome",
            "com.microsoft.edgemac",
            "com.vivaldi.Vivaldi"
        ].includes(bundleID) ? (
            browserLinkLR(bundleID)
        ) : (() =&gt; {
            // ---- APP-SPECIFIC MACRO ? -----
            const
                kme = Application("Keyboard Maestro Engine"),
                dctUUID = either(
                    msg =&gt; (
                        // eslint-disable-next-line no-console
                        console.log(
                            "BundleID map had to be regenerated",
                            msg
                        ),
                        // Regenerated UUID dictionary
                        updatedUUIDMap()
                    )
                )(
                    // UUID dictionary from existing
                    // KM Variable
                    dct =&gt; dct
                )(
                    jsonParseLR(
                        kme.getvariable("uuidsForMDLink")
                    )
                );

            return linkFromUUID(kme)(bundleID)(
                dctUUID[bundleID]
            );
        })();

    // linkFromUUID :: Application -&gt;
    // String -&gt; String -&gt; String
    const linkFromUUID = kme =&gt;
        bundleID =&gt; maybeUUID =&gt; Boolean(maybeUUID) ? (
            either(
                // If the UUID wasn"t found,
                // then run a new one from an
                // updated dictionary.
                () =&gt; (
                    bindLR(
                        doScriptLR(kme)(
                            updatedUUIDMap()[bundleID]
                        )
                    )(
                        // Link after use of alternate UUID
                        () =&gt; Right(
                            kme.getvariable("mdLink")
                        )
                    )
                )
            )(
                // Link read after  with UUID
                () =&gt; Right(kme.getvariable("mdLink"))
            )(
                // Run macro with this UUID if possible.
                doScriptLR(kme)(maybeUUID)
            )
        ) : appFrontWindowMDLinkLR(bundleID);


    // doScriptLR :: UUID -&gt; Either String String
    const doScriptLR = kme =&gt;
        uuid =&gt; {
            try {
                return (
                    kme.doScript(uuid),
                    Right(uuid)
                );
            } catch (e) {
                return Left(
                    `Macro UUID :: ${uuid}\n\n${e.message}`
                );
            }
        };

    // -------------- BUNDLEID -&gt; UUID MAP ---------------

    // updatedUUIDMap :: IO () -&gt; { bundleID :: UUID }
    const updatedUUIDMap = () =&gt; {
        const
            macroGroupName = "MD Link tools",
            mdLinkToolsGroups = Application(
                "Keyboard Maestro"
            ).macroGroups.where({
                name: macroGroupName
            });

        return either(
            alert("Copy as MD Link - Map bundle to UUID")
        )(
            dictUUIDs =&gt; (
                Application("Keyboard Maestro Engine")
                .setvariable("uuidsForMDLink", {
                    to: JSON.stringify(
                        dictUUIDs, null, 2
                    )
                }),
                dictUUIDs
            )
        )(
            0 &lt; mdLinkToolsGroups.length ? (() =&gt; {
                const
                    instances = mdLinkToolsGroups.at(0)
                    .macros()
                    .flatMap(macro =&gt; {
                        const k = macro.name();

                        return k.includes(".") ? (
                            [
                                [k, macro.id()]
                            ]
                        ) : [];
                    });

                return Right(
                    instances.reduce(
                        (a, [bundle, uuid]) =&gt; Object.assign(
                            a, {
                                [bundle]: uuid
                            }
                        ), {}
                    )
                );
            })() : Left(
                `Macro group not found:\n\n\t${macroGroupName}`
            )
        );
    };


    // --------------------- BROWSERS ----------------------

    // browserLinkLR :: String -&gt; Either String IO String
    const browserLinkLR = bundleID =&gt; {
        const
            app = Application(bundleID),
            ws = app.windows;

        return bindLR(
            0 &lt; ws.length ? (
                Right(ws.at(0))
            ) : Left(`No windows open in ${bundleID}`)
        )(
            w =&gt; {
                const tabs = w.tabs;

                return 0 &lt; tabs.length ? (() =&gt; {
                    const
                        tab = w[
                            "com.apple.Safari" === bundleID ? (
                                "currentTab"
                            ) : "activeTab"
                        ]();

                    return Right(
                        `[${tab.name()}](${tab.url()})`
                    );
                })() : Left(
                    `No open tabs in front window of ${bundleID}`
                );
            }
        );
    };

    // ----------------------- JXA -----------------------

    // frontAppBundleId :: () -&gt; String
    const frontAppBundleId = () =&gt; {
        const uw = ObjC.unwrap;

        return uw(uw(
            $.NSWorkspace.sharedWorkspace.activeApplication
        ).NSApplicationBundleIdentifier);
    };

    // ------- DEFAULT - DOCUMENT OF FRONT WINDOW --------

    // appFrontWindowMDLinkLR :: String -&gt; Either String String
    const appFrontWindowMDLinkLR = bundleID =&gt; {
        const
            procs = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                })
            .applicationProcesses.where({
                bundleIdentifier: bundleID
            });

        return bindLR(
            bindLR(
                procs.length &gt; 0 ? (
                    Right(procs.at(0).windows)
                ) : Left(`Application not found: ${bundleID}`)
            )(ws =&gt; ws.length &gt; 0 ? (
                Right(ws.at(0))
            ) : Left(`No windows found for ${bundleID}`))
        )(w =&gt; {
            const
                uw = ObjC.unwrap,
                [winTitle, maybeDocURL] = [
                    "AXTitle", "AXDocument"
                ]
                .map(appID =&gt; uw(
                    w.attributes.byName(appID).value()
                ));

            return Boolean(maybeDocURL) ? (
                Right(`[${winTitle}](${maybeDocURL})`)
            ) : Left(
                [
                    `Window "${winTitle}" of:\n\n\t${bundleID}`,
                    "\nmay not be a document window.",
                    `\nConsider adding a macro named "${bundleID}"`,
                    `to the KM Group "${kmGroupName}".`,
                    "\n(Or request such a macro, which should",
                    "save a [label](url) string) in the",
                    "KM variable \"mdLink\")",
                    "on the Keyboard Maestro forum)."
                ].join("\n")
            );
        });
    };

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Either" === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // jsonParseLR :: String -&gt; Either String a
    const jsonParseLR = s =&gt; {
        // Either a message, or a JS value obtained
        // from a successful parse of s.
        try {
            return Right(JSON.parse(s));
        } catch (e) {
            return Left(
                `${e.message} (line:${e.line} col:${e.column})`
            );
        }
    };

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Copy to clipboard as OrgMode link</string>
						<key>ActionUID</key>
						<integer>15997158</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    // Rob Trew @2021
    // Ver 0.2

    // One or more lines of Orgmode [[link][label]]
    // derived from KM mdLink variable
    // and placed in clipboard.

    ObjC.import("AppKit");

    // main :: IO ()
    const main = () =&gt; {
        const
            kme = Application("Keyboard Maestro Engine"),
            kvs = mdLinkPartPairs(
                kme.getvariable("mdLink")
            ),
            orgLinks = kvs.map(
                kv =&gt; `[[${kv[1]}][${kv[0]}]]`
            )
            .join("\n");

        return (
            kme.setvariable("orgLinks", {
                to: orgLinks
            }),
            copyTypedString(true)(
                "public.utf8-plain-text"
            )(
                orgLinks
            )
        );
    };


    // ---------------------- LINKS ----------------------

    // copyTypedString :: Bool -&gt; String -&gt; String -&gt; IO ()
    const copyTypedString = blnClear =&gt;
        // public.html, public.rtf, public.utf8-plain-text
        pbType =&gt; s =&gt; {
            const pb = $.NSPasteboard.generalPasteboard;

            return (
                blnClear &amp;&amp; pb.clearContents,
                pb.setStringForType(
                    $(s),
                    $(pbType)
                ),
                s
            );
        };


    // mdLinkPartPairs :: String -&gt; [(String, String)]
    const mdLinkPartPairs = s =&gt;
        lines(s).map(x =&gt; {
            const ab = x.trim().split("](");

            return 2 !== ab.length ? (
                Tuple(s)("")
            ) : Tuple(ab[0].slice(1))(
                ab[1].slice(0, -1)
            );
        });

    // --------------------- GENERIC ---------------------

    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2
        });


    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // string delimited by newline and or CR.
        0 &lt; s.length ? (
            s.split(/[\r\n]+/u)
        ) : [];

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Notification</string>
						<key>ActionUID</key>
						<integer>15997159</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Variable</string>
									<key>Variable</key>
									<string>orgLink</string>
									<key>VariableConditionType</key>
									<string>IsNot</string>
									<key>VariableValue</key>
									<string></string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997161</integer>
								<key>MacroActionType</key>
								<string>Notification</string>
								<key>SoundName</key>
								<string>Glass</string>
								<key>Subtitle</key>
								<string>Nothing copied</string>
								<key>Text</key>
								<string>%Application%1%</string>
								<key>Title</key>
								<string>%ExecutingMacro%</string>
							</dict>
						</array>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997160</integer>
								<key>MacroActionType</key>
								<string>Notification</string>
								<key>SoundName</key>
								<string>Glass</string>
								<key>Subtitle</key>
								<string></string>
								<key>Text</key>
								<string>%Variable%orgLinks%</string>
								<key>Title</key>
								<string>%ExecutingMacro%</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>654681523.18336499</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:239,239,239,255=↓=86=2=0=0=KMCOLOR:255,0,0,255</string>
				<key>ModificationDate</key>
				<real>738248394.17644501</real>
				<key>Name</key>
				<string>Copy as OrgMode link</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>EA0FF29C-B381-4DF3-A254-7A10B7767067</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997091</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997092</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>ActionUID</key>
						<integer>15997093</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997094</integer>
						<key>DisplayKind</key>
						<string>Window</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy selected Ulysses item as MD Link

    // main :: IO ()
    const main = () =&gt; {
        const
            kme = Application('Keyboard Maestro Engine'),
            itemName = (
                kme.doScript(windowNamePlist),
                kme.getvariable('windowName')
            );

        return either(
            alert('Copy as MD Link')
        )(
            s =&gt; (
                kme.setvariable('mdLink', {
                    to: s
                }),
                s
            )
        )(
            bindLR(
                clipTextLR()
            )(
                url =&gt; Right(`[${itemName}](${url})`)
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // ---------------- KEYBOARD MAESTRO -----------------

    // windowNamePlist :: XML String
    const windowNamePlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SetVariableToText&lt;/string&gt;
                &lt;key&gt;Text&lt;/key&gt;
                &lt;string&gt;%FrontWindowName%&lt;/string&gt;
                &lt;key&gt;Variable&lt;/key&gt;
                &lt;string&gt;windowName&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631051801.47009397</real>
				<key>ModificationDate</key>
				<real>740397212.23399603</real>
				<key>Name</key>
				<string>com.ulyssesapp.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>0AF05301-0AA9-486B-8668-CE93CBE4C88E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997062</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // com.panic.Transmit
    // vs App Store build:
    // com.panic.transmit.mas

    // main :: IO ()
    const main = () =&gt; {
        const
            transmit = Application('Transmit'),
            ds = transmit.documents;
        return either(
            // Notification
            msg =&gt; msg
        )(
            link =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: link
                }),
                link
            )
        )(bindLR(
            0 &lt; ds.length ? (
                Right(ds.at(0))
            ) : Left('No documents open in Transmit')
        )(doc =&gt; {
            const tabs = doc.tabs;
            return bindLR(
                0 &lt; tabs.length ? (
                    Right(doc.currentTab())
                ) : Left(
                    'No tabs found for document :: doc.name()'
                )
            )(tab =&gt; {
                const fbs = tab.fileBrowsers;
                return bindLR(
                    0 &lt; fbs.length ? (
                        Right(fbs.at(0))
                    ) : Left(
                        'No file browsers found for current tab.'
                    )
                )(fb =&gt; {
                    const selns = fb.selectedBrowserItems;
                    return bindLR(
                        0 &lt; selns.length ? (
                            Right(selns.at(0))
                        ) : Left('Nothing selected in front tab')
                    )(x =&gt; Right(
                        `[${x.name()}]` + (
                            `(${encodeURI('file://' + x.path())})`
                        )
                    ));
                });
            });
        }));
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628543401.21383905</real>
				<key>ModificationDate</key>
				<real>740902490.45909297</real>
				<key>Name</key>
				<string>com.panic.Transmit</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>3E5A8E68-8572-4C16-B8B6-E1CC2AC1B434</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997162</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020
    const
        track = Application('com.spotify.client')
        .currentTrack(),
        idTrack = track.id().split(':')[2];

    return `[${track.name()}](spotify://track/${idTrack})`;
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620241764.56565905</real>
				<key>ModificationDate</key>
				<real>677774302.29004395</real>
				<key>Name</key>
				<string>com.spotify.client</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>9FCDF844-4057-473F-A611-862549F5BA8E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997212</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>F18CB180-7FD8-4256-81B1-47F55B93A93E</string>
						<key>Parameters</key>
						<array>
							<string>com.sonnysoftware.bookends2</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>654686941.21547604</real>
				<key>ModificationDate</key>
				<real>740903620.91090202</real>
				<key>Name</key>
				<string>com.sonnysoftware.bookends2</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>7A1AAF8A-2071-4968-B02D-C74B39F6BBCB</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997184</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997185</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy Day as Text</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.flexibits.fantastical2.mac</string>
							<key>Name</key>
							<string>Fantastical</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997186</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(
            alert('MD links from Fantastical')
        )(
            x =&gt; x
        )(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(
                clip =&gt; {
                    const
                        dateString = clip.split('\n')[0],
                        iso8601 = taskPaperDateString(
                            new Date(dateString)
                        ).slice(0, 10),
                        pfx = 'x-fantastical3://show/calendar/';
                    return Right(
                        `[${dateString}](${pfx + iso8601})`
                    );
                }
            )
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ---------------------- GENERAL ----------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // iso8601Local :: Date -&gt; String
    const iso8601Local = dte =&gt;
        new Date(dte - (6E4 * dte.getTimezoneOffset()))
        .toISOString();

    // taskPaperDateString :: Date -&gt; String
    const taskPaperDateString = dte =&gt; {
        const [d, t] = iso8601Local(new Date()).split('T');
        return [d, t.slice(0, 5)].join(' ');
    };

    // main
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620254453.41475594</real>
				<key>ModificationDate</key>
				<real>655300969.18022597</real>
				<key>Name</key>
				<string>com.flexibits.fantastical2.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>EE56E9F3-24F7-4AC1-A7E1-72A36D88833F</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997095</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.toketaware.ithoughtsx</string>
							<key>Name</key>
							<string>iThoughtsX</string>
							<key>NewFile</key>
							<string>/Applications/iThoughtsX.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Link to any selected node or otherwise to document</string>
						<key>ActionUID</key>
						<integer>15997096</integer>
						<key>Actions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997097</integer>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string></string>
								<key>Variable</key>
								<string>mdLink</string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15997098</integer>
								<key>IsDisclosed</key>
								<false/>
								<key>JustDisplay</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetClipboardToText</string>
								<key>Text</key>
								<string></string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15997099</integer>
								<key>Conditions</key>
								<dict>
									<key>ConditionList</key>
									<array>
										<dict>
											<key>ConditionType</key>
											<string>Menu</string>
											<key>MenuConditionSelectionType</key>
											<string>Path</string>
											<key>MenuConditionType</key>
											<string>IsEnabled</string>
											<key>MenuModifiers</key>
											<integer>256</integer>
											<key>MenuShortcut</key>
											<string>C</string>
											<key>MenuTitle</key>
											<string>Edit &gt; Copy as &gt; Link</string>
										</dict>
									</array>
									<key>ConditionListMatch</key>
									<string>All</string>
								</dict>
								<key>ElseActions</key>
								<array>
									<dict>
										<key>ActionName</key>
										<string>Link to document</string>
										<key>ActionUID</key>
										<integer>15997111</integer>
										<key>Actions</key>
										<array>
											<dict>
												<key>ActionName</key>
												<string>MD Link for iThoughtsX document, with no particular selection</string>
												<key>ActionUID</key>
												<integer>15997112</integer>
												<key>DisplayKind</key>
												<string>None</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IncludedVariables</key>
												<array>
													<string>9999</string>
												</array>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>ExecuteJavaScriptForAutomation</string>
												<key>Path</key>
												<string></string>
												<key>Text</key>
												<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    // MD Link for iThoughtsX Document with
    // no specific selection.

    const main = () =&gt; (
        Application('iThoughtsX').activate(),
        either(
            alert('MD Link')
        )(
            md =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: md
                }),
                md
            )
        )(
            appFrontWindowMDLinkLR(
                'com.toketaware.ithoughtsx'
            )
        )
    );

    // ---------------------- LINKS ----------------------

    // appFrontWindowMDLinkLR :: String -&gt; Either String String
    const appFrontWindowMDLinkLR = bundleID =&gt; {
        const
            procs = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                })
            .applicationProcesses.where({
                bundleIdentifier: bundleID
            });
        return bindLR(
            bindLR(
                procs.length &gt; 0 ? (
                    Right(procs.at(0).windows)
                ) : Left('Application not found: ' + bundleID)
            )(ws =&gt; ws.length &gt; 0 ? (
                Right(ws.at(0))
            ) : Left(`No windows found for ${bundleID}`))
        )(w =&gt; {
            const
                uw = ObjC.unwrap,
                [winTitle, maybeDocURL] = map(
                    k =&gt; uw(w.attributes.byName(k).value())
                )(['AXTitle', 'AXDocument'])
            return Boolean(maybeDocURL) ? (
                Right(`[${winTitle}](${maybeDocURL})`)
            ) : Left(
                `Window '${winTitle}' of:\n\n\t${bundleID}` + [
                    '\n\nmay not be a document window.',
                    `\nConsider adding a macro named '${bundleID}'`,
                    `to the KM Group '${kmGroupName}'.`,
                    '\n(Or request such a macro, which should',
                    'save a [label](url) string) in the',
                    'KM variable "mdLink")',
                    `on the Keyboard Maestro forum).`
                ].join('\n')
            )
        });
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // map :: (a -&gt; b) -&gt; [a] -&gt; [b]
    const map = f =&gt;
        // The list obtained by applying f
        // to each element of xs.
        // (The image of xs under f).
        xs =&gt; [...xs].map(f);

    return main()
})();</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseModernSyntax</key>
												<false/>
												<key>UseText</key>
												<true/>
											</dict>
										</array>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>Group</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>MacroActionType</key>
								<string>IfThenElse</string>
								<key>ThenActions</key>
								<array>
									<dict>
										<key>ActionName</key>
										<string>Link to selection</string>
										<key>ActionUID</key>
										<integer>15997100</integer>
										<key>Actions</key>
										<array>
											<dict>
												<key>ActionUID</key>
												<integer>15997101</integer>
												<key>MacroActionType</key>
												<string>SelectMenuItem</string>
												<key>Menu</key>
												<array>
													<string>Edit</string>
													<string>Copy as</string>
													<string>Link</string>
												</array>
												<key>TargetApplication</key>
												<dict>
													<key>BundleIdentifier</key>
													<string>com.toketaware.ithoughtsx</string>
													<key>Name</key>
													<string>iThoughtsX</string>
													<key>NewFile</key>
													<string>/Applications/iThoughtsX.app</string>
												</dict>
												<key>TargetingType</key>
												<string>Specific</string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997102</integer>
												<key>Conditions</key>
												<dict>
													<key>ConditionList</key>
													<array>
														<dict>
															<key>ClipboardConditionType</key>
															<string>IsNot</string>
															<key>ClipboardText</key>
															<string></string>
															<key>ConditionType</key>
															<string>Clipboard</string>
														</dict>
													</array>
													<key>ConditionListMatch</key>
													<string>All</string>
												</dict>
												<key>MacroActionType</key>
												<string>PauseUntil</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997103</integer>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string>%SystemClipboard%</string>
												<key>Variable</key>
												<string>mdURL</string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997104</integer>
												<key>IsDisclosed</key>
												<false/>
												<key>JustDisplay</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetClipboardToText</string>
												<key>Text</key>
												<string></string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997105</integer>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SelectMenuItem</string>
												<key>Menu</key>
												<array>
													<string>Edit</string>
													<string>Copy</string>
												</array>
												<key>TargetApplication</key>
												<dict>
													<key>BundleIdentifier</key>
													<string>com.toketaware.ithoughtsx</string>
													<key>Name</key>
													<string>iThoughtsX</string>
													<key>NewFile</key>
													<string>/Applications/iThoughtsX.app</string>
												</dict>
												<key>TargetingType</key>
												<string>Specific</string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997106</integer>
												<key>Conditions</key>
												<dict>
													<key>ConditionList</key>
													<array>
														<dict>
															<key>ClipboardConditionType</key>
															<string>IsNot</string>
															<key>ClipboardText</key>
															<string></string>
															<key>ConditionType</key>
															<string>Clipboard</string>
														</dict>
													</array>
													<key>ConditionListMatch</key>
													<string>All</string>
												</dict>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>PauseUntil</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
											</dict>
											<dict>
												<key>ActionName</key>
												<string>Execute JavaScript For Automation :: Name of selected node.</string>
												<key>ActionUID</key>
												<integer>15997107</integer>
												<key>DisplayKind</key>
												<string>Variable</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IncludedVariables</key>
												<array>
													<string>9999</string>
												</array>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>ExecuteJavaScriptForAutomation</string>
												<key>Path</key>
												<string></string>
												<key>Text</key>
												<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(
            msg =&gt; msg
        )(
			x =&gt; {
				const xs = lines(x);
				return 0 &lt; xs.length ? (
		            xs[0]
        		) : x;
			}
		)(clipTextLR())


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // string delimited by newline and or CR.
        0 &lt; s.length ? (
            s.split(/[\r\n]+/)
        ) : [];

    return main();
})();</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseModernSyntax</key>
												<false/>
												<key>UseText</key>
												<true/>
												<key>Variable</key>
												<string>mdName</string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997108</integer>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string>[%Variable%mdName%](%Variable%mdURL%)</string>
												<key>Variable</key>
												<string>mdLink</string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997109</integer>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string></string>
												<key>Variable</key>
												<string>mdName</string>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15997110</integer>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>SetVariableToText</string>
												<key>Text</key>
												<string></string>
												<key>Variable</key>
												<string>mdURL</string>
											</dict>
										</array>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>Group</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
						</array>
						<key>MacroActionType</key>
						<string>Group</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628791216.25947201</real>
				<key>ModificationDate</key>
				<real>634818668.12104201</real>
				<key>Name</key>
				<string>com.toketaware.ithoughtsx</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>3B594ECB-BBFE-401D-82C1-EDBE702EA5C9</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997129</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997130</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Note</string>
							<string>Copy Note Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.happenapps.Quiver</string>
							<key>Name</key>
							<string>Quiver</string>
							<key>NewFile</key>
							<string>/Applications/Quiver.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997131</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997132</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

	// Rob Trew @2020

    ObjC.import('AppKit')

    // main :: IO ()
    const main = () =&gt;
        either(alert('Quiver'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.html')
            )(s =&gt; Right(
                `[${s.slice(63, -4)}](${s.slice(9, 61)})`
            ))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ---------------------- GENERAL ----------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620228833.87620103</real>
				<key>ModificationDate</key>
				<real>634818474.07095397</real>
				<key>Name</key>
				<string>com.happenapps.Quiver</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>4B0EB65D-144D-4268-A580-637E644E7CFF</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997071</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>F18CB180-7FD8-4256-81B1-47F55B93A93E</string>
						<key>Parameters</key>
						<array>
							<string>com.sonnysoftware.bookends</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>622163020.078107</real>
				<key>ModificationDate</key>
				<real>740903637.12486506</real>
				<key>Name</key>
				<string>com.sonnysoftware.bookends</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>A803ADEF-527C-4D43-A1E5-07941E2736BC</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997137</integer>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC4ZAgAAKwAAAAEA
						AAARAgAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNjcx
						XGNvY29hc3VicnRmNjAwCntcZm9u
						dHRibFxmMFxmc3dpc3NcZmNoYXJz
						ZXQwIEhlbHZldGljYTt9CntcY29s
						b3J0Ymw7XHJlZDI1NVxncmVlbjI1
						NVxibHVlMjU1O1xyZWQwXGdyZWVu
						MFxibHVlMDt9CntcKlxleHBhbmRl
						ZGNvbG9ydGJsOztcY3NzcmdiXGMw
						XGMwXGMwXGM4NDcwNlxjbmFtZSBj
						b250cm9sVGV4dENvbG9yO30KXHBh
						cmRcdHg1NjBcdHgxMTIwXHR4MTY4
						MFx0eDIyNDBcdHgyODAwXHR4MzM2
						MFx0eDM5MjBcdHg0NDgwXHR4NTA0
						MFx0eDU2MDBcdHg2MTYwXHR4Njcy
						MFxwYXJkaXJuYXR1cmFsXHBhcnRp
						Z2h0ZW5mYWN0b3IwCgpcZjBcZnMz
						MFxmc21pbGxpMTUzNjQgXGNmMiBW
						ZXIgMC4wMSBSb2IgVHJldyAyMDIw
						XApcCklmIHRoZSBpdGVtIGlzIGN1
						cnJlbnRseSBiZWluZyBlZGl0ZWQs
						IGZvY3VzIGJyaWVmbHkgc3dpdGNo
						ZXMgdG8gdGhlIGVuY2xvc2luZyBn
						cm91cCAodG8gZW5hYmxlIGxpbmsg
						Y29weWluZykgYW5kIGlzIHRoZW4g
						cmVzdG9yZWQufQEAAAAjAAAAAQAA
						AAcAAABUWFQucnRmEAAAACAWRF62
						AQAAAAAAAAAAAAA=
						</data>
						<key>Title</key>
						<string>Copy MD [Name](URL) link to current item.</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997138</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.literatureandlatte.scrivener3</string>
							<key>Name</key>
							<string>Scrivener</string>
							<key>NewFile</key>
							<string>/Applications/Scrivener.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997139</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAd3KjV7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>ENCLOSING GROUP</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Temporarily get enclosing group context, if necessary.</string>
						<key>ActionUID</key>
						<integer>15997140</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Menu</string>
									<key>MenuConditionSelectionType</key>
									<string>Path</string>
									<key>MenuConditionType</key>
									<string>IsEnabled</string>
									<key>MenuModifiers</key>
									<integer>256</integer>
									<key>MenuShortcut</key>
									<string>C</string>
									<key>MenuTitle</key>
									<string>Navigate &gt; Go To &gt; Enclosing Group</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997143</integer>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string>false</string>
								<key>Variable</key>
								<string>scrivenerContextChanged</string>
							</dict>
						</array>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997141</integer>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SelectMenuItem</string>
								<key>Menu</key>
								<array>
									<string>Navigate</string>
									<string>Go To</string>
									<string>Enclosing Group</string>
								</array>
								<key>TargetApplication</key>
								<dict>
									<key>BundleIdentifier</key>
									<string>com.literatureandlatte.scrivener3</string>
									<key>Name</key>
									<string>Scrivener</string>
									<key>NewFile</key>
									<string>/Applications/Scrivener.app</string>
								</dict>
								<key>TargetingType</key>
								<string>Specific</string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15997142</integer>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SetVariableToText</string>
								<key>Text</key>
								<string>true</string>
								<key>Variable</key>
								<string>scrivenerContextChanged</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997144</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAd3KjV7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Copy NAME</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>ActionUID</key>
						<integer>15997145</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997146</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>scrivenerItemName</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997147</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAd3KjV7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Copy URL</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997148</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy Special</string>
							<string>Copy Document as External Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.literatureandlatte.scrivener3</string>
							<key>Name</key>
							<string>Scrivener</string>
							<key>NewFile</key>
							<string>/Applications/Scrivener.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until Clipboard contains "x-scrivener-item:"</string>
						<key>ActionUID</key>
						<integer>15997149</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>Contains</string>
									<key>ClipboardText</key>
									<string>x-scrivener-item:</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997150</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAd3KjV7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>MARKDOWN link copied to mdLink variable, context restored, user notified</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997151</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Variable</string>
									<key>Variable</key>
									<string>scrivenerContextChanged</string>
									<key>VariableConditionType</key>
									<string>Is</string>
									<key>VariableValue</key>
									<string>true</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997152</integer>
								<key>MacroActionType</key>
								<string>SelectMenuItem</string>
								<key>Menu</key>
								<array>
									<string>Navigate</string>
									<string>Editor</string>
									<string>Backward in Document History</string>
								</array>
								<key>TargetApplication</key>
								<dict>
									<key>BundleIdentifier</key>
									<string>com.literatureandlatte.scrivener3</string>
									<key>Name</key>
									<string>Scrivener</string>
									<key>NewFile</key>
									<string>/Applications/Scrivener.app</string>
								</dict>
								<key>TargetingType</key>
								<string>Specific</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997153</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%Variable%scrivenerItemName%](%SystemClipboard%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631093054.48296905</real>
				<key>ModificationDate</key>
				<real>634818482.71016705</real>
				<key>Name</key>
				<string>com.literatureandlatte.scrivener3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>31A5563F-D22F-4D23-BB02-1280047D673E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997167</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997168</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>Copy</string>
						<key>ActionUID</key>
						<integer>15997169</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CutCopyPaste</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997170</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy selected Ulysses item as MD Link

    // main :: IO ()
    const main = () =&gt; {
        const
            kme = Application('Keyboard Maestro Engine'),
            itemName = (
                kme.doScript(windowNamePlist),
                kme.getvariable('windowName')
            );

        return either(
            alert('Copy as MD Link')
        )(
            s =&gt; (
                kme.setvariable('mdLink', {
                    to: s
                }),
                s
            )
        )(
            bindLR(
                clipTextLR()
            )(
                url =&gt; Right(`[${itemName}](${url})`)
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // ---------------- KEYBOARD MAESTRO -----------------

    // windowNamePlist :: XML String
    const windowNamePlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SetVariableToText&lt;/string&gt;
                &lt;key&gt;Text&lt;/key&gt;
                &lt;string&gt;%FrontWindowName%&lt;/string&gt;
                &lt;key&gt;Variable&lt;/key&gt;
                &lt;string&gt;windowName&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631055636.30216706</real>
				<key>ModificationDate</key>
				<real>634818658.02646804</real>
				<key>Name</key>
				<string>com.soulmen.ulysses-setapp</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>CEFD7F24-51D6-4324-BD91-E6D0CF33E3AE</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997051</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC5uAAAAKwAAAAEA
						AABmAAAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYxNDA0
						XGNvY29hc3VicnRmNDcwCntcZm9u
						dHRibH0Ke1xjb2xvcnRibDtccmVk
						MjU1XGdyZWVuMjU1XGJsdWUyNTU7
						fQp9AQAAACMAAAABAAAABwAAAFRY
						VC5ydGYQAAAAd3KjV7YBAAAAAAAA
						AAAAAA==
						</data>
						<key>Title</key>
						<string>Tested for Soulver 3</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997052</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997053</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Sheet</string>
							<string>Copy Link to Sheet</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>app.soulver.appstore.mac</string>
							<key>Name</key>
							<string>Soulver 3</string>
							<key>NewFile</key>
							<string>/Applications/Soulver 3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until text clipboard not empty</string>
						<key>ActionUID</key>
						<integer>15997054</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997055</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>local_URL</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997056</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>local_URL</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>const
    bundleID = 'app.soulver.appstore.mac',
    se = (
        Application(bundleID).activate(),
        Application('System Events')
    ),
    procs = se.applicationProcesses.where({
        name: 'Soulver 3'
    }),
    sheetName = 0 &lt; procs.length ? (
        procs.at(0).windows.at(0).name()
    ) : 'Soulver 3 sheet name not found.';

return `[${sheetName}](${kmvar.local_URL})`;</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631732621.41446495</real>
				<key>ModificationDate</key>
				<real>740416198.28848004</real>
				<key>Name</key>
				<string>app.soulver.appstore.mac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>46153BBD-185B-43DE-A121-9ADB2E0124DD</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997059</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    const
        kme = Application('Keyboard Maestro'),
        selnMacros = kme.selectedMacros();

    return (
        0 &lt; selnMacros.length ? (
            selnMacros
        ) : kme.selectedMacroGroups()
    ).map(
        x =&gt; `[${x.name()}]` + (
            `(keyboardmaestro://m=${x.id()})`
        )
    ).join('\n');
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628990819.70212102</real>
				<key>ModificationDate</key>
				<real>634818665.15527105</real>
				<key>Name</key>
				<string>com.stairways.keyboardmaestro.editor</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>DEAB4CB2-E0A5-435A-A6A9-9466FDF48DBE</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997154</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Editor</string>
							<string>Show Path Bar</string>
						</array>
						<key>NotifyOnFailure</key>
						<false/>
						<key>StopOnFailure</key>
						<false/>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.panic.Nova</string>
							<key>Name</key>
							<string>Nova</string>
							<key>NewFile</key>
							<string>/Applications/Nova.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997155</integer>
						<key>DisplayKind</key>
						<string>Briefly</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.createTemplateTagFirstArg=function(d){return d.raw=d};$jscomp.createTemplateTagFirstArgWithRaw=function(d,e){d.raw=e;return d};
(function(){var d=function(a){return function(b){var c=Object.assign(Application("System Events"),{includeStandardAdditions:!0});return c.activate(),c.displayDialog(b,{withTitle:a,buttons:["OK"],defaultButton:"OK"}),b}},e=function(a){return{type:"Either",Left:a}},g=function(a){return{type:"Either",Right:a}},h=function(a){return function(b){return void 0!==a.Left?a:b(a.Right)}},k=function(a){return function(b){return function(c){return"Either"===c.type?void 0!==c.Left?a(c.Left):b(c.Right):void 0}}},
l=function(a){a=Array.isArray(a)?a:Array.from(a||[]);return 0&lt;a.length?a.slice(0,-1):void 0};return function(){var a=Object.assign(Application("System Events"),{includeStandardAdditions:!0}).applicationProcesses.where({name:"Nova"});return k(d("Copy as MD link"))(function(b){return Application("Keyboard Maestro Engine").setvariable("mdLink",{to:b}),b})(h(0&lt;a.length?g(a.at(0).windows):e("Nova not running."))(function(b){return h(0&lt;b.length?g(b.at(0).splitterGroups.at(0).splitterGroups.at(0).splitterGroups.at(0).groups.at(0)):
e("No windows open in Nova."))(function(c){var m=c.lists;return 0&lt;c.lists.length?h(g(m.at(0)))(function(f){f=l(f.staticTexts().map(function(n){return n.name()}));var p=encodeURI("file:///Users/"+f.join("/"));return g("["+(0&lt;f.length?f.slice(-1)[0]:void 0)+"]("+p+")")}):e("Editor &gt; Show Path Bar not chosen.")})}))}()})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>633698454.90628695</real>
				<key>ModificationDate</key>
				<real>633700281.50065506</real>
				<key>Name</key>
				<string>com.panic.Nova</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>DB2BE1D0-7FBD-40F3-9984-2FA4ACBDB60D</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997076</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>9815DA78-703E-424C-9025-2D182032A61F</string>
						<key>Parameters</key>
						<array>
							<string>com.omnigroup.OmniPlan3</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>629071910.84008896</real>
				<key>ModificationDate</key>
				<real>740911553.70155895</real>
				<key>Name</key>
				<string>com.omnigroup.OmniPlan3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>8DCFA088-7CEE-4D21-8CA1-55A41D558EBE</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997026</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // com.panic.Transmit
    // vs App Store build:
    // com.panic.transmit.mas

    // main :: IO ()
    const main = () =&gt; {
        const
            transmit = Application('Transmit'),
            ds = transmit.documents;
        return either(
            // Notification
            msg =&gt; msg
        )(
            link =&gt; (
                Application('Keyboard Maestro Engine')
                .setvariable('mdLink', {
                    to: link
                }),
                link
            )
        )(bindLR(
            0 &lt; ds.length ? (
                Right(ds.at(0))
            ) : Left('No documents open in Transmit')
        )(doc =&gt; {
            const tabs = doc.tabs;
            return bindLR(
                0 &lt; tabs.length ? (
                    Right(doc.currentTab())
                ) : Left(
                    'No tabs found for document :: doc.name()'
                )
            )(tab =&gt; {
                const fbs = tab.fileBrowsers;
                return bindLR(
                    0 &lt; fbs.length ? (
                        Right(fbs.at(0))
                    ) : Left(
                        'No file browsers found for current tab.'
                    )
                )(fb =&gt; {
                    const selns = fb.selectedBrowserItems;
                    return bindLR(
                        0 &lt; selns.length ? (
                            Right(selns.at(0))
                        ) : Left('Nothing selected in front tab')
                    )(x =&gt; Right(
                        `[${x.name()}]` + (
                            `(${encodeURI('file://' + x.path())})`
                        )
                    ));
                });
            });
        }));
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628771538.92972803</real>
				<key>ModificationDate</key>
				<real>634818528.60760605</real>
				<key>Name</key>
				<string>com.panic.transmit.mas</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>5B08951F-F2AC-44C2-8EF8-1E15A4C760E3</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997113</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>9815DA78-703E-424C-9025-2D182032A61F</string>
						<key>Parameters</key>
						<array>
							<string>com.omnigroup.OmniPlan4</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>629071556.148844</real>
				<key>ModificationDate</key>
				<real>740911536.30203795</real>
				<key>Name</key>
				<string>com.omnigroup.OmniPlan4</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>9509A648-A07B-40F2-8525-4DB6E2BACBDF</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997115</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>9BB504DE-9FA1-423A-9B08-8F6075FA3C73</string>
						<key>Parameters</key>
						<array>
							<string>com.omnigroup.OmniFocus3.MacAppStore</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628975106.58552098</real>
				<key>ModificationDate</key>
				<real>740492460.38368797</real>
				<key>Name</key>
				<string>com.omnigroup.OmniFocus3.MacAppStore</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>F874CA21-D9FA-4569-B36E-CB91E57C4021</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997060</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt; {
        const
            documents = Application(
                'com.multimarkdown.nvUltra'
            ).documents,
            kme = Application('Keyboard Maestro Engine'),
            setMDLink = s =&gt; (
                kme.setvariable('mdLink', {
                    to: s
                }),
                s
            );
        return (
            // In Keyboard Maestro, then:
            setMDLink(''),
            either(
                // in a user dialog,
                alert('Copy as Markdown Link')
            )(
                // or in Keyboard Maestro.
                setMDLink
            )(
                bindLR(
                    0 &lt; documents.length ? (
                        Right(documents.at(0))
                    ) : Left(
                        'No front document found in nvUltra.'
                    )
                )(doc =&gt; {
                    const fp = str(Path(doc.note()));
                    return fp.endsWith('null') ? (
                        Left(`Selection is not a text file.`)
                    ) : Right(
                        `[${takeBaseName(fp)}]` + (
                            `(${doc.noteLink()})`
                        )
                    );
                })
            )
        );
    };


    // ---------------------- MACOS ----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // str :: a -&gt; String
    const str = x =&gt;
        Array.isArray(x) &amp;&amp; x.every(
            v =&gt; ('string' === typeof v) &amp;&amp; (1 === v.length)
        ) ? (
            x.join('')
        ) : x.toString();


    // takeBaseName :: FilePath -&gt; String
    const takeBaseName = strPath =&gt;
        ('' !== strPath) ? (
            ('/' !== strPath[strPath.length - 1]) ? (() =&gt; {
                const fn = strPath.split('/').slice(-1)[0];
                return fn.includes('.') ? (
                    fn.split('.').slice(0, -1).join('.')
                ) : fn;
            })() : ''
        ) : '';

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631585981.14060795</real>
				<key>ModificationDate</key>
				<real>634818492.34164703</real>
				<key>Name</key>
				<string>com.multimarkdown.nvUltra</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>CBF5AB2E-6817-4556-8658-C5B206F6132B</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997014</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997015</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.OakTree.Accordance</string>
							<key>Name</key>
							<string>Accordance</string>
							<key>NewFile</key>
							<string>/Applications/Accordance.app</string>
						</dict>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997016</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy As</string>
							<string>Location URL</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.OakTree.Accordance</string>
							<key>Name</key>
							<string>Accordance</string>
							<key>NewFile</key>
							<string>/Applications/Accordance.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997017</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997018</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Rob Trew @2020

    // main :: IO ()
    const main = () =&gt;
        either(
            msg =&gt; msg
        )(
            x =&gt; x
        )(
            bindLR(
                clipTextLR()
            )(s =&gt; {
                const xs = parse(accordLinkP())(s);
                return 0 &lt; xs.length ? (
                    Right(xs[0][0])
                ) : Left(
                    '[No Accordance link found in clipboard.]()'
                );
            })
        );

    // ---------------------- PARSING ----------------------

    // accordLinkP :: Parser String
    const accordLinkP = () =&gt;
        // Internal link for Accordance.app parsed
        // from Edit &gt; Copy As &gt; Location URL
        // clipboard string.
        thenBindP(
            manyTill(
                anyChar()
            )(
                string('/read/')
            )
        )(
            takeWhileP(ne('#'))
        )(book =&gt; thenBindP(char('#'))(
            fmapP(concat)(some(anyChar()))
        )(ref =&gt; pureP(
            `[${book} ${ref.replace(/_/, ' ')}]` + (
                `(accord://read/${book}#${ref})`
            )
        )));

    // ---------------- PARSER COMBINATORS -----------------

    // Parser :: String -&gt; [(a, String)] -&gt; Parser a
    const Parser = f =&gt;
        // A function lifted into a Parser object.
        ({
            type: 'Parser',
            parser: f
        });


    // altP (&lt;|&gt;) :: Parser a -&gt; Parser a -&gt; Parser a
    const altP = p =&gt;
        // p, or q if p doesn't match.
        q =&gt; Parser(s =&gt; {
            const xs = parse(p)(s);
            return 0 &lt; xs.length ? (
                xs
            ) : parse(q)(s);
        });


    // anyChar :: () -&gt; Parser Char
    const anyChar = () =&gt;
        // A single character.
        Parser(
            s =&gt; 0 &lt; s.length ? [
                Tuple(s[0])(
                    s.slice(1)
                )
            ] : []
        );


    // apP &lt;*&gt; :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const apP = pf =&gt;
        // A new parser obtained by the application 
        // of a Parser-wrapped function,
        // to a Parser-wrapped value.
        p =&gt; Parser(
            s =&gt; parse(pf)(s).flatMap(
                vr =&gt; parse(
                    fmapP(vr[0])(p)
                )(vr[1])
            )
        );


    // bindP (&gt;&gt;=) :: Parser a -&gt; 
    // (a -&gt; Parser b) -&gt; Parser b
    const bindP = p =&gt;
        // A new parser obtained by the application of 
        // a function to a Parser-wrapped value.
        // The function must enrich its output, lifting it 
        // into a new Parser.
        // Allows for the nesting of parsers.
        f =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                tpl =&gt; parse(f(tpl[0]))(tpl[1])
            )
        );


    // char :: Char -&gt; Parser Char
    const char = x =&gt;
        // A particular single character.
        satisfy(c =&gt; x == c);


    // fmapP :: (a -&gt; b) -&gt; Parser a -&gt; Parser b  
    const fmapP = f =&gt;
        // A new parser derived by the structure-preserving 
        // application of f to the value in p.
        p =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                first(f)
            )
        );


    // liftA2P :: (a -&gt; b -&gt; c) -&gt; 
    // Parser a -&gt; Parser b -&gt; Parser c
    const liftA2P = op =&gt;
        // The binary function op, lifted
        // to a function over two parsers.
        p =&gt; apP(fmapP(op)(p));


    // manyTill :: Parser a -&gt; Parser e -&gt; Parser [a]
    const manyTill = p =&gt;
        // All of the matches for p before e matches.
        // Wrapping e in lookAhead can preserve any 
        // string which matches e, if it is needed.
        e =&gt; {
            const
                scan = () =&gt; altP(
                    thenP(e)(pureP([]))
                )(
                    bindP(
                        p
                    )(x =&gt; bindP(
                        go
                    )(xs =&gt; pureP(
                        [x].concat(xs)
                    )))
                ),
                go = scan();
            return go;
        };


    // parse :: Parser a -&gt; String -&gt; [(a, String)]
    const parse = p =&gt;
        // The result of parsing s with p.
        s =&gt; {
            // showLog('s', s)
            return p.parser([...s]);
        };


    // pureP :: a -&gt; Parser a
    const pureP = x =&gt;
        // The value x lifted, unchanged, 
        // into the Parser monad.
        Parser(s =&gt; [Tuple(x)(s)]);


    // satisfy :: (Char -&gt; Bool) -&gt; Parser Char
    const satisfy = test =&gt;
        // Any character for which the 
        // given predicate returns true.
        Parser(
            s =&gt; 0 &lt; s.length ? (
                test(s[0]) ? [
                    Tuple(s[0])(s.slice(1))
                ] : []
            ) : []
        );


    // sequenceP :: [Parser a] -&gt; Parser [a]
    const sequenceP = ps =&gt;
        // A single parser for a list of values, derived
        // from a list of parsers for single values.
        Parser(
            s =&gt; ps.reduce(
                (a, q) =&gt; a.flatMap(
                    vr =&gt; parse(q)(snd(vr)).flatMap(
                        first(xs =&gt; fst(vr).concat(xs))
                    )
                ),
                [Tuple([])(s)]
            )
        );


    // some :: Parser a -&gt; Parser [a]
    const some = p =&gt; {
        // One or more instances of p.
        // Lifts a parser for a simple type of value 
        // to a parser for a list of such values.
        const many_p = p =&gt;
            altP(some(p))(pureP([]));
        return Parser(
            s =&gt; parse(
                liftA2P(
                    x =&gt; xs =&gt; [x].concat(xs)
                )(p)(many_p(p))
            )(s)
        );
    };


    // string :: String -&gt; Parser String
    const string = s =&gt;
        // A particular string.
        fmapP(cs =&gt; cs.join(''))(
            sequenceP([...s].map(char))
        );


    // takeWhileP :: (Char -&gt; Bool) -&gt; Parser String
    const takeWhileP = p =&gt;
        // The largest prefix in which p is
        // true over all the characters.
        Parser(
            compose(
                pureList,
                first(concat),
                span(p)
            )
        );


    // thenBindP :: Parser a -&gt; Parser b -&gt; 
    // (b -&gt; Parser c) Parser c
    const thenBindP = o =&gt;
        // A combination of thenP and bindP in which a 
        // preliminary  parser consumes text and discards
        // its output, before any output of a subsequent
        // parser is bound.
        p =&gt; f =&gt; Parser(
            s =&gt; parse(o)(s).flatMap(
                vr =&gt; parse(p)(vr[1]).flatMap(
                    tpl =&gt; parse(f(tpl[0]))(tpl[1])
                )
            )
        );


    // thenP (&gt;&gt;) :: Parser a -&gt; Parser b -&gt; Parser b
    const thenP = o =&gt;
        // A composite parser in which o just consumes text
        // and then p consumes more and returns a value.
        p =&gt; Parser(
            s =&gt; parse(o)(s).flatMap(
                vr =&gt; parse(p)(vr[1])
            )
        );

    // ------------------------ JXA ------------------------

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        // ObjC.import('AppKit')
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: 'Tuple',
            '0': a,
            '1': b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );


    // concat :: [[a]] -&gt; [a]
    // concat :: [String] -&gt; String
    const concat = xs =&gt; (
        ys =&gt; 0 &lt; ys.length ? (
            ys.every(Array.isArray) ? (
                []
            ) : ''
        ).concat(...ys) : ys
    )(list(xs));


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // first :: (a -&gt; b) -&gt; ((a, c) -&gt; (b, c))
    const first = f =&gt;
        // A simple function lifted to one which applies
        // to a tuple, transforming only its first item.
        xy =&gt; Tuple(f(xy[0]))(
            xy[1]
        );


    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];


    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // ne :: a -&gt; a -&gt; Bool
    const ne = a =&gt;
        b =&gt; a !== b;


    // pureList :: a -&gt; [a]
    const pureList = x =&gt; [x];


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];


    // sj :: a -&gt; String
    function sj() {
        const args = Array.from(arguments);
        return JSON.stringify.apply(
            null,
            1 &lt; args.length &amp;&amp; !isNaN(args[0]) ? [
                args[1], null, args[0]
            ] : [args[0], null, 2]
        );
    }


    // span :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])
    const span = p =&gt;
        // Longest prefix of xs consisting of elements which
        // all satisfy p, tupled with the remainder of xs.
        xs =&gt; {
            const
                ys = 'string' !== typeof xs ? (
                    list(xs)
                ) : xs,
                iLast = ys.length - 1;
            return splitAt(
                until(
                    i =&gt; iLast &lt; i || !p(ys[i])
                )(i =&gt; 1 + i)(0)
            )(ys);
        };


    // splitAt :: Int -&gt; [a] -&gt; ([a], [a])
    const splitAt = n =&gt;
        xs =&gt; Tuple(xs.slice(0, n))(
            xs.slice(n)
        );


    // until :: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a
    const until = p =&gt; f =&gt; x =&gt; {
        let v = x;
        while (!p(v)) v = f(v);
        return v;
    };

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620257297.67379797</real>
				<key>ModificationDate</key>
				<real>754775805.87437201</real>
				<key>Name</key>
				<string>com.OakTree.Accordance</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>07E17E89-9FF5-4441-833C-895DCDEE93EC</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997072</integer>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997073</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Share</string>
							<string>Copy Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.reederapp.macOS</string>
							<key>Name</key>
							<string>Reeder</string>
							<key>NewFile</key>
							<string>/Applications/Reeder.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until clipboard has text</string>
						<key>ActionUID</key>
						<integer>15997074</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>NotifyOnTimeOut</key>
						<true/>
						<key>TimeOutAbortsMacro</key>
						<false/>
						<key>TimeOutPeriod</key>
						<real>5</real>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997075</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Reeder link'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(link =&gt; Right(`[](${link})`))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ----------------- GENERAL FUNCTIONS -----------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620248960.36932695</real>
				<key>ModificationDate</key>
				<real>665188318.83569002</real>
				<key>Name</key>
				<string>com.reederapp.macOS</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>8098CD1B-0DE2-48FF-A65B-DCBB5F6875CA</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997058</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>local_BundleId</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>return (() =&gt; {
    "use strict";

    // Copy selected items from Bookends as MD links.
    // Rob Trew @2020 @2024

    // Ver 0.2

    // const kmvar = {"local_BundleId": "com.sonnysoftware.bookends2"};

    // main :: IO ()
    const main = () =&gt; {
        const
            url = "bookends://sonnysoftware.com/",
            bookends = Application(kmvar.local_BundleId),
            ws = bookends.libraryWindows;

        return (
            bookends.activate(),
            either(
                alert("Copy as MD link")
            )(
                mdLink =&gt; mdLink
            )(
                bindLR(
                    0 &lt; ws.length
                        ? Right(ws.at(0).selectedPublicationItems())
                        : Left(
                            "No library windows open in Bookends."
                        )
                )(
                    items =&gt; Right(
                        items.map(
                            x =&gt; `[${bookends.format(x).trim()}]` + (
                                `(${url}${x.id()})`
                            )
                        )
                        .join("\n")
                    )
                )
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = lr =&gt;
    // Bind operator for the Either option type.
    // If lr has a Left value then lr unchanged,
    // otherwise the function mf applied to the
    // Right value in lr.
        mf =&gt; "Left" in lr
            ? lr
            : mf(lr.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
    // Application of the function fl to the
    // contents of any Left value in e, or
    // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740902987.94469094</real>
				<key>ModificationDate</key>
				<real>740903580.281057</real>
				<key>Name</key>
				<string>Bookends variant</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>MacroTriggerType</key>
						<string>Subroutine</string>
						<key>Parameters</key>
						<array>
							<string>local_BundleId</string>
						</array>
						<key>ReturnsValue</key>
						<false/>
					</dict>
				</array>
				<key>UID</key>
				<string>F18CB180-7FD8-4256-81B1-47F55B93A93E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997081</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997082</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Share</string>
							<string>Copy Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.reederapp.5.macOS</string>
							<key>Name</key>
							<string>Reeder</string>
							<key>NewFile</key>
							<string>/Applications/Reeder.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until clipboard has text</string>
						<key>ActionUID</key>
						<integer>15997083</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>NotifyOnTimeOut</key>
						<true/>
						<key>TimeOutAbortsMacro</key>
						<false/>
						<key>TimeOutPeriod</key>
						<real>5</real>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997084</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Reeder link'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(link =&gt; Right(`[](${link})`))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ----------------- GENERAL FUNCTIONS -----------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>626022406.92979598</real>
				<key>ModificationDate</key>
				<real>634818531.90881097</real>
				<key>Name</key>
				<string>com.reederapp.5.macOS</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>C4C84F6D-6F93-4DBC-A584-D0154E8B28D3</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997118</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.ngocluu.goodlinks</string>
							<key>Name</key>
							<string>GoodLinks</string>
							<key>NewFile</key>
							<string>/Applications/GoodLinks.app</string>
						</dict>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997119</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997120</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Article</string>
							<string>Copy</string>
							<string>Article Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.ngocluu.goodlinks</string>
							<key>Name</key>
							<string>GoodLinks</string>
							<key>NewFile</key>
							<string>/Applications/GoodLinks.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997121</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TimeOutPeriod</key>
						<real>5</real>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997122</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>local_URL</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997123</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997124</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Article</string>
							<string>Copy</string>
							<string>Plain Text</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.ngocluu.goodlinks</string>
							<key>Name</key>
							<string>GoodLinks</string>
							<key>NewFile</key>
							<string>/Applications/GoodLinks.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997125</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TimeOutPeriod</key>
						<real>5</real>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997126</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>local_Text</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997127</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%Variable%local_Text[1]\n%</string>
						<key>Variable</key>
						<string>local_Label</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997128</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%Variable%local_Label%](%Variable%local_URL%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740905921.42545903</real>
				<key>ModificationDate</key>
				<real>740906887.92760706</real>
				<key>Name</key>
				<string>com.ngocluu.goodlinks</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>BBD88F1F-F377-411D-98EC-4DFAAEF7AAAF</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997019</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    ObjC.import("AppKit");

    // main ::  IO ()
    const main = () =&gt; {
        const
            macroGroupName = "MD Link tools",
            mdLinkToolsGroups = Application(
                "Keyboard Maestro"
            )
            .macroGroups.where({
                name: macroGroupName
            });

        return either(
            alert("Copy as MD Link - Map bundle to UUID")
        )(
            uuidsShownAndUpdatedIO
        )(
            0 &lt; mdLinkToolsGroups.length ? (() =&gt; {
                const
                    instances = mdLinkToolsGroups.at(0)
                    .macros()
                    .flatMap(macro =&gt; {
                        const k = macro.name();

                        return k.includes(".") ? ([
                            [k, macro.id()]
                        ]) : [];
                    });

                return Right(
                    Tuple(
                        JSON.stringify(
                            instances.reduce(
                                (a, [bundle, uuid]) =&gt; Object.assign(
                                    a, {
                                        [bundle]: uuid
                                    }
                                ), {}
                            ),
                            null, 2
                        )
                    )(instances.length)
                );
            })() : Left(
                `Macro group not found:\n\n\t${macroGroupName}`
            )
        );
    };

    //  uuidsShownAndUpdatedIO :: (Dict, Int) -&gt; IO()
    const uuidsShownAndUpdatedIO = tpl =&gt; {
        const [dictJSON, n] = Array.from(tpl);

        return (
            copyText(dictJSON),
            Application("Keyboard Maestro Engine")
            .setvariable(
                "uuidsForMDLink", {
                    to: dictJSON
                }
            ),
            alert(
                `Copy as MD Link :: ${n} specialised instances.`
            )(dictJSON)
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;

        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2
        });


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; e.Left ? (
            fl(e.Left)
        ) : fr(e.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>634657573.72913599</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:239,239,239,255=↓=86=2=0=0=KMCOLOR:255,0,0,255</string>
				<key>ModificationDate</key>
				<real>659824634.96878505</real>
				<key>Name</key>
				<string>Update map from bundleIDs to KM UUIDs (after new sub-macro added)</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>62E7B57C-C52F-4613-B5B7-06353E3646C0</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997180</integer>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC7zBQAAKwAAAAEA
						AADrBQAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyNTEz
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bFxmMFxmc3dpc3NcZmNoYXJzZXQw
						IEhlbHZldGljYTtcZjFcZm5pbFxm
						Y2hhcnNldDAgTWVubG8tUmVndWxh
						cjtcZjJcZnN3aXNzXGZjaGFyc2V0
						MCBIZWx2ZXRpY2EtT2JsaXF1ZTsK
						fQp7XGNvbG9ydGJsO1xyZWQyNTVc
						Z3JlZW4yNTVcYmx1ZTI1NTtccmVk
						MFxncmVlbjBcYmx1ZTA7fQp7XCpc
						ZXhwYW5kZWRjb2xvcnRibDs7XGNz
						c3JnYlxjMFxjMFxjMFxjODQ3MDZc
						Y25hbWUgY29udHJvbFRleHRDb2xv
						cjt9ClxwYXJkXHR4NTYwXHR4MTEy
						MFx0eDE2ODBcdHgyMjQwXHR4Mjgw
						MFx0eDMzNjBcdHgzOTIwXHR4NDQ4
						MFx0eDUwNDBcdHg1NjAwXHR4NjE2
						MFx0eDY3MjBccGFyZGlybmF0dXJh
						bFxwYXJ0aWdodGVuZmFjdG9yMAoK
						XGYwXGZzMzBcZnNtaWxsaTE1MzY0
						IFxjZjIgRm9yIGEgbWVudSBvZiBs
						aW5rcyBpbiB0aGUgZnJvbnQgZG9j
						dW1lbnQgaW4gVGFza1BhcGVyIDMs
						IGVkaXQgOlwKXHBhcmRcdHg1NjBc
						dHgxMTIwXHR4MTY4MFx0eDIyNDBc
						dHgyODAwXHR4MzM2MFx0eDM5MjBc
						dHg0NDgwXHR4NTA0MFx0eDU2MDBc
						dHg2MTYwXHR4NjcyMFxwYXJkaXJu
						YXR1cmFsXHBhcnRpZ2h0ZW5mYWN0
						b3IwCgpcZjFcZnMyNCBcY2YwIFwK
						ICAgIGNvbnN0IHNob3dMaW5rc0lu
						VGFza1BhcGVyRnJvbnREb2MgPSBm
						YWxzZTtcClwKXHBhcmRcdHg1NjBc
						dHgxMTIwXHR4MTY4MFx0eDIyNDBc
						dHgyODAwXHR4MzM2MFx0eDM5MjBc
						dHg0NDgwXHR4NTA0MFx0eDU2MDBc
						dHg2MTYwXHR4NjcyMFxwYXJkaXJu
						YXR1cmFsXHBhcnRpZ2h0ZW5mYWN0
						b3IwCgpcZjBcZnMzMFxmc21pbGxp
						MTUzNjQgXGNmMiBuZWFyIHRoZSB0
						b3Agb2YgdGhlIEphdmFTY3JpcHQg
						Zm9yIEF1dG9tYXRpb24gc2NyaXB0
						IGJlbG93LCB0bzpcClwKCQpcZjFc
						ZnMyNCBcY2YwIGNvbnN0IHNob3dM
						aW5rc0luVGFza1BhcGVyRnJvbnRE
						b2MgPSB0cnVlO1wKClxmMFxmczMw
						XGZzbWlsbGkxNTM2NCBcY2YyIFwK
						T3IsIG9yIGEgbWVudSBvZiBsaW5r
						cyBrZXB0IGluIGEgcGFydGljdWxh
						ciB0ZXh0IGZpbGUsIGluIFttYXJr
						ZG93biBsaW5rXSh1cmwpIGZvcm1h
						dDpcClwKXHBhcmRcdHg1NjBcdHgx
						MTIwXHR4MTY4MFx0eDIyNDBcdHgy
						ODAwXHR4MzM2MFx0eDM5MjBcdHg0
						NDgwXHR4NTA0MFx0eDU2MDBcdHg2
						MTYwXHR4NjcyMFxwYXJkaXJuYXR1
						cmFsXHBhcnRpZ2h0ZW5mYWN0b3Iw
						CgpcZjFcZnMyNCBcY2YwIC0KXGYw
						XGZzMzBcZnNtaWxsaTE1MzY0IFxj
						ZjIgIGVkaXQgdGhlIHZhbHVlIG9m
						IApcZjFcZnMyNCBcY2YwIHNob3dM
						aW5rc0luVGFza1BhcGVyRnJvbnRE
						b2MgClxmMFxmczMwXGZzbWlsbGkx
						NTM2NCBcY2YyIHRvIApcZjFcZnMy
						NCBcY2YwIGZhbHNlLCBcCi0gClxm
						MFxmczMwXGZzbWlsbGkxNTM2NCBc
						Y2YyIHNwZWNpZnkgYSBmaWxlIHBh
						dGggYXMgdGhlIHZhbHVlIG9mIHRo
						ZSAKXGYyXGkgbGlua0xpc3RGaWxl
						UGF0aCAKXGYwXGkwICB2YXJpYWJs
						ZSBiZWxvdy59AQAAACMAAAABAAAA
						BwAAAFRYVC5ydGYQAAAA65JGX7YB
						AAAAAAAAAAAAAA==
						</data>
						<key>Title</key>
						<string>A menu of links EITHER in a specified text file, OR in the front document in TaskPaper</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>SPECIFY HERE THE FILE PATH A TEXT FILE containing MD links of the pattern [label](url)</string>
						<key>ActionUID</key>
						<integer>15997181</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>~/projects/activeProjects.taskpaper</string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997182</integer>
						<key>DisplayKind</key>
						<string>Briefly</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    // Rob Trew @2020, @2021

    // ver 0.03

    // Menu of the labels of any links
    // (assumed to be in MD format) in the front
    // TaskPaper document, or in a file at the filePath
    // specified by a Keyboard Maestro variable.

    // If one or more labels are chosen in the menu,
    // the corresponding links are opened.


    // -------------------- SETTINGS ---------------------

    // EITHER a menu of links in the TP3 front document,
    const showLinksInTaskPaperFrontDoc = true;

    // OR a menu of links in a file at a given path,
    // specified by a Keyboard Maestro variable.

    // e.g: '~/projects/activeProjects.taskpaper'
    const filePathKMVarName = "linkListFilePath";

    // If this is false, links with text or hyphens
    // before the opening [label] are ignored
    const blnIncludePrefixed = true;


    // -------------------- MENU CODE --------------------
    // main :: IO ()
    const main = () =&gt;
        either(
            msg =&gt; msg.startsWith("User cancelled") ? (
                msg
            ) : alert("Link menu")(msg)
        )(openLinks)(
            bindLR(
                showLinksInTaskPaperFrontDoc ? (
                    taskPaperFrontDocFilePathLR()
                ) : filePathFromKMVariableLR(
                    filePathKMVarName
                )
            )(fp =&gt; {
                showLog("fp", fp);

                const
                    menuKVs = mdLinkValuesInFile(
                        blnIncludePrefixed
                    )(fp);
                showLog("menuKVs", menuKVs);

                return 0 &lt; menuKVs.length ? (
                    bindLR(
                        showMenuLR(true)("Links")(
                            "Choose link(s):"
                        )(menuKVs[0].title)(
                            menuKVs.map(x =&gt; x.title)
                        )
                    )(
                        compose(
                            Right,
                            menuChoiceValues(
                                menuKVs
                            )("title")("link")
                        )
                    )
                ) : Left("No links found in document.");
            })
        );


    // ----------- FRONT DOCUMENT IN TASKPAPER -----------

    // taskPaperFrontDocFilePathLR :: Either String FilePath
    const taskPaperFrontDocFilePathLR = () =&gt; {
        const
            tp = Application("TaskPaper"),
            ds = tp.documents;

        return 0 &lt; ds.length ? (
            Right(`${ds.at(0).file()}`)
        ) : Left("No document found in TaskPaper");
    };


    // --- FILEPATH GIVEN IN KEYBOARD MAESTRO VARIABLE ---
    const filePathFromKMVariableLR = kmVarName =&gt; {
        const
            fp = Application("Keyboard Maestro Engine")
            .getvariable(kmVarName);

        return Boolean(fp) ? (() =&gt; {
            const fpPath = filePath(fp);

            return doesFileExist(fpPath) ? (
                Right(fpPath)
            ) : Left(`No file found at: ${fpPath}`);
        })() : Left(
            `No value found for KM variable: "${kmVarName}"`
        );
    };


    // ---------- CHOICE OF LINKS IN GIVEN FILE ----------

    // mdLinkValuesInFile :: Bool -&gt; FilePath -&gt;
    // [{label :: String, link :: String }]
    const mdLinkValuesInFile = stripPrefix =&gt;
        fp =&gt; sortBy(comparing(x =&gt; x.label))(
            lines(readFile(fp)).flatMap(
                x =&gt; x.includes("](") ? (
                    parse(mdLinkP())(
                        (
                            stripPrefix ? s =&gt; {
                                const mbi = s.indexOf("[");

                                return s.slice(
                                    0 &lt;= mbi ? (
                                        mbi
                                    ) : 0
                                );
                            } : strip
                        )(x)
                    )
                ) : []
            )
            .map(fst)
        );

    // openLinks :: [URL String] -&gt; IO [URL String]
    const openLinks = urls =&gt; {
        const
            sa = Object.assign(
                Application.currentApplication(), {
                    includeStandardAdditions: true
                });

        return urls.map(x =&gt; (
            sa.openLocation(x),
            x
        ));
    };

    // menuChoiceValues :: [Dict a] -&gt;
    // String -&gt; String -&gt; [String] -&gt; [a]
    const menuChoiceValues = menuKVs =&gt;
        // A map from a list of keys to a list of values,
        // given a list of dictionaries,
        // with their label and value keys,
        // and some subset of label keys.
        labelKey =&gt; valueKey =&gt; ks =&gt; {
            const
                dct = menuKVs.reduce(
                    (a, x) =&gt; Object.assign(
                        a, {
                            [x[labelKey]]: x[valueKey]
                        }
                    ), {}
                );

            return ks.flatMap(k =&gt; {
                const v = dct[k];

                return void 0 !== v ? (
                    [v]
                ) : [];
            });
        };

    // ------------------ PARSING LINKS ------------------

    // mdLinkP :: () -&gt; Parser Dict
    const mdLinkP = () =&gt;
        thenBindP(
            char("[")
        )(
            takeWhileP(ne("]"))
        )(title =&gt; thenBindP(
            string("](")
        )(
            takeWhileP(ne(")"))
        )(link =&gt; thenP(
            char(")")
        )(
            pureP({
                title,
                link
            })
        )));

    // ----------- GENERIC PARSER COMBINATORS ------------

    // Parser :: String -&gt; [(a, String)] -&gt; Parser a
    const Parser = f =&gt;
        // A function lifted into a Parser object.
        ({
            type: "Parser",
            parser: f
        });


    // altP (&lt;|&gt;) :: Parser a -&gt; Parser a -&gt; Parser a
    const altP = p =&gt;
        // p, or q if p doesn't match.
        q =&gt; Parser(s =&gt; {
            const xs = parse(p)(s);

            return 0 &lt; xs.length ? (
                xs
            ) : parse(q)(s);
        });


    // apP &lt;*&gt; :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const apP = pf =&gt;
        // A new parser obtained by the application
        // of a Parser-wrapped function,
        // to a Parser-wrapped value.
        p =&gt; Parser(
            s =&gt; parse(pf)(s).flatMap(
                vr =&gt; parse(
                    fmapP(vr[0])(p)
                )(vr[1])
            )
        );


    // char :: Char -&gt; Parser Char
    const char = x =&gt;
        // A particular single character.
        satisfy(c =&gt; x === c);


    // fmapP :: (a -&gt; b) -&gt; Parser a -&gt; Parser b
    const fmapP = f =&gt;
        // A new parser derived by the structure-preserving
        // application of f to the value in p.
        p =&gt; Parser(
            s =&gt; parse(p)(s).flatMap(
                first(f)
            )
        );


    // liftA2P :: (a -&gt; b -&gt; c) -&gt;
    // Parser a -&gt; Parser b -&gt; Parser c
    const liftA2P = op =&gt;
        // The binary function op, lifted
        // to a function over two parsers.
        p =&gt; apP(fmapP(op)(p));


    // many :: Parser a -&gt; Parser [a]
    const many = p =&gt; {
        // Zero or more instances of p.
        // Lifts a parser for a simple type of value
        // to a parser for a list of such values.
        const someP = q =&gt;
            liftA2P(
                x =&gt; xs =&gt; [x].concat(xs)
            )(q)(many(q));

        return Parser(
            s =&gt; parse(
                0 &lt; s.length ? (
                    altP(someP(p))(pureP([]))
                ) : pureP([])
            )(s)
        );
    };


    // parse :: Parser a -&gt; String -&gt; [(a, String)]
    const parse = p =&gt;
        // The result of parsing s with p.
        s =&gt; p.parser([...s]);


    // pureP :: a -&gt; Parser a
    const pureP = x =&gt;
        // The value x lifted, unchanged,
        // into the Parser monad.
        Parser(s =&gt; [Tuple(x)(s)]);


    // satisfy :: (Char -&gt; Bool) -&gt; Parser Char
    const satisfy = test =&gt;
        // Any character for which the
        // given predicate returns true.
        Parser(
            s =&gt; 0 &lt; s.length ? (
                test(s[0]) ? [
                    Tuple(s[0])(s.slice(1))
                ] : []
            ) : []
        );


    // sequenceP :: [Parser a] -&gt; Parser [a]
    const sequenceP = ps =&gt;
        // A single parser for a list of values, derived
        // from a list of parsers for single values.
        Parser(
            s =&gt; ps.reduce(
                (a, q) =&gt; a.flatMap(
                    vr =&gt; parse(q)(snd(vr)).flatMap(
                        first(xs =&gt; fst(vr).concat(xs))
                    )
                ),
                [Tuple([])(s)]
            )
        );


    // string :: String -&gt; Parser String
    const string = s =&gt;
        // A particular string.
        fmapP(cs =&gt; cs.join(""))(
            sequenceP([...s].map(char))
        );


    // takeWhileP :: (Char -&gt; Bool) -&gt; Parser String
    const takeWhileP = p =&gt;
        // The largest prefix in which p is
        // true over all the characters.
        Parser(
            compose(
                pureList,
                first(concat),
                span(p)
            )
        );


    // thenBindP :: Parser a -&gt; Parser b -&gt;
    // (b -&gt; Parser c) Parser c
    const thenBindP = o =&gt;
        // A combination of thenP and bindP in which a
        // preliminary  parser consumes text and discards
        // its output, before any output of a subsequent
        // parser is bound.
        p =&gt; f =&gt; Parser(
            s =&gt; parse(o)(s).flatMap(
                vr =&gt; parse(p)(vr[1]).flatMap(
                    tpl =&gt; parse(f(tpl[0]))(tpl[1])
                )
            )
        );


    // thenP (&gt;&gt;) :: Parser a -&gt; Parser b -&gt; Parser b
    const thenP = o =&gt;
        // A composite parser in which o just consumes text
        // and then p consumes more and returns a value.
        p =&gt; Parser(
            s =&gt; parse(o)(s).flatMap(
                vr =&gt; parse(p)(vr[1])
            )
        );

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // doesFileExist :: FilePath -&gt; IO Bool
    const doesFileExist = fp =&gt; {
        const ref = Ref();

        return $.NSFileManager.defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp)
                .stringByStandardizingPath, ref
            ) &amp;&amp; 1 !== ref[0];
    };


    // filePath :: String -&gt; FilePath
    const filePath = s =&gt;
        // The given file path with any tilde expanded
        // to the full user directory path.
        ObjC.unwrap(ObjC.wrap(s)
            .stringByStandardizingPath);


    // readFile :: FilePath -&gt; IO String
    const readFile = fp =&gt; {
        // The contents of a text file at the
        // filepath fp.
        const
            e = $(),
            ns = $.NSString
            .stringWithContentsOfFileEncodingError(
                $(fp).stringByStandardizingPath,
                $.NSUTF8StringEncoding,
                e
            );

        return ObjC.unwrap(
            ns.isNil() ? (
                e.localizedDescription
            ) : ns
        );
    };


    // showMenuLR :: Bool -&gt; String -&gt; String -&gt;
    // [String] -&gt; String -&gt; Either String [String]
    const showMenuLR = blnMult =&gt;
        // An optionally multi-choice menu, with
        // a given title and prompt string.
        // Listing the strings in xs, with
        // the string `selected` pre-selected
        // if found in xs.
        menuTitle =&gt; prompt =&gt; selected =&gt; xs =&gt;
        0 &lt; xs.length ? (() =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            sa.activate();

            const v = sa.chooseFromList(xs, {
                withTitle: menuTitle,
                withPrompt: prompt,
                defaultItems: xs.includes(selected) ? (
                    [selected]
                ) : [xs[0]],
                okButtonName: "OK",
                cancelButtonName: "Cancel",
                multipleSelectionsAllowed: blnMult,
                emptySelectionAllowed: false
            });

            return Array.isArray(v) ? (
                Right(v)
            ) : Left(`User cancelled ${menuTitle} menu.`);
        })() : Left(`${menuTitle}: No items to choose from.`);


    // ---------------- GENERIC FUNCTIONS ----------------
    // https://github.com/RobTrew/prelude-jxa

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2
        });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);

            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };


    // compose (&lt;&lt;&lt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
    const compose = (...fs) =&gt;
        // A function defined by the right-to-left
        // composition of all the functions in fs.
        fs.reduce(
            (f, g) =&gt; x =&gt; f(g(x)),
            x =&gt; x
        );


    // concat :: [[a]] -&gt; [a]
    // concat :: [String] -&gt; String
    const concat = xs =&gt;
        0 &lt; xs.length ? (
            (
                xs.every(x =&gt; "string" === typeof x) ? (
                    ""
                ) : []
            ).concat(...xs)
        ) : xs;


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e ? (
            fl(e.Left)
        ) : fr(e.Right);


    // first :: (a -&gt; b) -&gt; ((a, c) -&gt; (b, c))
    const first = f =&gt;
        // A simple function lifted to one which applies
        // to a tuple, transforming only its first item.
        xy =&gt; Tuple(f(xy[0]))(
            xy[1]
        );


    // fst :: (a, b) -&gt; a
    const fst = tpl =&gt;
        // First member of a pair.
        tpl[0];


    // identity :: a -&gt; a
    const identity = x =&gt;
        // The identity function.
        x;


    // lines :: String -&gt; [String]
    const lines = s =&gt;
        // A list of strings derived from a single
        // newline-delimited string.
        0 &lt; s.length ? (
            s.split(/[\r\n]/u)
        ) : [];


    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // ne :: a -&gt; a -&gt; Bool
    const ne = a =&gt;
        b =&gt; a !== b;


    // pureList :: a -&gt; [a]
    const pureList = x =&gt; [x];


    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        // eslint-disable-next-line no-console
        console.log(
            args
            .map(JSON.stringify)
            .join(" -&gt; ")
        );


    // snd :: (a, b) -&gt; b
    const snd = tpl =&gt;
        // Second member of a pair.
        tpl[1];


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // span :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])
    const span = p =&gt;
        // Longest prefix of xs consisting of elements which
        // all satisfy p, tupled with the remainder of xs.
        xs =&gt; {
            const i = xs.findIndex(x =&gt; !p(x));

            return -1 !== i ? (
                Tuple(xs.slice(0, i))(
                    xs.slice(i)
                )
            ) : Tuple(xs)([]);
        };


    // strip :: String -&gt; String
    const strip = s =&gt;
        s.trim();

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Clear the linkListFilePath variable, in case similar macros use a different file.</string>
						<key>ActionUID</key>
						<integer>15997183</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>linkListFilePath</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620152106.71959996</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:239,239,239,255=↓=86=2=0=0=KMCOLOR:255,0,0,255</string>
				<key>ModificationDate</key>
				<real>659824629.65695703</real>
				<key>Name</key>
				<string>Menu of MD links in TaskPaper front document</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>9537F29C-AF38-44BB-8D6B-CD68F046F181</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997171</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    ObjC.import("AppKit");

    // main ::  IO ()
    const main = () =&gt; {
        const
            macroGroupName = "MD Link tools",
            mdLinkToolsGroups = Application(
                "Keyboard Maestro"
            )
            .macroGroups.where({
                name: macroGroupName
            });

        return either(
            alert("Copy as MD Link - instances")
        )(tpl =&gt; {
            const [listing, count] = Array.from(tpl);

            return (
                copyText(listing),
                alert(
                    `Copy as MD Link :: ${count} specialised instances.`
                )(listing)
            );
        })(
            0 &lt; mdLinkToolsGroups.length ? (() =&gt; {
                const
                    instances = mdLinkToolsGroups.at(0)
                    .macros()
                    .flatMap(macro =&gt; {
                        const k = macro.name();

                        return k.includes(".") ? (
                            [k]
                        ) : [];
                    });

                return Right(
                    Tuple(
                        sortBy(
                            comparing(toLower)
                        )(
                            instances.map(x =&gt; `- ${x}`)
                        )
                        .join("\n")
                    )(instances.length)
                );
            })() : Left(
                `Macro group not found:\n\n\t${macroGroupName}`
            )
        );
    };

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;

        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2
        });


    // comparing :: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)
    const comparing = f =&gt;
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);

            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Either" === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // list :: StringOrArrayLike b =&gt; b -&gt; [a]
    const list = xs =&gt;
        // xs itself, if it is an Array,
        // or an Array derived from xs.
        Array.isArray(xs) ? (
            xs
        ) : Array.from(xs || []);


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
        xs =&gt; list(xs).slice()
        .sort((a, b) =&gt; f(a)(b));


    // toLower :: String -&gt; String
    const toLower = s =&gt;
        // Lower-case version of string.
        s.toLocaleLowerCase();

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>631058844.49377406</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:239,239,239,255=↓=86=2=0=0=KMCOLOR:255,0,0,255</string>
				<key>ModificationDate</key>
				<real>659824618.40139794</real>
				<key>Name</key>
				<string>Copy list of specialised instances</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>88780E4E-8C09-4445-954A-F837D66D8859</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997116</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.hogbaysoftware.Bike</string>
							<key>Name</key>
							<string>Bike</string>
							<key>NewFile</key>
							<string>/Applications/Bike.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997117</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    const doc = Application("Bike").documents.at(0);

    return doc.exists() ? (() =&gt; {
        const
            rows = doc.rows.where({
                _and: [
                    {selected: true},
                    {_not: [{
                        name: ""
                    }]}
                ]
            });

        return 0 &lt; rows.length ? (() =&gt; {
            const
                row = rows.at(0),
                label = doc.selectedText() || (
                    row.name()
                );

            return `[${label}](${row.url()})`;
        })() : "No rows selected in Bike.";
    })() : "No documents open in Bike.";
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>665188126.03055596</real>
				<key>ModificationDate</key>
				<real>685963836.36670601</real>
				<key>Name</key>
				<string>com.hogbaysoftware.Bike</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>12FD40DC-15BB-41DA-B11F-FDEA59B33065</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997188</integer>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string>Submarine</string>
						<key>Subtitle</key>
						<string>Cycling Kindle Views</string>
						<key>Text</key>
						<string>Please wait ...</string>
						<key>Title</key>
						<string>Copy As MD Link</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997189</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Copy as MD Link for macOS Kindle

    // Rob Trew @ 2020

    // Read available fields 
    //     (for md link :: Title + Author, Location, ASIN)
    // from active Kindle view &lt;- {'page', 'icon', 'list'}
    // and continue to 'next' view,
    // until 'home' and 'dry'.

    // main :: IO ()
    const main = () =&gt; {
        const kme = Application('Keyboard Maestro Engine');
        return either(
            alert('Copy as MD Link')
        )(x =&gt; (
            kme.setvariable('mdLink', {
                to: x
            }),
            x
        ))(
            bindLR(
                kindleProcLR()
            )(proc =&gt; bindLR(
                until(
                    homeAndDryOrSunk
                )(
                    harvestNextViewLR(kme)(proc)
                )(
                    viewHarvestFromProcessLR(kme)(proc)({
                        viewPath: []
                    })
                )
            )(linkFromDictLR))
        );
    };


    // harvestNextViewLR :: Application -&gt; a
    // Dict -&gt; Either String Dict
    const harvestNextViewLR = kme =&gt;
        proc =&gt; lrDict =&gt; {
            const
                dict = lrDict.Right,
                path = dict.viewPath,
                currentView = last(path);
            return (
                // In Kindle:
                !isComplete(dict) ? (
                    'list' !== currentView ? (
                        kme.doScript(
                            'page' !== currentView ? (
                                hitReturnPlist
                            ) : menuChainPlist([
                                'File',
                                'Close Book'
                            ])
                        )
                    ) : Boolean(dict.location) ? (
                        clickViewButton(proc)('list')
                    ) : kme.doScript(hitReturnPlist)
                ) : 'page' !== currentView ? (
                    'page' !== path[0] ? (
                        clickViewButton(proc)(currentView)
                    ) : kme.doScript(
                        menuChainPlist(['File', 'Open Book'])
                    )
                ) : kme.doScript(
                    menuChainPlist(['File', 'Close Book'])
                ),
                // In JavaScript interpreter:
                viewHarvestFromProcessLR(kme)(proc)(
                    dict
                )
            );
        };


    // linkFromDictLR :: Dict -&gt; Either String String
    const linkFromDictLR = dict =&gt;
        // Either a message or an MD Link string
        bindLR(
            Boolean(dict.name) ? (
                Right(dict.name)
            ) : Left('Name field not found')
        )(name =&gt; {
            const
                i = [...name].findIndex(
                    c =&gt; ',' === c
                );
            return -1 !== i ? (() =&gt; {
                const [title, rest] = splitAt(i)(name);
                const
                    authorList = Object.keys(
                        rest.slice(1).split(/; /g).reduce(
                            (a, k) =&gt; Object.assign({},
                                a, {
                                    [
                                        reverse(
                                            k.split(', ')
                                        ).join(' ')
                                    ]: 1
                                }), {}
                        )
                    );
                return Right(
                    `[${title} – ${authorList.join(', ')}]` + (
                        '(kindle://book?action=open&amp;asin=' + (
                            `${dict.asin}&amp;location=${dict.location})`
                        )
                    )
                );
            })() : Left('No comma found in name field.');
        });


    // isComplete :: Dict -&gt; Bool
    const isComplete = dict =&gt; {
        // Complete if the dictionary 
        // holds all 3 key values &lt;- {asin, location, name}
        const ks = Object.keys(dict);
        return ['name', 'asin', 'location'].every(
            k =&gt; ks.includes(k)
        );
    };


    // homeAndDryOrSunk :: Either String Dict -&gt; Bool
    const homeAndDryOrSunk = lrDict =&gt;
        // Either an explanatory message, or 
        // True if all the sought key values are 
        // present in the dictionary, and the path
        // shows a return to initial position.
        Boolean(lrDict.Left) || (() =&gt; {
            const
                dict = lrDict.Right,
                path = dict.viewPath;
            return 1 &lt; path.length &amp;&amp; (
                path[0] === last(path)
            ) &amp;&amp; isComplete(dict);
        })();


    // viewHarvestFromProcessLR :: Application -&gt; 
    // process -&gt; Dict -&gt; Either String Dict
    const viewHarvestFromProcessLR = kme =&gt;
        // Either a message or a dictionary with
        // additional fields and an extended path
        // of visited views.
        process =&gt; history =&gt; bindLR(
            kindleProcWinLR(process)
        )(window =&gt; bindLR(
            kindleWindowToolbarLR(window)
        )(toolbar =&gt; bindLR(
            kindleToolbarControlsLR(toolbar)
        )(controls =&gt; bindLR(
            kindleWindowTypeLR(controls)
        )(winType =&gt; 'page' === winType ? (
            locationFromKindlePageLR(history)(window)
        ) : 'list' === winType ? (
            authorFromKindleListLR(history)(window)
        ) : 'icon' === winType ? (
            bindLR(
                titlePosnSizeFromKindleIconLR(window)
            )(
                asinEtcFromIconDetailsLR(kme)(history)
            )
        ) : Left('other')))));


    // asinEtcFromIconDetailsLR :: Application -&gt; 
    // Dict -&gt; (String, String, String) -&gt; 
    // Either String Dict
    const asinEtcFromIconDetailsLR = kme =&gt;
        // Either a message or a dictionary with an 
        // extended viewPath and updated or added 
        // `asin` and `name` fields.
        history =&gt; ([label, posn, size]) =&gt; {
            const
                x = posn[0] + size[0] / 2,
                y = posn[1] + size[1] / 2;
            return Right(
                (
                    copyText(''),
                    kme.doScript(
                        clickPointPlist(x)(y)
                    ),
                    kme.doScript(controlCplist),
                    Object.assign({}, history, {
                        viewPath: history.viewPath.concat('icon'),
                        name: label.split(', Reading')[0],
                        asin: either(
                            _ =&gt; 'Empty clipboard - asin not found.'
                        )(
                            x =&gt; x.split('-0-')[0]
                        )(clipTextLR())
                    })
                )
            );
        };


    // titlePosnSizeFromKindleIconLR :: Window -&gt; 
    // Either String [String, (Int, Int), (Int, Int)]
    const titlePosnSizeFromKindleIconLR = window =&gt; {
        const lists = window.lists;
        return bindLR(
            0 &lt; lists.length ? (
                Right(lists.at(0))
            ) : Left('No icon list found - perhaps not icon view ?')
        )(list =&gt; {
            const
                staticText = lists.at(0)
                .staticTexts.at(0);
            return Right([
                'title', 'position', 'size'
            ].map(k =&gt; staticText[k]()));
        });
    };


    // kindleProcLR :: () -&gt; Either String Process
    const kindleProcLR = () =&gt; {
        // Either a message, or a reference
        // to a running Kindle process.
        const
            kindleProcs = Application('System Events')
            .applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return 0 &lt; kindleProcs.length ? (
            Right(kindleProcs.at(0))
        ) : Left('Kindle reader not found.');
    };


    // kindleProcWinLR :: Process -&gt; Either String Window
    const kindleProcWinLR = process =&gt; {
        const wins = process.windows;
        return 0 &lt; wins.length ? (
            Right(wins.at(0))
        ) : Left('Open window not found in Kindle.');
    };


    // kindleToolbarControlsLR :: Toolbar -&gt; 
    // Either Message Buttons
    const kindleToolbarControlsLR = toolbar =&gt; {
        const controls = toolbar.uiElements;
        return 0 &lt; controls.length ? (
            Right(controls)
        ) : Left('No UI elements found in toolbar.');
    };


    // kindleWindowToolbarLR :: Window -&gt; Either String Toolbar
    const kindleWindowToolbarLR = window =&gt; {
        const toolbars = window.toolbars;
        return 0 &lt; toolbars.length ? (
            Right(toolbars.at(0))
        ) : Left(
            'No toolbars found in Kindle window: ' + (
                window.name()
            )
        );
    };


    // kindleWindowTypeLR :: controls -&gt; 
    // Either String String
    const kindleWindowTypeLR = controls =&gt; {
        const count = controls.length;
        return [3, 4, 8].includes(count) ? (
            Right(({
                3: 'list',
                4: 'icon',
                8: 'page'
            })[count])
        ) : Left(
            'Unrecognised pattern of controls on toolbar.'
        );
    };


    // authorFromKindleListLR :: Dict -&gt; 
    // Window -&gt; Either String Dict
    const authorFromKindleListLR = history =&gt;
        window =&gt; {
            const tables = window.tables;
            return bindLR(
                0 &lt; tables.length ? (
                    Right(tables.at(0))
                ) : Left('No table found in window - perhaps not list ?')
            )(
                table =&gt; {
                    const staticTexts = table.staticTexts;
                    return bindLR(
                        1 &lt; staticTexts.length ? (
                            Right(staticTexts)
                        ) : Left('Less than 2 static texts found.')
                    )(
                        texts =&gt; Right(
                            Object.assign({}, history, {
                                viewPath: history.viewPath
                                    .concat('list'),
                                author: texts.at(1).title()
                            })
                        )
                    );
                }
            );
        };


    // --------------------- TOKENS ----------------------

    // locationFromKindlePageLR :: Dict -&gt; 
    // Window -&gt; Either String Dict
    const locationFromKindlePageLR = history =&gt;
        window =&gt; {
            const
                staticTexts = window.staticTexts(),
                iLabel = staticTexts.findIndex(
                    x =&gt; 0 &lt; x.uiElements.length
                );
            return -1 !== iLabel ? (() =&gt; {
                const
                    xs = staticTexts[iLabel]
                    .uiElements.at(0).value()
                    .split(/\s+/g),
                    lng = xs.length;
                return bindLR(
                    2 &lt; lng ? (
                        Right(xs[lng - 3])
                    ) : Left(
                        'Location string not found.'
                    )
                )(label =&gt; isNaN(label) ? (
                    Left('Expected a location integer.')
                ) : Right(
                    Object.assign({}, history, {
                        viewPath: history.viewPath.concat('page'),
                        location: parseInt(label)
                    })
                ));
            })() : Left('Library page');
        };


    // --------------------- KINDLE ----------------------

    // kindlePageBookNameLR :: Either String String
    const kindlePageBookNameLR = () =&gt; {
        const
            se = Application('System Events'),
            kindleProcs = se.applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return bindLR(
            0 &lt; kindleProcs.length ? (
                Right(kindleProcs.at(0))
            ) : Left('Kindle reader not found.')
        )(kindleProc =&gt; {
            const ws = kindleProc.windows;
            return bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left('No windows open in Kindle')
            )(win =&gt; {
                const
                    toolbar = win.toolbars.at(0),
                    buttons = toolbar.buttons;
                return buttons.length !== 4 ? (
                    Left('This is not a reading page')
                ) : Right(win.title().split(' - ').slice(1)[0]);
            });
        });
    };


    // kindleButtonTypeLR :: () -&gt; IO Dict
    const kindleButtonTypeLR = () =&gt; {
        // Either a message, or a dictionary with 
        // a single key drawn from {'icon', 'list', 'library'}
        // the value of the key is a button which can be 
        // clicked with the method:
        // (dct[k]).actions.at(0).perform()
        const
            se = Application('System Events'),
            kindleProcs = se.applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return bindLR(
            0 &lt; kindleProcs.length ? (
                Right(kindleProcs.at(0))
            ) : Left('Kindle reader not found.')
        )(kindleProc =&gt; {
            const ws = kindleProc.windows;
            return bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left('No windows open in Kindle')
            )(win =&gt; {
                const
                    toolbar = win.toolbars.at(0),
                    buttons = toolbar.buttons;
                return Right(
                    0 &lt; buttons.length ? ({
                        library: buttons.at(0)
                    }) : (() =&gt; {
                        const
                            groups = toolbar.groups,
                            blnIconView = 3 &lt; groups.length,
                            group = groups.at(
                                blnIconView ? (
                                    2
                                ) : 1
                            );
                        return {
                            [blnIconView ? 'list' : 'icons']: (
                                group.radioGroups.at(0)
                                .radioButtons.at(
                                    blnIconView ? (
                                        1
                                    ) : 0
                                )
                            )
                        };
                    })()
                );
            });
        });
    };


    // clickViewButton :: Process -&gt; String -&gt; Kindle IO
    const clickViewButton = proc =&gt;
        // A button clicked
        // Either the List view or Icons view button,
        // to toggle from the current view to its sibling. 
        viewName =&gt; {
            const
                toolbar = proc.windows.at(0)
                .toolbars.at(0),
                blnIconView = 'list' !== viewName,
                group = toolbar.groups.at(
                    blnIconView ? 2 : 1
                ),
                button = group.radioGroups.at(0)
                .radioButtons.at(
                    blnIconView ? 1 : 0
                );
            return button.actions.at(0).perform();
        };


    // kindleLocationFromPageLR :: 
    const kindleLocationFromPageLR = () =&gt; {
        const
            se = Application('System Events'),
            kindleProcs = se.applicationProcesses.where({
                bundleIdentifier: 'com.amazon.Kindle'
            });
        return bindLR(
            0 &lt; kindleProcs.length ? (
                Right(kindleProcs.at(0))
            ) : Left('Kindle reader not found.')
        )(kindleProc =&gt; {
            const ws = kindleProc.windows;
            return bindLR(
                0 &lt; ws.length ? (
                    Right(ws.at(0))
                ) : Left('No windows open in Kindle')
            )(win =&gt; {
                const
                    staticTexts = win.staticTexts(),
                    iLabel = staticTexts.findIndex(
                        x =&gt; 0 &lt; x.uiElements.length
                    );
                return -1 !== iLabel ? (() =&gt; {
                    const
                        xs = staticTexts[iLabel]
                        .uiElements.at(0).value()
                        .split(/\s+/g),
                        lng = xs.length;
                    return bindLR(
                        2 &lt; lng ? (
                            Right(xs[lng - 3])
                        ) : Left(
                            'Location string not found.'
                        )
                    )(label =&gt; isNaN(label) ? (
                        Left('Expected a location integer.')
                    ) : Right(parseInt(label)));
                })() : Left('Library page');
            });
        });
    };


    // kindleTypeAndFieldLR :: () -&gt; Either String (String, String)
    const kindleTypeAndFieldLR = () =&gt;
        // Either a message or a key value pair in which
        // the key is drawn from {'name', 'asin', 'location'}
        either(
            _ =&gt; bindLR(
                kindleLocationFromPageLR()
            )(
                label =&gt; Right(['location', label])
            )
        )(
            txt =&gt; 0 &lt; txt.length ? (
                txt.endsWith('EBOK') ? (
                    Right(['asin', txt.split('-')[0]])
                ) : Right(['name', txt])
            ) : Left('No text copied in Library view.')
        )(
            clipTextLR()
        );


    // ------------------- KM ACTIONS --------------------

    // activateKindlePlist :: XML String
    const activateKindlePlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;AllWindows&lt;/key&gt;
            &lt;true/&gt;
            &lt;key&gt;AlreadyActivatedActionType&lt;/key&gt;
            &lt;string&gt;Normal&lt;/string&gt;
            &lt;key&gt;Application&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;BundleIdentifier&lt;/key&gt;
                &lt;string&gt;com.amazon.Kindle&lt;/string&gt;
                &lt;key&gt;Name&lt;/key&gt;
                &lt;string&gt;Kindle&lt;/string&gt;
                &lt;key&gt;NewFile&lt;/key&gt;
                &lt;string&gt;/Applications/Kindle.app&lt;/string&gt;
            &lt;/dict&gt;
            &lt;key&gt;MacroActionType&lt;/key&gt;
            &lt;string&gt;ActivateApplication&lt;/string&gt;
            &lt;key&gt;ReopenWindows&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;TimeOutAbortsMacro&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;/plist&gt;`;


    // clickPointPlist :: Int -&gt; Int -&gt; XML String
    const clickPointPlist = x =&gt;
        y =&gt; `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;Action&lt;/key&gt;
            &lt;string&gt;MoveAndClick&lt;/string&gt;
            &lt;key&gt;Button&lt;/key&gt;
            &lt;integer&gt;0&lt;/integer&gt;
            &lt;key&gt;ClickCount&lt;/key&gt;
            &lt;integer&gt;1&lt;/integer&gt;
            &lt;key&gt;DisplayMatches&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;DragHorizontalPosition&lt;/key&gt;
            &lt;string&gt;0&lt;/string&gt;
            &lt;key&gt;DragVerticalPosition&lt;/key&gt;
            &lt;string&gt;0&lt;/string&gt;
            &lt;key&gt;Fuzz&lt;/key&gt;
            &lt;integer&gt;15&lt;/integer&gt;
            &lt;key&gt;HorizontalPositionExpression&lt;/key&gt;
            &lt;string&gt;${x}&lt;/string&gt;
            &lt;key&gt;MacroActionType&lt;/key&gt;
            &lt;string&gt;MouseMoveAndClick&lt;/string&gt;
            &lt;key&gt;Modifiers&lt;/key&gt;
            &lt;integer&gt;0&lt;/integer&gt;
            &lt;key&gt;MouseDrag&lt;/key&gt;
            &lt;string&gt;None&lt;/string&gt;
            &lt;key&gt;Relative&lt;/key&gt;
            &lt;string&gt;Window&lt;/string&gt;
            &lt;key&gt;RelativeCorner&lt;/key&gt;
            &lt;string&gt;TopLeft&lt;/string&gt;
            &lt;key&gt;RestoreMouseLocation&lt;/key&gt;
            &lt;false/&gt;
            &lt;key&gt;VerticalPositionExpression&lt;/key&gt;
            &lt;string&gt;${y}&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;/plist&gt;`;


    // menuChainPlist :: [String] -&gt; XML String
    const menuChainPlist = ks =&gt; `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
    &lt;plist version="1.0"&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;MacroActionType&lt;/key&gt;
            &lt;string&gt;SelectMenuItem&lt;/string&gt;
            &lt;key&gt;Menu&lt;/key&gt;
            &lt;array&gt;
            ${ks.map(k =&gt; ['&lt;string&gt;',k,'&lt;/string&gt;'].join('')).join('\n')}
            &lt;/array&gt;
            &lt;key&gt;TargetApplication&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;BundleIdentifier&lt;/key&gt;
                &lt;string&gt;com.amazon.Kindle&lt;/string&gt;
                &lt;key&gt;Name&lt;/key&gt;
                &lt;string&gt;Kindle&lt;/string&gt;
                &lt;key&gt;NewFile&lt;/key&gt;
                &lt;string&gt;/Applications/Kindle.app&lt;/string&gt;
            &lt;/dict&gt;
            &lt;key&gt;TargetingType&lt;/key&gt;
            &lt;string&gt;Specific&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;/plist&gt;`;


    // controlCplist :: XML String
    const controlCplist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;KeyCode&lt;/key&gt;
                &lt;integer&gt;8&lt;/integer&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SimulateKeystroke&lt;/string&gt;
                &lt;key&gt;Modifiers&lt;/key&gt;
                &lt;integer&gt;256&lt;/integer&gt;
                &lt;key&gt;ReleaseAll&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;TargetApplication&lt;/key&gt;
                &lt;dict/&gt;
                &lt;key&gt;TargetingType&lt;/key&gt;
                &lt;string&gt;Front&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`;


    // hitReturnPlist :: XML String
    const hitReturnPlist = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;KeyCode&lt;/key&gt;
                &lt;integer&gt;36&lt;/integer&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;SimulateKeystroke&lt;/string&gt;
                &lt;key&gt;Modifiers&lt;/key&gt;
                &lt;integer&gt;0&lt;/integer&gt;
                &lt;key&gt;ReleaseAll&lt;/key&gt;
                &lt;false/&gt;
                &lt;key&gt;TargetApplication&lt;/key&gt;
                &lt;dict/&gt;
                &lt;key&gt;TargetingType&lt;/key&gt;
                &lt;string&gt;Front&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`;


    // pausePlist :: XML String
    const pausePlist = `
        &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
        &lt;plist version="1.0"&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;MacroActionType&lt;/key&gt;
                &lt;string&gt;Pause&lt;/string&gt;
                &lt;key&gt;Time&lt;/key&gt;
                &lt;string&gt;0.2&lt;/string&gt;
                &lt;key&gt;TimeOutAbortsMacro&lt;/key&gt;
                &lt;true/&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;/plist&gt;`;


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };


    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );


    // copyText :: String -&gt; IO String
    const copyText = s =&gt; {
        const pb = $.NSPasteboard.generalPasteboard;
        return (
            pb.clearContents,
            pb.setStringForType(
                $(s),
                $.NSPasteboardTypeString
            ),
            s
        );
    };


    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;


    // last :: [a] -&gt; a
    const last = xs =&gt;
        // The last item of a list.
        0 &lt; xs.length ? (
            xs.slice(-1)[0]
        ) : undefined;


    // reverse :: [a] -&gt; [a]
    const reverse = xs =&gt;
        'string' !== typeof xs ? (
            xs.slice(0).reverse()
        ) : xs.split('').reverse().join('');


    // showLog :: a -&gt; IO ()
    const showLog = (...args) =&gt;
        console.log(
            args
            .map(JSON.stringify)
            .join(' -&gt; ')
        );

    // splitAt :: Int -&gt; [a] -&gt; ([a], [a])
    const splitAt = n =&gt;
        xs =&gt; [
            xs.slice(0, n),
            xs.slice(n)
        ];

    // until :: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a
    const until = p =&gt;
        f =&gt; x =&gt; {
            let v = x;
            while (!p(v)) v = f(v);
            return v;
        };

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997190</integer>
						<key>DeviceID</key>
						<string>SOUNDEFFECTS</string>
						<key>MacroActionType</key>
						<string>PlaySound</string>
						<key>Path</key>
						<string>/System/Library/Sounds/Glass.aiff</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>630112216.709167</real>
				<key>ModificationDate</key>
				<real>634818441.35937905</real>
				<key>Name</key>
				<string>com.amazon.Kindle</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>18223386-E979-45C1-821E-E88E2A39595C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997172</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997173</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>File</string>
							<string>Copy</string>
							<string>Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.agiletortoise.Drafts-OSX</string>
							<key>Name</key>
							<string>Drafts</string>
							<key>NewFile</key>
							<string>/Applications/Drafts.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause Until non-empty text in clipboard</string>
						<key>ActionUID</key>
						<integer>15997174</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997175</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdURL</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997176</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997177</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>File</string>
							<string>Copy</string>
							<string>Contents</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.agiletortoise.Drafts-OSX</string>
							<key>Name</key>
							<string>Drafts</string>
							<key>NewFile</key>
							<string>/Applications/Drafts.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause Until non-empty text in clipboard</string>
						<key>ActionUID</key>
						<integer>15997178</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997179</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

	// main :: IO ()
    const main = () =&gt; either(
        alert('Copy as MD link')
    )(
        txt =&gt; {
            const
                mdURL = Application(
                    'Keyboard Maestro Engine'
                ).getvariable('mdURL');
            return `[${txt}](${mdURL})`;
        }
    )(
        bindLR(
            clipTextLR()
        )(
            txt =&gt; Right(
                txt.split(/[\n\r]+/)[0]
            )
        )
    );

    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipTextLR :: () -&gt; Either String String
    const clipTextLR = () =&gt; (
        v =&gt; Boolean(v) &amp;&amp; 0 &lt; v.length ? (
            Right(v)
        ) : Left('No utf8-plain-text found in clipboard.')
    )(
        ObjC.unwrap($.NSPasteboard.generalPasteboard
            .stringForType($.NSPasteboardTypeString))
    );

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>630094796.31117594</real>
				<key>ModificationDate</key>
				<real>634818434.67391503</real>
				<key>Name</key>
				<string>com.agiletortoise.Drafts-OSX</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>20B09FEB-FD74-44D8-85AE-2635A4B58AD8</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997057</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>local_BundleId</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>return (() =&gt; {
    "use strict";

    // Rob Trew @2020, @2024

    // main :: IO ()
    const main = () =&gt; {
        const
            version = kmvar.local_BundleId,
            op = Application(version),
            wins = op.windows;

        return either(
            // A user message,
            alert("MD link")
        )(
            // or a Markdown link.
            x =&gt; x
        )(
            fmapLR(
                linkForWindow
            )(
                0 &lt; wins.length
                    ? Right(wins.at(0))
                    : Left(`No documents open in ${version}.`)
            )
        );
    };

    // linkForWindow :: Window -&gt; String
    const linkForWindow = window =&gt; {
        const
            selns = window.selectedTasks(),
            doc = window.document,
            fp = Path(doc.file()).toString();

        return 0 &lt; selns.length
            ? taskMDLink(fp)(selns)
            : fileMDLink(doc)(fp);
    };


    // taskMDLink :: FilePath -&gt; OP Selections -&gt; String
    const taskMDLink = fp =&gt;
        selns =&gt; {
            const
                opURL = encodeURI(`omniplan://localhost${fp}`),
                taskNames = selns.map(x =&gt; x.name())
                .join(","),
                taskIds = selns.map(x =&gt; x.id())
                .join(",%2520");

            return `[${taskNames}](${opURL}/task/${taskIds})`;
        };


    // fileMDLink :: Document -&gt; FilePath -&gt; String
    const fileMDLink = doc =&gt;
        fp =&gt; {
            const fileURL = encodeURI(`file://${fp}`);

            return `[${doc.name()}](${fileURL})`;
        };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------
    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);


    // fmapLR (&lt;$&gt;) :: (b -&gt; c) -&gt; Either a b -&gt; Either a c
    const fmapLR = f =&gt;
    // Either f mapped into the contents of any Right
    // value in e, or e unchanged if is a Left value.
        e =&gt; "Left" in e
            ? e
            : Right(f(e.Right));

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740911379.07701302</real>
				<key>ModificationDate</key>
				<real>740912834.35791695</real>
				<key>Name</key>
				<string>Omniplan variant</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>MacroTriggerType</key>
						<string>Subroutine</string>
						<key>Parameters</key>
						<array>
							<string>local_BundleId</string>
						</array>
						<key>ReturnsValue</key>
						<false/>
					</dict>
				</array>
				<key>UID</key>
				<string>9815DA78-703E-424C-9025-2D182032A61F</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997133</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997134</integer>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.apple.AddressBook</string>
							<key>Name</key>
							<string>Contacts</string>
							<key>NewFile</key>
							<string>/System/Applications/Contacts.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997135</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997136</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    ObjC.import('AppKit');

    // Rob Trew @2020

    // Any Contacts in the clipboard rewritten as 
    // [name](addressbook://etc) Markdown links
    // and stored in an "mdLink" KM Variable

    // main :: IO ()
    const main = () =&gt; {
        const
            pBoard = $.NSPasteboard.generalPasteboard,
            unwrap = ObjC.deepUnwrap;
        return defaultOrFromFirst(
            'No contact found in clipboard'
        )(
            x =&gt; x
        )(
            unwrap(
                pBoard.pasteboardItems.js[0]
                .types
            )
            .filter(k =&gt; k.startsWith('dyn'))
            .flatMap(clipType =&gt; {
                const
                    dict = unwrap(
                        pBoard
                        .propertyListForType(clipType)
                    );
                return !!dict ? (
                    Object.keys(dict)
                    .filter(k =&gt; k.endsWith('ABPerson'))
                    .flatMap(uid =&gt; {
                        const
                            x = dict[uid],
                            pre = x.First || '',
                            nom = x.Last || '',
                            label = !!(pre + nom) ? (
                                `${pre} ${nom}`
                            ) : (x.Organization || '?');
                        return [
                            `[${label}]` + (
                                `(addressbook://${uid})`
                            )
                        ];
                    }).join('\n')
                ) : [];
            })
        );
    };

    // ----------------- GENERIC FUNCTIONS -----------------
    // https://github.com/RobTrew/prelude-jxa

    // defaultOrFromFirst :: b -&gt; (a -&gt; b) -&gt; [a] -&gt; b
    const defaultOrFromFirst = v =&gt;
        // Equivalent of maybe | either for
        // the list monad. 
        f =&gt; xs =&gt; 0 &lt; xs.length ? (
            f(xs[0])
        ) : v;

    // MAIN ---
    return main();
})();
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>622187946.18329895</real>
				<key>ModificationDate</key>
				<real>634818445.21108699</real>
				<key>Name</key>
				<string>com.apple.AddressBook</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>3EDBA831-A2BA-4FF3-BAE8-9875BE35BD6E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionName</key>
						<string>Clear System Clipboard to empty string</string>
						<key>ActionUID</key>
						<integer>15997199</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997200</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>File</string>
							<string>Copy Markdown Deeplink</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.lukilabs.lukiapp</string>
							<key>Name</key>
							<string>Craft</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause Until Clipboard has non-empty text</string>
						<key>ActionUID</key>
						<integer>15997201</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>IsNot</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997202</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>634235267.36757696</real>
				<key>ModificationDate</key>
				<real>634818488.53573096</real>
				<key>Name</key>
				<string>com.lukilabs.lukiapp</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>496C3291-5872-40BB-8785-3B6AD48D9D8E</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997049</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997050</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';
    // Rob Trew @2020
    const
        finder = Application('com.apple.finder'),
        xs = finder.selection();
    return 0 &lt; xs.length ? (
        xs.map(
            x =&gt; `[${x.name()}](${x.url()})`
        ).join('\n')
    ) : (() =&gt; {
        const
            url = finder.insertionLocation().url(),
            fp = decodeURI(url).slice(7);
        return `[${fp}](${url})`;
    })();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620251830.94660604</real>
				<key>ModificationDate</key>
				<real>697800471.51998305</real>
				<key>Name</key>
				<string>com.apple.finder</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>0CA4309A-CBFF-463A-B6CE-451D5BD75292</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997064</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020
    
    return Application('HoudahSpot')
        .selection()
        .map(
            x =&gt; `[${x.name()}]` + (
                `(${encodeURI('file://' + x.path())})`
            )
        )
        .join('\n');
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>629131329.70978701</real>
				<key>ModificationDate</key>
				<real>634818477.52116799</real>
				<key>Name</key>
				<string>com.houdah.HoudahSpot4</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>4EF48A12-8FF0-4093-AFF6-AB19D31E6538</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997203</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997204</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>de.zettelkasten.TheArchive</string>
							<key>Name</key>
							<string>The Archive</string>
							<key>NewFile</key>
							<string>/Applications/The Archive.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997205</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy Link to Note</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>de.zettelkasten.TheArchive</string>
							<key>Name</key>
							<string>The Archive</string>
							<key>NewFile</key>
							<string>/Applications/The Archive.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997206</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>StartsWith</string>
									<key>ClipboardText</key>
									<string>[[</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>Any</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997207</integer>
						<key>Delete</key>
						<false/>
						<key>Destination</key>
						<string>Clipboard</string>
						<key>First</key>
						<string>3</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Substring</string>
						<key>Second</key>
						<string>-2</string>
						<key>Source</key>
						<string>Clipboard</string>
						<key>StringRangeType</key>
						<string>From</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997208</integer>
						<key>Delete</key>
						<true/>
						<key>Destination</key>
						<string>Clipboard</string>
						<key>First</key>
						<string>2</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Substring</string>
						<key>Second</key>
						<string>-2</string>
						<key>Source</key>
						<string>Clipboard</string>
						<key>StringRangeType</key>
						<string>Last</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997209</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%SystemClipboard%](</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>PercentEncodeForURL</string>
						<key>ActionUID</key>
						<integer>15997210</integer>
						<key>Destination</key>
						<string>Clipboard</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Filter</string>
						<key>Source</key>
						<string>Clipboard</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997211</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>TargetNamedClipboardRedundantDisplayName</key>
						<string>mdLink</string>
						<key>TargetNamedClipboardUID</key>
						<string>DFCE8C45-2347-4DE1-988E-B2682FFE34BC</string>
						<key>TargetUseNamedClipboard</key>
						<true/>
						<key>Text</key>
						<string>%Variable%mdLink%thearchive://match/%SystemClipboard%)</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>621966806.012748</real>
				<key>ModificationDate</key>
				<real>634818679.58455896</real>
				<key>Name</key>
				<string>de.zettelkasten.TheArchive</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>2214E66C-17A6-4B1D-B0BA-6E0C551A295F</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997061</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020
    
    return Application('HoudahSpot')
        .selection()
        .map(
            x =&gt; `[${x.name()}]` + (
                `(${encodeURI('file://' + x.path())})`
            )
        )
        .join('\n');
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>635934929.79883099</real>
				<key>ModificationDate</key>
				<real>635934979.944368</real>
				<key>Name</key>
				<string>com.houdah.HoudahSpot-setapp</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>58FCE941-F9D2-4ABE-8D2C-42045D3E5B3C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997114</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    // main :: IO ()
    const main = () =&gt; {
        // com.omnigroup.OmniOutliner5
        const
            docs = Application("OmniOutliner")
            .documents;

        return either(
            msg =&gt; (
                alert("Copy as MD links")(msg),
                ""
            )
        )(
            mdLink =&gt; mdLink
        )(
            bindLR(
                0 &lt; docs.length ? (
                    Right(docs.at(0))
                ) : Left(
                    "No documents open in OmniOutliner."
                )
            )(
                ooLinksLR
            )
        );
    };

    // --------------- OMNIOUTLINER LINKS ----------------

    // ooLinksLR :: OO Document -&gt; Either String String
    const ooLinksLR = doc =&gt; {
        const file = doc.file();

        return null !== file ? (() =&gt; {
            const
                prefix = "omnioutliner:///open?row=",
                fp = Path(doc.file()).toString(),
                mdDoc = `[${doc.name()}](file://${fp})`,
                selns = doc.selectedRows;

            return Right(
                0 &lt; selns.length ? (() =&gt; {
                    const
                        rowLinks = selns()
                        .map(row =&gt; {
                            const
                                k = row.name(),
                                v = `${prefix}${row.id()}`;

                            return `[${k}](${v})`;
                        })
                        .join("\n");

                    return `${mdDoc}\n${rowLinks}`;
                })() : mdDoc
            );
        })() : Left(
            "OmniOutliner document not saved."
        );
    };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };


    // --------------------- GENERIC ---------------------
    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; m.Left ? (
            m
        ) : mf(m.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; e.Left ? (
            fl(e.Left)
        ) : fr(e.Right);

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>654893935.81021404</real>
				<key>ModificationDate</key>
				<real>654893959.09812498</real>
				<key>Name</key>
				<string>com.omnigroup.OmniOutliner5</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>2B4FE83E-1647-4240-963F-9DDF87BE7D4C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997012</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997013</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    "use strict";

    const
        devon = Application("DEVONthink 3"),
        tab = devon.thinkWindows.at(0).currentTab,
        contentRecord = tab.contentRecord,
        [name, ref] = contentRecord.exists()
            ? [contentRecord, tab]
            : (() =&gt; {
                const
                    selectedRecords = devon.selectedRecords,
                    record = 1 === selectedRecords.length
                        ? selectedRecords.at(0)
                        : devon.viewerWindows.at(0).root;

                return [record, record];
            })();

    return `[${name.name()}](${ref.referenceURL()})`;
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620239734.951316</real>
				<key>ModificationDate</key>
				<real>734221570.93161905</real>
				<key>Name</key>
				<string>com.devon-technologies.think3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>BA792D01-8417-4B7C-ADCD-8903619366ED</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997187</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>9BB504DE-9FA1-423A-9B08-8F6075FA3C73</string>
						<key>Parameters</key>
						<array>
							<string>com.omnigroup.OmniFocus4.MacAppStore</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740397011.78672504</real>
				<key>ModificationDate</key>
				<real>740492509.96030295</real>
				<key>Name</key>
				<string>com.omnigroup.OmniFocus4.MacAppStore</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>4EDEB11D-1860-44C7-8315-3ED28FA43011</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997033</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.culturedcode.ThingsMac</string>
							<key>Name</key>
							<string>Things</string>
							<key>NewFile</key>
							<string>/Applications/Things3.app</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997034</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string></string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997035</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997036</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Items</string>
							<string>Share</string>
							<string>Copy Link</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.culturedcode.ThingsMac</string>
							<key>Name</key>
							<string>Things</string>
							<key>NewFile</key>
							<string>/Applications/Things3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997037</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>StartsWith</string>
									<key>ClipboardText</key>
									<string>things</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997038</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%SystemClipboard%</string>
						<key>Variable</key>
						<string>mdURL</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997039</integer>
						<key>MacroActionType</key>
						<string>Pause</string>
						<key>Time</key>
						<string>.5</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997040</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Items</string>
							<string>Share</string>
							<string>Copy Text</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.culturedcode.ThingsMac</string>
							<key>Name</key>
							<string>Things</string>
							<key>NewFile</key>
							<string>/Applications/Things3.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997041</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>DoesNotMatch</string>
									<key>ClipboardText</key>
									<string>^things*</string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997042</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>[%SystemClipboard%](%Variable%mdURL%)</string>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628200210.26363599</real>
				<key>ModificationDate</key>
				<real>634818462.92986596</real>
				<key>Name</key>
				<string>com.culturedcode.ThingsMac</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>075A5BD2-20BD-4B97-9D10-747D098FD15D</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997067</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997068</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SelectMenuItem</string>
						<key>Menu</key>
						<array>
							<string>Edit</string>
							<string>Copy</string>
						</array>
						<key>TargetApplication</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.apple.iCal</string>
							<key>Name</key>
							<string>Calendar</string>
							<key>NewFile</key>
							<string>/System/Applications/Calendar.app</string>
						</dict>
						<key>TargetingType</key>
						<string>Specific</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Pause until clipboard has text</string>
						<key>ActionUID</key>
						<integer>15997069</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ClipboardConditionType</key>
									<string>HasText</string>
									<key>ClipboardText</key>
									<string></string>
									<key>ConditionType</key>
									<string>Clipboard</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PauseUntil</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997070</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';

    // Rob Trew @2020

    ObjC.import('AppKit');

    // main :: IO ()
    const main = () =&gt;
        either(alert('Calendar link'))(x =&gt; x)(
            bindLR(
                clipOfTypeLR('public.utf8-plain-text')
            )(k =&gt; bindLR(
                clipOfTypeLR('public.url')
            )(v =&gt; Right(`[${k}](${v})`)))
        );

    // ------------------------ JXA ------------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application('System Events'), {
                    includeStandardAdditions: true
                });
            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ['OK'],
                    defaultButton: 'OK'
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            strClip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );
        return 0 &lt; strClip.length ? (
            Right(strClip)
        ) : Left(
            'No clipboard content found for type "' +
            utiOrBundleID + '"'
        );
    };

    // ----------------- GENERAL FUNCTIONS -----------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: 'Either',
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: 'Either',
        Right: x
    });

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; 'Either' === e.type ? (
            undefined !== e.Left ? (
                fl(e.Left)
            ) : fr(e.Right)
        ) : undefined;

    // bindLR (&gt;&gt;=) :: Either a -&gt; 
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; undefined !== m.Left ? (
            m
        ) : mf(m.Right);

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>620246382.12232697</real>
				<key>ModificationDate</key>
				<real>634818454.38636994</real>
				<key>Name</key>
				<string>com.apple.iCal</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>AFA16B8B-A4AC-4437-BC7F-C57220982F3C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997089</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>DeletePastClipboard</string>
						<key>PastExpression</key>
						<string>0</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997090</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>(() =&gt; {
    'use strict';
    // Rob Trew @2023
    const
        pfinder = Application('com.cocoatech.PathFinder'),
        xs = pfinder.selection();
		
    return 0 &lt; xs.length ? (
        xs.map(
            x =&gt; `[${x.name()}](${x.url()})`
        ).join('\n')
    ) : (() =&gt; {
        const
            url = pfinder.insertionLocation().url(),
            fp = decodeURI(url).slice(7);

        return `[${fp}](${url})`;
    })();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>697799802.28194404</real>
				<key>ModificationDate</key>
				<real>697801093.75284004</real>
				<key>Name</key>
				<string>com.cocoatech.PathFinder</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>51477C01-7B30-4208-B543-AEDCAD8E7431</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>16464173</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>return (() =&gt; {
    "use strict";

    ObjC.import("sqlite3");

    // MD Link(s) from com.apple.notes selection(s)
    // Rob Trew @2024
    // Ver 0.2

    // ---------------------- MAIN -----------------------
    const main = () =&gt; {
        const
            fpDB = [
                "~/Library",
                "Group Containers/group.com.apple.notes",
                "NoteStore.sqlite"
            ].join("/"),
            pks = Application("Notes").selection().map(
                x =&gt; x.id().split("/")
                    .slice(-1)[0].slice(1)
            );

        return either(
            msg =&gt; msg
        )(
            gen =&gt; Array.from(gen).join("\n")
        )(
            doesFileExist(fpDB)
                ? 0 &lt; pks.length
                    ? sqliteQueryMatchesLR(fpDB)(
                        unwords([
                            "SELECT '['",
                            "|| ZTITLE1",
                            "|| '](applenotes:note/'",
                            "|| ZIDENTIFIER",
                            "|| ')'",
                            "FROM ZICCLOUDSYNCINGOBJECT",
                            "WHERE Z_PK IN",
                            `(${pks.join(",")})`
                        ])
                    )
                    : Left("Nothing selected in Notes.")
                : Left(`File not found: ${fpDB}`)
        );
    };

    // --------------------- SQLITE ----------------------

    // sqliteQueryMatchesLR :: FilePath -&gt; 
    // SQL String -&gt; Either String [String]
    const sqliteQueryMatchesLR = fpSqliteDB =&gt;
        sqlQuery =&gt; {
            const
                SQLITE_OK = parseInt($.SQLITE_OK, 10),
                SQLITE_ROW = parseInt($.SQLITE_ROW, 10),
                ppDb = Ref();

            return fmapLR(
                tpl =&gt; unfoldr(
                    stmt =&gt; SQLITE_ROW === $.sqlite3_step(
                        stmt
                    )
                        ? Just(
                            Tuple(
                                $.sqlite3_column_text(
                                    stmt, 0
                                )
                            )(stmt)
                        )
                        : (
                            $.sqlite3_finalize(stmt),
                            $.sqlite3_close(tpl[0]),
                            Nothing()
                        )
                )(tpl[1])
            )(
                bindLR(
                    SQLITE_OK !== $.sqlite3_open(
                        filePath(fpSqliteDB), ppDb
                    )
                        ? Left($.sqlite3_errmsg(ppDb[0]))
                        : Right(ppDb[0])
                )(db =&gt; {
                    const ppStmt = Ref();

                    return (
                        SQLITE_OK !== $.sqlite3_prepare_v2(
                            db, sqlQuery, -1,
                            ppStmt, Ref()
                        )
                            ? Left($.sqlite3_errmsg(db))
                            : Right(
                                Tuple(db)(ppStmt[0])
                            )
                    );
                })
                // Accumulation of all available rows
                // in the table:
            );
        };

    // ----------------------- JXA -----------------------

    // doesFileExist :: FilePath -&gt; IO Bool
    const doesFileExist = fp =&gt; {
        const ref = Ref();

        return $.NSFileManager
            .defaultManager
            .fileExistsAtPathIsDirectory(
                $(fp).stringByStandardizingPath,
                ref
            ) &amp;&amp; !ref[0];
    };

    // --------------------- GENERIC ---------------------

    // Just :: a -&gt; Maybe a
    const Just = x =&gt; ({
        type: "Maybe",
        Just: x
    });


    // Nothing :: Maybe a
    const Nothing = () =&gt; ({
        type: "Maybe",
        Nothing: true
    });


    // Tuple (,) :: a -&gt; b -&gt; (a, b)
    const Tuple = a =&gt;
        // A pair of values, possibly of
        // different types.
        b =&gt; ({
            type: "Tuple",
            "0": a,
            "1": b,
            length: 2,
            *[Symbol.iterator]() {
                for (const k in this) {
                    if (!isNaN(k)) {
                        yield this[k];
                    }
                }
            }
        });


    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = lr =&gt;
        // Bind operator for the Either option type.
        // If lr has a Left value then lr unchanged,
        // otherwise the function mf applied to the
        // Right value in lr.
        mf =&gt; "Left" in lr
            ? lr
            : mf(lr.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);


    // filePath :: String -&gt; FilePath
    const filePath = s =&gt;
        // The given file path with any tilde expanded
        // to the full user directory path.
        ObjC.unwrap(
            $(s).stringByStandardizingPath
        );

    // fmapLR (&lt;$&gt;) :: (b -&gt; c) -&gt; Either a b -&gt; Either a c
    const fmapLR = f =&gt;
        // Either f mapped into the contents of any Right
        // value in e, or e unchanged if is a Left value.
        e =&gt; "Left" in e
            ? e
            : Right(f(e.Right));


    // unfoldr :: (b -&gt; Maybe (a, b)) -&gt; b -&gt; Gen [a]
    const unfoldr = f =&gt;
        // A lazy (generator) list unfolded from a 
        // seed value by repeated application of f to a 
        // value until no residue remains. 
        // Dual to fold/reduce.
        // f returns either Nothing or 
        // Just (value, residue).
        // For a strict output list,
        // wrap with `list` or Array.from
        x =&gt; (
            function* () {
                let maybePair = f(x);

                while (!maybePair.Nothing) {
                    const valueResidue = maybePair.Just;

                    yield valueResidue[0];
                    maybePair = f(valueResidue[1]);
                }
            }()
        );


    // unwords :: [String] -&gt; String
    const unwords = xs =&gt;
        // A space-separated string derived
        // from a list of words.
        xs.join(" ");

    // MAIN ---
    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>754777737.43829</real>
				<key>ModificationDate</key>
				<real>754822641.13659406</real>
				<key>Name</key>
				<string>com.apple.Notes</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>9506C565-89BB-4B35-A412-2C325C777412</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997066</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>9BB504DE-9FA1-423A-9B08-8F6075FA3C73</string>
						<key>Parameters</key>
						<array>
							<string>com.omnigroup.OmniFocus4</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>740391178.58374703</real>
				<key>ModificationDate</key>
				<real>740492483.36745906</real>
				<key>Name</key>
				<string>com.omnigroup.OmniFocus4</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>98FF02F8-0644-424F-8531-8AB9E6DFAB7F</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997027</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>JustDisplay</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetClipboardToText</string>
						<key>Text</key>
						<string></string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997028</integer>
						<key>AllWindows</key>
						<true/>
						<key>AlreadyActivatedActionType</key>
						<string>Normal</string>
						<key>Application</key>
						<dict>
							<key>BundleIdentifier</key>
							<string>com.binarynights.ForkLift</string>
							<key>Name</key>
							<string>ForkLift</string>
							<key>NewFile</key>
							<string>/Applications/ForkLift.app</string>
						</dict>
						<key>MacroActionType</key>
						<string>ActivateApplication</string>
						<key>ReopenWindows</key>
						<false/>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15997029</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Menu</string>
									<key>MenuConditionSelectionType</key>
									<string>Is</string>
									<key>MenuConditionType</key>
									<string>IsEnabled</string>
									<key>MenuModifiers</key>
									<integer>256</integer>
									<key>MenuShortcut</key>
									<string>C</string>
									<key>MenuTitle</key>
									<string>Copy</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15997030</integer>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>SelectMenuItem</string>
								<key>Menu</key>
								<array>
									<string>Edit</string>
									<string>Copy</string>
								</array>
								<key>TargetApplication</key>
								<dict>
									<key>BundleIdentifier</key>
									<string>com.binarynights.ForkLift</string>
									<key>Name</key>
									<string>ForkLift</string>
									<key>NewFile</key>
									<string>/Applications/ForkLift.app</string>
								</dict>
								<key>TargetingType</key>
								<string>Specific</string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15997031</integer>
								<key>IsActive</key>
								<false/>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>Pause</string>
								<key>Time</key>
								<string>.1</string>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15997032</integer>
								<key>DisplayKind</key>
								<string>Variable</string>
								<key>HonourFailureSettings</key>
								<true/>
								<key>IncludeStdErr</key>
								<false/>
								<key>IncludedVariables</key>
								<array/>
								<key>MacroActionType</key>
								<string>ExecuteJavaScriptForAutomation</string>
								<key>Path</key>
								<string></string>
								<key>Text</key>
								<string>return (() =&gt; {
    "use strict";

    ObjC.import("AppKit");

    const main = () =&gt;
        either(
            alert("Copy as MD link from ForkLift")
        )(
            mdLink =&gt; mdLink
        )(
            bindLR(
                clipOfTypeLR("public.file-url")
            )(
                url =&gt; Right(
                    `[${takeFileName(url)}](${url})`
                )
            )
        );


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };

    // clipOfTypeLR :: String -&gt; Either String String
    const clipOfTypeLR = utiOrBundleID =&gt; {
        const
            clip = ObjC.deepUnwrap(
                $.NSString.alloc.initWithDataEncoding(
                    $.NSPasteboard.generalPasteboard
                    .dataForType(utiOrBundleID),
                    $.NSUTF8StringEncoding
                )
            );

        return 0 &lt; clip.length
            ? Right(clip)
            : Left(
                "No clipboard content found " + (
                    `for type '${utiOrBundleID}'`
                )
            );
    };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });


    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });


    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = lr =&gt;
    // Bind operator for the Either option type.
    // If lr has a Left value then lr unchanged,
    // otherwise the function mf applied to the
    // Right value in lr.
        mf =&gt; "Left" in lr
            ? lr
            : mf(lr.Right);


    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
    // Application of the function fl to the
    // contents of any Left value in e, or
    // the application of fr to its Right value.
        fr =&gt; e =&gt; "Left" in e
            ? fl(e.Left)
            : fr(e.Right);


    // takeFileName :: FilePath -&gt; FilePath
    const takeFileName = fp =&gt;
        // The file name component of a filepath.
        0 &lt; fp.length
            ? "/" !== fp[fp.length - 1]
                ? fp.split("/").slice(-1)[0]
                : ""
            : "";

    return main();
})();</string>
								<key>TimeOutAbortsMacro</key>
								<true/>
								<key>TrimResults</key>
								<true/>
								<key>TrimResultsNew</key>
								<true/>
								<key>UseModernSyntax</key>
								<true/>
								<key>UseText</key>
								<true/>
								<key>Variable</key>
								<string>mdLink</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>728246646.694754</real>
				<key>ModificationDate</key>
				<real>728249043.407812</real>
				<key>Name</key>
				<string>com.binarynights.ForkLift</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>DF89E29C-96F3-4633-A9FA-86D88C1E4557</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997063</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>9BB504DE-9FA1-423A-9B08-8F6075FA3C73</string>
						<key>Parameters</key>
						<array>
							<string>com.omnigroup.OmniFocus3</string>
						</array>
						<key>ResultVariable</key>
						<string>VarName</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>628968821.703493</real>
				<key>ModificationDate</key>
				<real>740492244.83095002</real>
				<key>Name</key>
				<string>com.omnigroup.OmniFocus3</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>E3BF9020-661B-4952-B3C1-D28CF9D98B54</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>620208716.32096696</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15997065</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>return (() =&gt; {
    "use strict";

    // Rob Trew @2020, 2023
    // Ver 0.02

    // main :: IO ()
    const main = () =&gt; {
        const
            mail = Application("com.apple.mail"),
            msgID = x =&gt; x.messageId(),
            timeStamp = x =&gt; x.dateSent(),
            msgs = nubBy(on(eq)(msgID))(
                sortOn(timeStamp)(mail.selection())
            );

        return unlines(msgs.map(
            x =&gt; {
                const
                    label = `${x.subject()} ${
                        taskPaperDateString(
                            new Date(
                                Math.max(
                                    x.dateReceived(),
                                    x.dateSent()
                                )
                            )
                        )} ${x.sender()}`,
                    url = mailURL(x.messageId());

                return `[${label}](${url})`;
            }
        ));
    };

    // iso8601Local :: Date -&gt; String
    const iso8601Local = dte =&gt;
        new Date(dte - (6E4 * dte.getTimezoneOffset()))
        .toISOString();


    // taskPaperDateString :: Date -&gt; String
    const taskPaperDateString = dte =&gt;
        second(t =&gt; t.slice(0, 5))(
            iso8601Local(dte).split("T")
        )
        .join(" ");


    // mailURL :: String -&gt; String
    const mailURL = messageID =&gt;
        `message://%3C${messageID}%3E`;


    // ---------------------- GENERIC ----------------------

    // comparing :: Ord a =&gt; (b -&gt; a) -&gt; b -&gt; b -&gt; Ordering
    const comparing = f =&gt;
    // The ordering of f(x) and f(y) as a value
    // drawn from {-1, 0, 1}, representing {LT, EQ, GT}.
        x =&gt; y =&gt; {
            const
                a = f(x),
                b = f(y);

            return a &lt; b ? -1 : (a &gt; b ? 1 : 0);
        };


    // eq (==) :: Eq a =&gt; a -&gt; a -&gt; Bool
    const eq = a =&gt;
        // True when a and b are equivalent in the terms
        // defined below for their shared data type.
        b =&gt; a === b;


    // nubBy :: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [a]
    const nubBy = p =&gt;
    // A sublist of xs from which all duplicates,
    // (as defined by the equality predicate p)
    // are excluded.
        xs =&gt; xs.reduce(
            (seen, x) =&gt; seen.some(p(x)) ? (
                seen
            ) : [x].concat(seen),
            []
        );


    // on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c
    const on = f =&gt;
        // e.g. groupBy(on(eq)(length))
        g =&gt; a =&gt; b =&gt; f(g(a))(g(b));


    // second :: (a -&gt; b) -&gt; ((c, a) -&gt; (c, b))
    const second = f =&gt;
    // A function over a simple value lifted
    // to a function over a tuple.
    // f (a, b) -&gt; (a, f(b))
        xy =&gt; [xy[0], f(xy[1])];


    // sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]
    const sortBy = f =&gt;
    // A copy of xs sorted by the comparator function f.
        xs =&gt; xs.slice()
        .sort((a, b) =&gt; f(a)(b));


    // sortOn :: Ord b =&gt; (a -&gt; b) -&gt; [a] -&gt; [a]
    const sortOn = f =&gt;
    // Equivalent to sortBy(comparing(f)), but with f(x)
    // evaluated only once for each x in xs.
    // ('Schwartzian' decorate-sort-undecorate).
        xs =&gt; sortBy(
            comparing(x =&gt; x[0])
        )(
            xs.map(x =&gt; [f(x), x])
        )
        .map(x =&gt; x[1]);


    // unlines :: [String] -&gt; String
    const unlines = xs =&gt;
        // A single string formed by the intercalation
        // of a list of strings with the newline character.
        xs.join("\n");

    return main();
})();</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>mdLink</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>699254658.57702303</real>
				<key>ModificationDate</key>
				<real>740996738.75287104</real>
				<key>Name</key>
				<string>com.apple.mail</string>
				<key>Triggers</key>
				<array/>
				<key>UID</key>
				<string>C75402F0-EB7F-4C29-AF94-1492719DE0E5</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MD Link tools</string>
		<key>ToggleMacroUID</key>
		<string>396599CD-B6E6-42BD-9CF7-3139986864CE</string>
		<key>UID</key>
		<string>05096E60-C3F6-4ED0-9664-B87A21A1B57C</string>
	</dict>
</array>
</plist>
